class Input$artists_bool_exp {
  factory Input$artists_bool_exp({
    List<Input$artists_bool_exp>? $_and,
    Input$artists_bool_exp? $_not,
    List<Input$artists_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$songs_bool_exp? songs,
    Input$String_comparison_exp? thumbnail_url,
  }) =>
      Input$artists_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (songs != null) r'songs': songs,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$artists_bool_exp._(this._$data);

  factory Input$artists_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$artists_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$artists_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$artists_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('songs')) {
      final l$songs = data['songs'];
      result$data['songs'] = l$songs == null
          ? null
          : Input$songs_bool_exp.fromJson((l$songs as Map<String, dynamic>));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$thumbnail_url as Map<String, dynamic>));
    }
    return Input$artists_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$artists_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$artists_bool_exp>?);

  Input$artists_bool_exp? get $_not =>
      (_$data['_not'] as Input$artists_bool_exp?);

  List<Input$artists_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$artists_bool_exp>?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);

  Input$songs_bool_exp? get songs => (_$data['songs'] as Input$songs_bool_exp?);

  Input$String_comparison_exp? get thumbnail_url =>
      (_$data['thumbnail_url'] as Input$String_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('songs')) {
      final l$songs = songs;
      result$data['songs'] = l$songs?.toJson();
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$artists_bool_exp<Input$artists_bool_exp> get copyWith =>
      CopyWith$Input$artists_bool_exp(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$artists_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$songs = songs;
    final lOther$songs = other.songs;
    if (_$data.containsKey('songs') != other._$data.containsKey('songs')) {
      return false;
    }
    if (l$songs != lOther$songs) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$id = id;
    final l$name = name;
    final l$songs = songs;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('songs') ? l$songs : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$artists_bool_exp<TRes> {
  factory CopyWith$Input$artists_bool_exp(
    Input$artists_bool_exp instance,
    TRes Function(Input$artists_bool_exp) then,
  ) = _CopyWithImpl$Input$artists_bool_exp;

  factory CopyWith$Input$artists_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$artists_bool_exp;

  TRes call({
    List<Input$artists_bool_exp>? $_and,
    Input$artists_bool_exp? $_not,
    List<Input$artists_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$songs_bool_exp? songs,
    Input$String_comparison_exp? thumbnail_url,
  });
  TRes $_and(
      Iterable<Input$artists_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$artists_bool_exp<Input$artists_bool_exp>>?)
          _fn);
  CopyWith$Input$artists_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$artists_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$artists_bool_exp<Input$artists_bool_exp>>?)
          _fn);
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$songs_bool_exp<TRes> get songs;
  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url;
}

class _CopyWithImpl$Input$artists_bool_exp<TRes>
    implements CopyWith$Input$artists_bool_exp<TRes> {
  _CopyWithImpl$Input$artists_bool_exp(
    this._instance,
    this._then,
  );

  final Input$artists_bool_exp _instance;

  final TRes Function(Input$artists_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? songs = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$artists_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$artists_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$artists_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$artists_bool_exp>?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (songs != _undefined) 'songs': (songs as Input$songs_bool_exp?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Input$String_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$artists_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$artists_bool_exp<Input$artists_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$artists_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$artists_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$artists_bool_exp.stub(_then(_instance))
        : CopyWith$Input$artists_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$artists_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$artists_bool_exp<Input$artists_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$artists_bool_exp(
                e,
                (i) => i,
              )))?.toList());

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$songs_bool_exp<TRes> get songs {
    final local$songs = _instance.songs;
    return local$songs == null
        ? CopyWith$Input$songs_bool_exp.stub(_then(_instance))
        : CopyWith$Input$songs_bool_exp(local$songs, (e) => call(songs: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url {
    final local$thumbnail_url = _instance.thumbnail_url;
    return local$thumbnail_url == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$thumbnail_url, (e) => call(thumbnail_url: e));
  }
}

class _CopyWithStubImpl$Input$artists_bool_exp<TRes>
    implements CopyWith$Input$artists_bool_exp<TRes> {
  _CopyWithStubImpl$Input$artists_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$artists_bool_exp>? $_and,
    Input$artists_bool_exp? $_not,
    List<Input$artists_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$songs_bool_exp? songs,
    Input$String_comparison_exp? thumbnail_url,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$artists_bool_exp<TRes> get $_not =>
      CopyWith$Input$artists_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$songs_bool_exp<TRes> get songs =>
      CopyWith$Input$songs_bool_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$artists_order_by {
  factory Input$artists_order_by({
    Enum$order_by? id,
    Enum$order_by? name,
    Input$songs_aggregate_order_by? songs_aggregate,
    Enum$order_by? thumbnail_url,
  }) =>
      Input$artists_order_by._({
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (songs_aggregate != null) r'songs_aggregate': songs_aggregate,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$artists_order_by._(this._$data);

  factory Input$artists_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('songs_aggregate')) {
      final l$songs_aggregate = data['songs_aggregate'];
      result$data['songs_aggregate'] = l$songs_aggregate == null
          ? null
          : Input$songs_aggregate_order_by.fromJson(
              (l$songs_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail_url as String));
    }
    return Input$artists_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);

  Input$songs_aggregate_order_by? get songs_aggregate =>
      (_$data['songs_aggregate'] as Input$songs_aggregate_order_by?);

  Enum$order_by? get thumbnail_url =>
      (_$data['thumbnail_url'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('songs_aggregate')) {
      final l$songs_aggregate = songs_aggregate;
      result$data['songs_aggregate'] = l$songs_aggregate?.toJson();
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : toJson$Enum$order_by(l$thumbnail_url);
    }
    return result$data;
  }

  CopyWith$Input$artists_order_by<Input$artists_order_by> get copyWith =>
      CopyWith$Input$artists_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$artists_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$songs_aggregate = songs_aggregate;
    final lOther$songs_aggregate = other.songs_aggregate;
    if (_$data.containsKey('songs_aggregate') !=
        other._$data.containsKey('songs_aggregate')) {
      return false;
    }
    if (l$songs_aggregate != lOther$songs_aggregate) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$songs_aggregate = songs_aggregate;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('songs_aggregate') ? l$songs_aggregate : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$artists_order_by<TRes> {
  factory CopyWith$Input$artists_order_by(
    Input$artists_order_by instance,
    TRes Function(Input$artists_order_by) then,
  ) = _CopyWithImpl$Input$artists_order_by;

  factory CopyWith$Input$artists_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$artists_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? name,
    Input$songs_aggregate_order_by? songs_aggregate,
    Enum$order_by? thumbnail_url,
  });
  CopyWith$Input$songs_aggregate_order_by<TRes> get songs_aggregate;
}

class _CopyWithImpl$Input$artists_order_by<TRes>
    implements CopyWith$Input$artists_order_by<TRes> {
  _CopyWithImpl$Input$artists_order_by(
    this._instance,
    this._then,
  );

  final Input$artists_order_by _instance;

  final TRes Function(Input$artists_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? songs_aggregate = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$artists_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (songs_aggregate != _undefined)
          'songs_aggregate':
              (songs_aggregate as Input$songs_aggregate_order_by?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Enum$order_by?),
      }));

  CopyWith$Input$songs_aggregate_order_by<TRes> get songs_aggregate {
    final local$songs_aggregate = _instance.songs_aggregate;
    return local$songs_aggregate == null
        ? CopyWith$Input$songs_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_aggregate_order_by(
            local$songs_aggregate, (e) => call(songs_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$artists_order_by<TRes>
    implements CopyWith$Input$artists_order_by<TRes> {
  _CopyWithStubImpl$Input$artists_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? name,
    Input$songs_aggregate_order_by? songs_aggregate,
    Enum$order_by? thumbnail_url,
  }) =>
      _res;

  CopyWith$Input$songs_aggregate_order_by<TRes> get songs_aggregate =>
      CopyWith$Input$songs_aggregate_order_by.stub(_res);
}

class Input$artists_stream_cursor_input {
  factory Input$artists_stream_cursor_input({
    required Input$artists_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$artists_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$artists_stream_cursor_input._(this._$data);

  factory Input$artists_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$artists_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$artists_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$artists_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$artists_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$artists_stream_cursor_input<Input$artists_stream_cursor_input>
      get copyWith => CopyWith$Input$artists_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$artists_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$artists_stream_cursor_input<TRes> {
  factory CopyWith$Input$artists_stream_cursor_input(
    Input$artists_stream_cursor_input instance,
    TRes Function(Input$artists_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$artists_stream_cursor_input;

  factory CopyWith$Input$artists_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$artists_stream_cursor_input;

  TRes call({
    Input$artists_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$artists_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$artists_stream_cursor_input<TRes>
    implements CopyWith$Input$artists_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$artists_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$artists_stream_cursor_input _instance;

  final TRes Function(Input$artists_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$artists_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$artists_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$artists_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$artists_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$artists_stream_cursor_input<TRes>
    implements CopyWith$Input$artists_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$artists_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$artists_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$artists_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$artists_stream_cursor_value_input.stub(_res);
}

class Input$artists_stream_cursor_value_input {
  factory Input$artists_stream_cursor_value_input({
    int? id,
    String? name,
    String? thumbnail_url,
  }) =>
      Input$artists_stream_cursor_value_input._({
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$artists_stream_cursor_value_input._(this._$data);

  factory Input$artists_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = (l$thumbnail_url as String?);
    }
    return Input$artists_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get id => (_$data['id'] as int?);

  String? get name => (_$data['name'] as String?);

  String? get thumbnail_url => (_$data['thumbnail_url'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url;
    }
    return result$data;
  }

  CopyWith$Input$artists_stream_cursor_value_input<
          Input$artists_stream_cursor_value_input>
      get copyWith => CopyWith$Input$artists_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$artists_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$artists_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$artists_stream_cursor_value_input(
    Input$artists_stream_cursor_value_input instance,
    TRes Function(Input$artists_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$artists_stream_cursor_value_input;

  factory CopyWith$Input$artists_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$artists_stream_cursor_value_input;

  TRes call({
    int? id,
    String? name,
    String? thumbnail_url,
  });
}

class _CopyWithImpl$Input$artists_stream_cursor_value_input<TRes>
    implements CopyWith$Input$artists_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$artists_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$artists_stream_cursor_value_input _instance;

  final TRes Function(Input$artists_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$artists_stream_cursor_value_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as int?),
        if (name != _undefined) 'name': (name as String?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as String?),
      }));
}

class _CopyWithStubImpl$Input$artists_stream_cursor_value_input<TRes>
    implements CopyWith$Input$artists_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$artists_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? thumbnail_url,
  }) =>
      _res;
}

class Input$Boolean_comparison_exp {
  factory Input$Boolean_comparison_exp({
    bool? $_eq,
    bool? $_gt,
    bool? $_gte,
    List<bool>? $_in,
    bool? $_is_null,
    bool? $_lt,
    bool? $_lte,
    bool? $_neq,
    List<bool>? $_nin,
  }) =>
      Input$Boolean_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$Boolean_comparison_exp._(this._$data);

  factory Input$Boolean_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as bool?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as bool?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as bool?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as bool)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as bool?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as bool?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as bool?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as bool)).toList();
    }
    return Input$Boolean_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  bool? get $_eq => (_$data['_eq'] as bool?);

  bool? get $_gt => (_$data['_gt'] as bool?);

  bool? get $_gte => (_$data['_gte'] as bool?);

  List<bool>? get $_in => (_$data['_in'] as List<bool>?);

  bool? get $_is_null => (_$data['_is_null'] as bool?);

  bool? get $_lt => (_$data['_lt'] as bool?);

  bool? get $_lte => (_$data['_lte'] as bool?);

  bool? get $_neq => (_$data['_neq'] as bool?);

  List<bool>? get $_nin => (_$data['_nin'] as List<bool>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$Boolean_comparison_exp<Input$Boolean_comparison_exp>
      get copyWith => CopyWith$Input$Boolean_comparison_exp(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Boolean_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$Boolean_comparison_exp<TRes> {
  factory CopyWith$Input$Boolean_comparison_exp(
    Input$Boolean_comparison_exp instance,
    TRes Function(Input$Boolean_comparison_exp) then,
  ) = _CopyWithImpl$Input$Boolean_comparison_exp;

  factory CopyWith$Input$Boolean_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Boolean_comparison_exp;

  TRes call({
    bool? $_eq,
    bool? $_gt,
    bool? $_gte,
    List<bool>? $_in,
    bool? $_is_null,
    bool? $_lt,
    bool? $_lte,
    bool? $_neq,
    List<bool>? $_nin,
  });
}

class _CopyWithImpl$Input$Boolean_comparison_exp<TRes>
    implements CopyWith$Input$Boolean_comparison_exp<TRes> {
  _CopyWithImpl$Input$Boolean_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$Boolean_comparison_exp _instance;

  final TRes Function(Input$Boolean_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$Boolean_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as bool?),
        if ($_gt != _undefined) '_gt': ($_gt as bool?),
        if ($_gte != _undefined) '_gte': ($_gte as bool?),
        if ($_in != _undefined) '_in': ($_in as List<bool>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as bool?),
        if ($_lte != _undefined) '_lte': ($_lte as bool?),
        if ($_neq != _undefined) '_neq': ($_neq as bool?),
        if ($_nin != _undefined) '_nin': ($_nin as List<bool>?),
      }));
}

class _CopyWithStubImpl$Input$Boolean_comparison_exp<TRes>
    implements CopyWith$Input$Boolean_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$Boolean_comparison_exp(this._res);

  TRes _res;

  call({
    bool? $_eq,
    bool? $_gt,
    bool? $_gte,
    List<bool>? $_in,
    bool? $_is_null,
    bool? $_lt,
    bool? $_lte,
    bool? $_neq,
    List<bool>? $_nin,
  }) =>
      _res;
}

class Input$Int_comparison_exp {
  factory Input$Int_comparison_exp({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      Input$Int_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$Int_comparison_exp._(this._$data);

  factory Input$Int_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as int?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as int?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as int?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as int?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as int?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as int?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    return Input$Int_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get $_eq => (_$data['_eq'] as int?);

  int? get $_gt => (_$data['_gt'] as int?);

  int? get $_gte => (_$data['_gte'] as int?);

  List<int>? get $_in => (_$data['_in'] as List<int>?);

  bool? get $_is_null => (_$data['_is_null'] as bool?);

  int? get $_lt => (_$data['_lt'] as int?);

  int? get $_lte => (_$data['_lte'] as int?);

  int? get $_neq => (_$data['_neq'] as int?);

  List<int>? get $_nin => (_$data['_nin'] as List<int>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$Int_comparison_exp<Input$Int_comparison_exp> get copyWith =>
      CopyWith$Input$Int_comparison_exp(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Int_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$Int_comparison_exp<TRes> {
  factory CopyWith$Input$Int_comparison_exp(
    Input$Int_comparison_exp instance,
    TRes Function(Input$Int_comparison_exp) then,
  ) = _CopyWithImpl$Input$Int_comparison_exp;

  factory CopyWith$Input$Int_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Int_comparison_exp;

  TRes call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  });
}

class _CopyWithImpl$Input$Int_comparison_exp<TRes>
    implements CopyWith$Input$Int_comparison_exp<TRes> {
  _CopyWithImpl$Input$Int_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$Int_comparison_exp _instance;

  final TRes Function(Input$Int_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$Int_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as int?),
        if ($_gt != _undefined) '_gt': ($_gt as int?),
        if ($_gte != _undefined) '_gte': ($_gte as int?),
        if ($_in != _undefined) '_in': ($_in as List<int>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as int?),
        if ($_lte != _undefined) '_lte': ($_lte as int?),
        if ($_neq != _undefined) '_neq': ($_neq as int?),
        if ($_nin != _undefined) '_nin': ($_nin as List<int>?),
      }));
}

class _CopyWithStubImpl$Input$Int_comparison_exp<TRes>
    implements CopyWith$Input$Int_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$Int_comparison_exp(this._res);

  TRes _res;

  call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      _res;
}

class Input$posts_aggregate_order_by {
  factory Input$posts_aggregate_order_by({
    Input$posts_avg_order_by? avg,
    Enum$order_by? count,
    Input$posts_max_order_by? max,
    Input$posts_min_order_by? min,
    Input$posts_stddev_order_by? stddev,
    Input$posts_stddev_pop_order_by? stddev_pop,
    Input$posts_stddev_samp_order_by? stddev_samp,
    Input$posts_sum_order_by? sum,
    Input$posts_var_pop_order_by? var_pop,
    Input$posts_var_samp_order_by? var_samp,
    Input$posts_variance_order_by? variance,
  }) =>
      Input$posts_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$posts_aggregate_order_by._(this._$data);

  factory Input$posts_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$posts_avg_order_by.fromJson((l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$posts_max_order_by.fromJson((l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$posts_min_order_by.fromJson((l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$posts_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$posts_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$posts_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$posts_sum_order_by.fromJson((l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$posts_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$posts_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$posts_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$posts_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$posts_avg_order_by? get avg =>
      (_$data['avg'] as Input$posts_avg_order_by?);

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);

  Input$posts_max_order_by? get max =>
      (_$data['max'] as Input$posts_max_order_by?);

  Input$posts_min_order_by? get min =>
      (_$data['min'] as Input$posts_min_order_by?);

  Input$posts_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$posts_stddev_order_by?);

  Input$posts_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$posts_stddev_pop_order_by?);

  Input$posts_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$posts_stddev_samp_order_by?);

  Input$posts_sum_order_by? get sum =>
      (_$data['sum'] as Input$posts_sum_order_by?);

  Input$posts_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$posts_var_pop_order_by?);

  Input$posts_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$posts_var_samp_order_by?);

  Input$posts_variance_order_by? get variance =>
      (_$data['variance'] as Input$posts_variance_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$posts_aggregate_order_by<Input$posts_aggregate_order_by>
      get copyWith => CopyWith$Input$posts_aggregate_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_aggregate_order_by<TRes> {
  factory CopyWith$Input$posts_aggregate_order_by(
    Input$posts_aggregate_order_by instance,
    TRes Function(Input$posts_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$posts_aggregate_order_by;

  factory CopyWith$Input$posts_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_aggregate_order_by;

  TRes call({
    Input$posts_avg_order_by? avg,
    Enum$order_by? count,
    Input$posts_max_order_by? max,
    Input$posts_min_order_by? min,
    Input$posts_stddev_order_by? stddev,
    Input$posts_stddev_pop_order_by? stddev_pop,
    Input$posts_stddev_samp_order_by? stddev_samp,
    Input$posts_sum_order_by? sum,
    Input$posts_var_pop_order_by? var_pop,
    Input$posts_var_samp_order_by? var_samp,
    Input$posts_variance_order_by? variance,
  });
  CopyWith$Input$posts_avg_order_by<TRes> get avg;
  CopyWith$Input$posts_max_order_by<TRes> get max;
  CopyWith$Input$posts_min_order_by<TRes> get min;
  CopyWith$Input$posts_stddev_order_by<TRes> get stddev;
  CopyWith$Input$posts_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$posts_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$posts_sum_order_by<TRes> get sum;
  CopyWith$Input$posts_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$posts_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$posts_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$posts_aggregate_order_by<TRes>
    implements CopyWith$Input$posts_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$posts_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_aggregate_order_by _instance;

  final TRes Function(Input$posts_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$posts_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$posts_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$posts_max_order_by?),
        if (min != _undefined) 'min': (min as Input$posts_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$posts_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$posts_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp': (stddev_samp as Input$posts_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$posts_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$posts_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$posts_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$posts_variance_order_by?),
      }));

  CopyWith$Input$posts_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$posts_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_avg_order_by(local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$posts_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$posts_max_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$posts_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$posts_min_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_min_order_by(local$min, (e) => call(min: e));
  }

  CopyWith$Input$posts_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$posts_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$posts_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$posts_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$posts_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$posts_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$posts_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$posts_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_sum_order_by(local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$posts_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$posts_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$posts_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$posts_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$posts_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$posts_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$posts_aggregate_order_by<TRes>
    implements CopyWith$Input$posts_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$posts_avg_order_by? avg,
    Enum$order_by? count,
    Input$posts_max_order_by? max,
    Input$posts_min_order_by? min,
    Input$posts_stddev_order_by? stddev,
    Input$posts_stddev_pop_order_by? stddev_pop,
    Input$posts_stddev_samp_order_by? stddev_samp,
    Input$posts_sum_order_by? sum,
    Input$posts_var_pop_order_by? var_pop,
    Input$posts_var_samp_order_by? var_samp,
    Input$posts_variance_order_by? variance,
  }) =>
      _res;

  CopyWith$Input$posts_avg_order_by<TRes> get avg =>
      CopyWith$Input$posts_avg_order_by.stub(_res);

  CopyWith$Input$posts_max_order_by<TRes> get max =>
      CopyWith$Input$posts_max_order_by.stub(_res);

  CopyWith$Input$posts_min_order_by<TRes> get min =>
      CopyWith$Input$posts_min_order_by.stub(_res);

  CopyWith$Input$posts_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$posts_stddev_order_by.stub(_res);

  CopyWith$Input$posts_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$posts_stddev_pop_order_by.stub(_res);

  CopyWith$Input$posts_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$posts_stddev_samp_order_by.stub(_res);

  CopyWith$Input$posts_sum_order_by<TRes> get sum =>
      CopyWith$Input$posts_sum_order_by.stub(_res);

  CopyWith$Input$posts_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$posts_var_pop_order_by.stub(_res);

  CopyWith$Input$posts_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$posts_var_samp_order_by.stub(_res);

  CopyWith$Input$posts_variance_order_by<TRes> get variance =>
      CopyWith$Input$posts_variance_order_by.stub(_res);
}

class Input$posts_avg_order_by {
  factory Input$posts_avg_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_avg_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_avg_order_by._(this._$data);

  factory Input$posts_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_avg_order_by<Input$posts_avg_order_by> get copyWith =>
      CopyWith$Input$posts_avg_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_avg_order_by<TRes> {
  factory CopyWith$Input$posts_avg_order_by(
    Input$posts_avg_order_by instance,
    TRes Function(Input$posts_avg_order_by) then,
  ) = _CopyWithImpl$Input$posts_avg_order_by;

  factory CopyWith$Input$posts_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_avg_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_avg_order_by<TRes>
    implements CopyWith$Input$posts_avg_order_by<TRes> {
  _CopyWithImpl$Input$posts_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_avg_order_by _instance;

  final TRes Function(Input$posts_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_avg_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_avg_order_by<TRes>
    implements CopyWith$Input$posts_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$posts_bool_exp {
  factory Input$posts_bool_exp({
    List<Input$posts_bool_exp>? $_and,
    Input$posts_bool_exp? $_not,
    List<Input$posts_bool_exp>? $_or,
    Input$String_comparison_exp? description,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? link,
    Input$timestamptz_comparison_exp? published,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$String_comparison_exp? title,
  }) =>
      Input$posts_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (description != null) r'description': description,
        if (id != null) r'id': id,
        if (link != null) r'link': link,
        if (published != null) r'published': published,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (title != null) r'title': title,
      });

  Input$posts_bool_exp._(this._$data);

  factory Input$posts_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$posts_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$posts_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$posts_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$description as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('link')) {
      final l$link = data['link'];
      result$data['link'] = l$link == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$link as Map<String, dynamic>));
    }
    if (data.containsKey('published')) {
      final l$published = data['published'];
      result$data['published'] = l$published == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$published as Map<String, dynamic>));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_bool_exp.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$station_id as Map<String, dynamic>));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = l$title == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$title as Map<String, dynamic>));
    }
    return Input$posts_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$posts_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$posts_bool_exp>?);

  Input$posts_bool_exp? get $_not => (_$data['_not'] as Input$posts_bool_exp?);

  List<Input$posts_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$posts_bool_exp>?);

  Input$String_comparison_exp? get description =>
      (_$data['description'] as Input$String_comparison_exp?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$String_comparison_exp? get link =>
      (_$data['link'] as Input$String_comparison_exp?);

  Input$timestamptz_comparison_exp? get published =>
      (_$data['published'] as Input$timestamptz_comparison_exp?);

  Input$stations_bool_exp? get station =>
      (_$data['station'] as Input$stations_bool_exp?);

  Input$Int_comparison_exp? get station_id =>
      (_$data['station_id'] as Input$Int_comparison_exp?);

  Input$String_comparison_exp? get title =>
      (_$data['title'] as Input$String_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('link')) {
      final l$link = link;
      result$data['link'] = l$link?.toJson();
    }
    if (_$data.containsKey('published')) {
      final l$published = published;
      result$data['published'] = l$published?.toJson();
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id?.toJson();
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$posts_bool_exp<Input$posts_bool_exp> get copyWith =>
      CopyWith$Input$posts_bool_exp(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$link = link;
    final lOther$link = other.link;
    if (_$data.containsKey('link') != other._$data.containsKey('link')) {
      return false;
    }
    if (l$link != lOther$link) {
      return false;
    }
    final l$published = published;
    final lOther$published = other.published;
    if (_$data.containsKey('published') !=
        other._$data.containsKey('published')) {
      return false;
    }
    if (l$published != lOther$published) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$description = description;
    final l$id = id;
    final l$link = link;
    final l$published = published;
    final l$station = station;
    final l$station_id = station_id;
    final l$title = title;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('link') ? l$link : const {},
      _$data.containsKey('published') ? l$published : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('title') ? l$title : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_bool_exp<TRes> {
  factory CopyWith$Input$posts_bool_exp(
    Input$posts_bool_exp instance,
    TRes Function(Input$posts_bool_exp) then,
  ) = _CopyWithImpl$Input$posts_bool_exp;

  factory CopyWith$Input$posts_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_bool_exp;

  TRes call({
    List<Input$posts_bool_exp>? $_and,
    Input$posts_bool_exp? $_not,
    List<Input$posts_bool_exp>? $_or,
    Input$String_comparison_exp? description,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? link,
    Input$timestamptz_comparison_exp? published,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$String_comparison_exp? title,
  });
  TRes $_and(
      Iterable<Input$posts_bool_exp>? Function(
              Iterable<CopyWith$Input$posts_bool_exp<Input$posts_bool_exp>>?)
          _fn);
  CopyWith$Input$posts_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$posts_bool_exp>? Function(
              Iterable<CopyWith$Input$posts_bool_exp<Input$posts_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get description;
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get link;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get published;
  CopyWith$Input$stations_bool_exp<TRes> get station;
  CopyWith$Input$Int_comparison_exp<TRes> get station_id;
  CopyWith$Input$String_comparison_exp<TRes> get title;
}

class _CopyWithImpl$Input$posts_bool_exp<TRes>
    implements CopyWith$Input$posts_bool_exp<TRes> {
  _CopyWithImpl$Input$posts_bool_exp(
    this._instance,
    this._then,
  );

  final Input$posts_bool_exp _instance;

  final TRes Function(Input$posts_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? description = _undefined,
    Object? id = _undefined,
    Object? link = _undefined,
    Object? published = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? title = _undefined,
  }) =>
      _then(Input$posts_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined) '_and': ($_and as List<Input$posts_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$posts_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$posts_bool_exp>?),
        if (description != _undefined)
          'description': (description as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (link != _undefined) 'link': (link as Input$String_comparison_exp?),
        if (published != _undefined)
          'published': (published as Input$timestamptz_comparison_exp?),
        if (station != _undefined)
          'station': (station as Input$stations_bool_exp?),
        if (station_id != _undefined)
          'station_id': (station_id as Input$Int_comparison_exp?),
        if (title != _undefined)
          'title': (title as Input$String_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$posts_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$posts_bool_exp<Input$posts_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$posts_bool_exp(
                e,
                (i) => i,
              )))?.toList());

  CopyWith$Input$posts_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$posts_bool_exp.stub(_then(_instance))
        : CopyWith$Input$posts_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$posts_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$posts_bool_exp<Input$posts_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$posts_bool_exp(
                e,
                (i) => i,
              )))?.toList());

  CopyWith$Input$String_comparison_exp<TRes> get description {
    final local$description = _instance.description;
    return local$description == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$description, (e) => call(description: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get link {
    final local$link = _instance.link;
    return local$link == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$link, (e) => call(link: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get published {
    final local$published = _instance.published;
    return local$published == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$published, (e) => call(published: e));
  }

  CopyWith$Input$stations_bool_exp<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(
            local$station, (e) => call(station: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get station_id {
    final local$station_id = _instance.station_id;
    return local$station_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$station_id, (e) => call(station_id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$title, (e) => call(title: e));
  }
}

class _CopyWithStubImpl$Input$posts_bool_exp<TRes>
    implements CopyWith$Input$posts_bool_exp<TRes> {
  _CopyWithStubImpl$Input$posts_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$posts_bool_exp>? $_and,
    Input$posts_bool_exp? $_not,
    List<Input$posts_bool_exp>? $_or,
    Input$String_comparison_exp? description,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? link,
    Input$timestamptz_comparison_exp? published,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$String_comparison_exp? title,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$posts_bool_exp<TRes> get $_not =>
      CopyWith$Input$posts_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$String_comparison_exp<TRes> get description =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get link =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$timestamptz_comparison_exp<TRes> get published =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);

  CopyWith$Input$stations_bool_exp<TRes> get station =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get station_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get title =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$posts_max_order_by {
  factory Input$posts_max_order_by({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Enum$order_by? station_id,
    Enum$order_by? title,
  }) =>
      Input$posts_max_order_by._({
        if (description != null) r'description': description,
        if (id != null) r'id': id,
        if (link != null) r'link': link,
        if (published != null) r'published': published,
        if (station_id != null) r'station_id': station_id,
        if (title != null) r'title': title,
      });

  Input$posts_max_order_by._(this._$data);

  factory Input$posts_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : fromJson$Enum$order_by((l$description as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('link')) {
      final l$link = data['link'];
      result$data['link'] =
          l$link == null ? null : fromJson$Enum$order_by((l$link as String));
    }
    if (data.containsKey('published')) {
      final l$published = data['published'];
      result$data['published'] = l$published == null
          ? null
          : fromJson$Enum$order_by((l$published as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] =
          l$title == null ? null : fromJson$Enum$order_by((l$title as String));
    }
    return Input$posts_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get description => (_$data['description'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get link => (_$data['link'] as Enum$order_by?);

  Enum$order_by? get published => (_$data['published'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get title => (_$data['title'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] =
          l$description == null ? null : toJson$Enum$order_by(l$description);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('link')) {
      final l$link = link;
      result$data['link'] =
          l$link == null ? null : toJson$Enum$order_by(l$link);
    }
    if (_$data.containsKey('published')) {
      final l$published = published;
      result$data['published'] =
          l$published == null ? null : toJson$Enum$order_by(l$published);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] =
          l$title == null ? null : toJson$Enum$order_by(l$title);
    }
    return result$data;
  }

  CopyWith$Input$posts_max_order_by<Input$posts_max_order_by> get copyWith =>
      CopyWith$Input$posts_max_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$link = link;
    final lOther$link = other.link;
    if (_$data.containsKey('link') != other._$data.containsKey('link')) {
      return false;
    }
    if (l$link != lOther$link) {
      return false;
    }
    final l$published = published;
    final lOther$published = other.published;
    if (_$data.containsKey('published') !=
        other._$data.containsKey('published')) {
      return false;
    }
    if (l$published != lOther$published) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$description = description;
    final l$id = id;
    final l$link = link;
    final l$published = published;
    final l$station_id = station_id;
    final l$title = title;
    return Object.hashAll([
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('link') ? l$link : const {},
      _$data.containsKey('published') ? l$published : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('title') ? l$title : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_max_order_by<TRes> {
  factory CopyWith$Input$posts_max_order_by(
    Input$posts_max_order_by instance,
    TRes Function(Input$posts_max_order_by) then,
  ) = _CopyWithImpl$Input$posts_max_order_by;

  factory CopyWith$Input$posts_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_max_order_by;

  TRes call({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Enum$order_by? station_id,
    Enum$order_by? title,
  });
}

class _CopyWithImpl$Input$posts_max_order_by<TRes>
    implements CopyWith$Input$posts_max_order_by<TRes> {
  _CopyWithImpl$Input$posts_max_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_max_order_by _instance;

  final TRes Function(Input$posts_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? description = _undefined,
    Object? id = _undefined,
    Object? link = _undefined,
    Object? published = _undefined,
    Object? station_id = _undefined,
    Object? title = _undefined,
  }) =>
      _then(Input$posts_max_order_by._({
        ..._instance._$data,
        if (description != _undefined)
          'description': (description as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (link != _undefined) 'link': (link as Enum$order_by?),
        if (published != _undefined) 'published': (published as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (title != _undefined) 'title': (title as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_max_order_by<TRes>
    implements CopyWith$Input$posts_max_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Enum$order_by? station_id,
    Enum$order_by? title,
  }) =>
      _res;
}

class Input$posts_min_order_by {
  factory Input$posts_min_order_by({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Enum$order_by? station_id,
    Enum$order_by? title,
  }) =>
      Input$posts_min_order_by._({
        if (description != null) r'description': description,
        if (id != null) r'id': id,
        if (link != null) r'link': link,
        if (published != null) r'published': published,
        if (station_id != null) r'station_id': station_id,
        if (title != null) r'title': title,
      });

  Input$posts_min_order_by._(this._$data);

  factory Input$posts_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : fromJson$Enum$order_by((l$description as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('link')) {
      final l$link = data['link'];
      result$data['link'] =
          l$link == null ? null : fromJson$Enum$order_by((l$link as String));
    }
    if (data.containsKey('published')) {
      final l$published = data['published'];
      result$data['published'] = l$published == null
          ? null
          : fromJson$Enum$order_by((l$published as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] =
          l$title == null ? null : fromJson$Enum$order_by((l$title as String));
    }
    return Input$posts_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get description => (_$data['description'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get link => (_$data['link'] as Enum$order_by?);

  Enum$order_by? get published => (_$data['published'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get title => (_$data['title'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] =
          l$description == null ? null : toJson$Enum$order_by(l$description);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('link')) {
      final l$link = link;
      result$data['link'] =
          l$link == null ? null : toJson$Enum$order_by(l$link);
    }
    if (_$data.containsKey('published')) {
      final l$published = published;
      result$data['published'] =
          l$published == null ? null : toJson$Enum$order_by(l$published);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] =
          l$title == null ? null : toJson$Enum$order_by(l$title);
    }
    return result$data;
  }

  CopyWith$Input$posts_min_order_by<Input$posts_min_order_by> get copyWith =>
      CopyWith$Input$posts_min_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$link = link;
    final lOther$link = other.link;
    if (_$data.containsKey('link') != other._$data.containsKey('link')) {
      return false;
    }
    if (l$link != lOther$link) {
      return false;
    }
    final l$published = published;
    final lOther$published = other.published;
    if (_$data.containsKey('published') !=
        other._$data.containsKey('published')) {
      return false;
    }
    if (l$published != lOther$published) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$description = description;
    final l$id = id;
    final l$link = link;
    final l$published = published;
    final l$station_id = station_id;
    final l$title = title;
    return Object.hashAll([
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('link') ? l$link : const {},
      _$data.containsKey('published') ? l$published : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('title') ? l$title : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_min_order_by<TRes> {
  factory CopyWith$Input$posts_min_order_by(
    Input$posts_min_order_by instance,
    TRes Function(Input$posts_min_order_by) then,
  ) = _CopyWithImpl$Input$posts_min_order_by;

  factory CopyWith$Input$posts_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_min_order_by;

  TRes call({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Enum$order_by? station_id,
    Enum$order_by? title,
  });
}

class _CopyWithImpl$Input$posts_min_order_by<TRes>
    implements CopyWith$Input$posts_min_order_by<TRes> {
  _CopyWithImpl$Input$posts_min_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_min_order_by _instance;

  final TRes Function(Input$posts_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? description = _undefined,
    Object? id = _undefined,
    Object? link = _undefined,
    Object? published = _undefined,
    Object? station_id = _undefined,
    Object? title = _undefined,
  }) =>
      _then(Input$posts_min_order_by._({
        ..._instance._$data,
        if (description != _undefined)
          'description': (description as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (link != _undefined) 'link': (link as Enum$order_by?),
        if (published != _undefined) 'published': (published as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (title != _undefined) 'title': (title as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_min_order_by<TRes>
    implements CopyWith$Input$posts_min_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Enum$order_by? station_id,
    Enum$order_by? title,
  }) =>
      _res;
}

class Input$posts_order_by {
  factory Input$posts_order_by({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Enum$order_by? title,
  }) =>
      Input$posts_order_by._({
        if (description != null) r'description': description,
        if (id != null) r'id': id,
        if (link != null) r'link': link,
        if (published != null) r'published': published,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (title != null) r'title': title,
      });

  Input$posts_order_by._(this._$data);

  factory Input$posts_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : fromJson$Enum$order_by((l$description as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('link')) {
      final l$link = data['link'];
      result$data['link'] =
          l$link == null ? null : fromJson$Enum$order_by((l$link as String));
    }
    if (data.containsKey('published')) {
      final l$published = data['published'];
      result$data['published'] = l$published == null
          ? null
          : fromJson$Enum$order_by((l$published as String));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_order_by.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] =
          l$title == null ? null : fromJson$Enum$order_by((l$title as String));
    }
    return Input$posts_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get description => (_$data['description'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get link => (_$data['link'] as Enum$order_by?);

  Enum$order_by? get published => (_$data['published'] as Enum$order_by?);

  Input$stations_order_by? get station =>
      (_$data['station'] as Input$stations_order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get title => (_$data['title'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] =
          l$description == null ? null : toJson$Enum$order_by(l$description);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('link')) {
      final l$link = link;
      result$data['link'] =
          l$link == null ? null : toJson$Enum$order_by(l$link);
    }
    if (_$data.containsKey('published')) {
      final l$published = published;
      result$data['published'] =
          l$published == null ? null : toJson$Enum$order_by(l$published);
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] =
          l$title == null ? null : toJson$Enum$order_by(l$title);
    }
    return result$data;
  }

  CopyWith$Input$posts_order_by<Input$posts_order_by> get copyWith =>
      CopyWith$Input$posts_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$link = link;
    final lOther$link = other.link;
    if (_$data.containsKey('link') != other._$data.containsKey('link')) {
      return false;
    }
    if (l$link != lOther$link) {
      return false;
    }
    final l$published = published;
    final lOther$published = other.published;
    if (_$data.containsKey('published') !=
        other._$data.containsKey('published')) {
      return false;
    }
    if (l$published != lOther$published) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$description = description;
    final l$id = id;
    final l$link = link;
    final l$published = published;
    final l$station = station;
    final l$station_id = station_id;
    final l$title = title;
    return Object.hashAll([
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('link') ? l$link : const {},
      _$data.containsKey('published') ? l$published : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('title') ? l$title : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_order_by<TRes> {
  factory CopyWith$Input$posts_order_by(
    Input$posts_order_by instance,
    TRes Function(Input$posts_order_by) then,
  ) = _CopyWithImpl$Input$posts_order_by;

  factory CopyWith$Input$posts_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_order_by;

  TRes call({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Enum$order_by? title,
  });
  CopyWith$Input$stations_order_by<TRes> get station;
}

class _CopyWithImpl$Input$posts_order_by<TRes>
    implements CopyWith$Input$posts_order_by<TRes> {
  _CopyWithImpl$Input$posts_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_order_by _instance;

  final TRes Function(Input$posts_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? description = _undefined,
    Object? id = _undefined,
    Object? link = _undefined,
    Object? published = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? title = _undefined,
  }) =>
      _then(Input$posts_order_by._({
        ..._instance._$data,
        if (description != _undefined)
          'description': (description as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (link != _undefined) 'link': (link as Enum$order_by?),
        if (published != _undefined) 'published': (published as Enum$order_by?),
        if (station != _undefined)
          'station': (station as Input$stations_order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (title != _undefined) 'title': (title as Enum$order_by?),
      }));

  CopyWith$Input$stations_order_by<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_order_by(
            local$station, (e) => call(station: e));
  }
}

class _CopyWithStubImpl$Input$posts_order_by<TRes>
    implements CopyWith$Input$posts_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? description,
    Enum$order_by? id,
    Enum$order_by? link,
    Enum$order_by? published,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Enum$order_by? title,
  }) =>
      _res;

  CopyWith$Input$stations_order_by<TRes> get station =>
      CopyWith$Input$stations_order_by.stub(_res);
}

class Input$posts_stddev_order_by {
  factory Input$posts_stddev_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_stddev_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_stddev_order_by._(this._$data);

  factory Input$posts_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_stddev_order_by<Input$posts_stddev_order_by>
      get copyWith => CopyWith$Input$posts_stddev_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_stddev_order_by<TRes> {
  factory CopyWith$Input$posts_stddev_order_by(
    Input$posts_stddev_order_by instance,
    TRes Function(Input$posts_stddev_order_by) then,
  ) = _CopyWithImpl$Input$posts_stddev_order_by;

  factory CopyWith$Input$posts_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_stddev_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_stddev_order_by<TRes>
    implements CopyWith$Input$posts_stddev_order_by<TRes> {
  _CopyWithImpl$Input$posts_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_stddev_order_by _instance;

  final TRes Function(Input$posts_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_stddev_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_stddev_order_by<TRes>
    implements CopyWith$Input$posts_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$posts_stddev_pop_order_by {
  factory Input$posts_stddev_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_stddev_pop_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_stddev_pop_order_by._(this._$data);

  factory Input$posts_stddev_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_stddev_pop_order_by<Input$posts_stddev_pop_order_by>
      get copyWith => CopyWith$Input$posts_stddev_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$posts_stddev_pop_order_by(
    Input$posts_stddev_pop_order_by instance,
    TRes Function(Input$posts_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$posts_stddev_pop_order_by;

  factory CopyWith$Input$posts_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_stddev_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_stddev_pop_order_by<TRes>
    implements CopyWith$Input$posts_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$posts_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_stddev_pop_order_by _instance;

  final TRes Function(Input$posts_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_stddev_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_stddev_pop_order_by<TRes>
    implements CopyWith$Input$posts_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$posts_stddev_samp_order_by {
  factory Input$posts_stddev_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_stddev_samp_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_stddev_samp_order_by._(this._$data);

  factory Input$posts_stddev_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_stddev_samp_order_by<Input$posts_stddev_samp_order_by>
      get copyWith => CopyWith$Input$posts_stddev_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$posts_stddev_samp_order_by(
    Input$posts_stddev_samp_order_by instance,
    TRes Function(Input$posts_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$posts_stddev_samp_order_by;

  factory CopyWith$Input$posts_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_stddev_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_stddev_samp_order_by<TRes>
    implements CopyWith$Input$posts_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$posts_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_stddev_samp_order_by _instance;

  final TRes Function(Input$posts_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_stddev_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_stddev_samp_order_by<TRes>
    implements CopyWith$Input$posts_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$posts_stream_cursor_input {
  factory Input$posts_stream_cursor_input({
    required Input$posts_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$posts_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$posts_stream_cursor_input._(this._$data);

  factory Input$posts_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$posts_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$posts_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$posts_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$posts_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$posts_stream_cursor_input<Input$posts_stream_cursor_input>
      get copyWith => CopyWith$Input$posts_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_stream_cursor_input<TRes> {
  factory CopyWith$Input$posts_stream_cursor_input(
    Input$posts_stream_cursor_input instance,
    TRes Function(Input$posts_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$posts_stream_cursor_input;

  factory CopyWith$Input$posts_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_stream_cursor_input;

  TRes call({
    Input$posts_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$posts_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$posts_stream_cursor_input<TRes>
    implements CopyWith$Input$posts_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$posts_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$posts_stream_cursor_input _instance;

  final TRes Function(Input$posts_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$posts_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$posts_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$posts_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$posts_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$posts_stream_cursor_input<TRes>
    implements CopyWith$Input$posts_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$posts_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$posts_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$posts_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$posts_stream_cursor_value_input.stub(_res);
}

class Input$posts_stream_cursor_value_input {
  factory Input$posts_stream_cursor_value_input({
    String? description,
    int? id,
    String? link,
    String? published,
    int? station_id,
    String? title,
  }) =>
      Input$posts_stream_cursor_value_input._({
        if (description != null) r'description': description,
        if (id != null) r'id': id,
        if (link != null) r'link': link,
        if (published != null) r'published': published,
        if (station_id != null) r'station_id': station_id,
        if (title != null) r'title': title,
      });

  Input$posts_stream_cursor_value_input._(this._$data);

  factory Input$posts_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('link')) {
      final l$link = data['link'];
      result$data['link'] = (l$link as String?);
    }
    if (data.containsKey('published')) {
      final l$published = data['published'];
      result$data['published'] = (l$published as String?);
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = (l$station_id as int?);
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    return Input$posts_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get description => (_$data['description'] as String?);

  int? get id => (_$data['id'] as int?);

  String? get link => (_$data['link'] as String?);

  String? get published => (_$data['published'] as String?);

  int? get station_id => (_$data['station_id'] as int?);

  String? get title => (_$data['title'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('link')) {
      final l$link = link;
      result$data['link'] = l$link;
    }
    if (_$data.containsKey('published')) {
      final l$published = published;
      result$data['published'] = l$published;
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id;
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    return result$data;
  }

  CopyWith$Input$posts_stream_cursor_value_input<
          Input$posts_stream_cursor_value_input>
      get copyWith => CopyWith$Input$posts_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$link = link;
    final lOther$link = other.link;
    if (_$data.containsKey('link') != other._$data.containsKey('link')) {
      return false;
    }
    if (l$link != lOther$link) {
      return false;
    }
    final l$published = published;
    final lOther$published = other.published;
    if (_$data.containsKey('published') !=
        other._$data.containsKey('published')) {
      return false;
    }
    if (l$published != lOther$published) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$description = description;
    final l$id = id;
    final l$link = link;
    final l$published = published;
    final l$station_id = station_id;
    final l$title = title;
    return Object.hashAll([
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('link') ? l$link : const {},
      _$data.containsKey('published') ? l$published : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('title') ? l$title : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$posts_stream_cursor_value_input(
    Input$posts_stream_cursor_value_input instance,
    TRes Function(Input$posts_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$posts_stream_cursor_value_input;

  factory CopyWith$Input$posts_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_stream_cursor_value_input;

  TRes call({
    String? description,
    int? id,
    String? link,
    String? published,
    int? station_id,
    String? title,
  });
}

class _CopyWithImpl$Input$posts_stream_cursor_value_input<TRes>
    implements CopyWith$Input$posts_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$posts_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$posts_stream_cursor_value_input _instance;

  final TRes Function(Input$posts_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? description = _undefined,
    Object? id = _undefined,
    Object? link = _undefined,
    Object? published = _undefined,
    Object? station_id = _undefined,
    Object? title = _undefined,
  }) =>
      _then(Input$posts_stream_cursor_value_input._({
        ..._instance._$data,
        if (description != _undefined) 'description': (description as String?),
        if (id != _undefined) 'id': (id as int?),
        if (link != _undefined) 'link': (link as String?),
        if (published != _undefined) 'published': (published as String?),
        if (station_id != _undefined) 'station_id': (station_id as int?),
        if (title != _undefined) 'title': (title as String?),
      }));
}

class _CopyWithStubImpl$Input$posts_stream_cursor_value_input<TRes>
    implements CopyWith$Input$posts_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$posts_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? description,
    int? id,
    String? link,
    String? published,
    int? station_id,
    String? title,
  }) =>
      _res;
}

class Input$posts_sum_order_by {
  factory Input$posts_sum_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_sum_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_sum_order_by._(this._$data);

  factory Input$posts_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_sum_order_by<Input$posts_sum_order_by> get copyWith =>
      CopyWith$Input$posts_sum_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_sum_order_by<TRes> {
  factory CopyWith$Input$posts_sum_order_by(
    Input$posts_sum_order_by instance,
    TRes Function(Input$posts_sum_order_by) then,
  ) = _CopyWithImpl$Input$posts_sum_order_by;

  factory CopyWith$Input$posts_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_sum_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_sum_order_by<TRes>
    implements CopyWith$Input$posts_sum_order_by<TRes> {
  _CopyWithImpl$Input$posts_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_sum_order_by _instance;

  final TRes Function(Input$posts_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_sum_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_sum_order_by<TRes>
    implements CopyWith$Input$posts_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$posts_var_pop_order_by {
  factory Input$posts_var_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_var_pop_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_var_pop_order_by._(this._$data);

  factory Input$posts_var_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_var_pop_order_by<Input$posts_var_pop_order_by>
      get copyWith => CopyWith$Input$posts_var_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_var_pop_order_by<TRes> {
  factory CopyWith$Input$posts_var_pop_order_by(
    Input$posts_var_pop_order_by instance,
    TRes Function(Input$posts_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$posts_var_pop_order_by;

  factory CopyWith$Input$posts_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_var_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_var_pop_order_by<TRes>
    implements CopyWith$Input$posts_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$posts_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_var_pop_order_by _instance;

  final TRes Function(Input$posts_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_var_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_var_pop_order_by<TRes>
    implements CopyWith$Input$posts_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$posts_var_samp_order_by {
  factory Input$posts_var_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_var_samp_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_var_samp_order_by._(this._$data);

  factory Input$posts_var_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_var_samp_order_by<Input$posts_var_samp_order_by>
      get copyWith => CopyWith$Input$posts_var_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_var_samp_order_by<TRes> {
  factory CopyWith$Input$posts_var_samp_order_by(
    Input$posts_var_samp_order_by instance,
    TRes Function(Input$posts_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$posts_var_samp_order_by;

  factory CopyWith$Input$posts_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_var_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_var_samp_order_by<TRes>
    implements CopyWith$Input$posts_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$posts_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_var_samp_order_by _instance;

  final TRes Function(Input$posts_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_var_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_var_samp_order_by<TRes>
    implements CopyWith$Input$posts_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$posts_variance_order_by {
  factory Input$posts_variance_order_by({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      Input$posts_variance_order_by._({
        if (id != null) r'id': id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$posts_variance_order_by._(this._$data);

  factory Input$posts_variance_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$posts_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$posts_variance_order_by<Input$posts_variance_order_by>
      get copyWith => CopyWith$Input$posts_variance_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$posts_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$posts_variance_order_by<TRes> {
  factory CopyWith$Input$posts_variance_order_by(
    Input$posts_variance_order_by instance,
    TRes Function(Input$posts_variance_order_by) then,
  ) = _CopyWithImpl$Input$posts_variance_order_by;

  factory CopyWith$Input$posts_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$posts_variance_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$posts_variance_order_by<TRes>
    implements CopyWith$Input$posts_variance_order_by<TRes> {
  _CopyWithImpl$Input$posts_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$posts_variance_order_by _instance;

  final TRes Function(Input$posts_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$posts_variance_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$posts_variance_order_by<TRes>
    implements CopyWith$Input$posts_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$posts_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_aggregate_order_by {
  factory Input$reviews_aggregate_order_by({
    Input$reviews_avg_order_by? avg,
    Enum$order_by? count,
    Input$reviews_max_order_by? max,
    Input$reviews_min_order_by? min,
    Input$reviews_stddev_order_by? stddev,
    Input$reviews_stddev_pop_order_by? stddev_pop,
    Input$reviews_stddev_samp_order_by? stddev_samp,
    Input$reviews_sum_order_by? sum,
    Input$reviews_var_pop_order_by? var_pop,
    Input$reviews_var_samp_order_by? var_samp,
    Input$reviews_variance_order_by? variance,
  }) =>
      Input$reviews_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$reviews_aggregate_order_by._(this._$data);

  factory Input$reviews_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$reviews_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$reviews_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$reviews_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$reviews_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$reviews_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$reviews_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$reviews_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$reviews_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$reviews_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$reviews_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$reviews_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$reviews_avg_order_by? get avg =>
      (_$data['avg'] as Input$reviews_avg_order_by?);

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);

  Input$reviews_max_order_by? get max =>
      (_$data['max'] as Input$reviews_max_order_by?);

  Input$reviews_min_order_by? get min =>
      (_$data['min'] as Input$reviews_min_order_by?);

  Input$reviews_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$reviews_stddev_order_by?);

  Input$reviews_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$reviews_stddev_pop_order_by?);

  Input$reviews_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$reviews_stddev_samp_order_by?);

  Input$reviews_sum_order_by? get sum =>
      (_$data['sum'] as Input$reviews_sum_order_by?);

  Input$reviews_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$reviews_var_pop_order_by?);

  Input$reviews_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$reviews_var_samp_order_by?);

  Input$reviews_variance_order_by? get variance =>
      (_$data['variance'] as Input$reviews_variance_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$reviews_aggregate_order_by<Input$reviews_aggregate_order_by>
      get copyWith => CopyWith$Input$reviews_aggregate_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_aggregate_order_by<TRes> {
  factory CopyWith$Input$reviews_aggregate_order_by(
    Input$reviews_aggregate_order_by instance,
    TRes Function(Input$reviews_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$reviews_aggregate_order_by;

  factory CopyWith$Input$reviews_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_aggregate_order_by;

  TRes call({
    Input$reviews_avg_order_by? avg,
    Enum$order_by? count,
    Input$reviews_max_order_by? max,
    Input$reviews_min_order_by? min,
    Input$reviews_stddev_order_by? stddev,
    Input$reviews_stddev_pop_order_by? stddev_pop,
    Input$reviews_stddev_samp_order_by? stddev_samp,
    Input$reviews_sum_order_by? sum,
    Input$reviews_var_pop_order_by? var_pop,
    Input$reviews_var_samp_order_by? var_samp,
    Input$reviews_variance_order_by? variance,
  });
  CopyWith$Input$reviews_avg_order_by<TRes> get avg;
  CopyWith$Input$reviews_max_order_by<TRes> get max;
  CopyWith$Input$reviews_min_order_by<TRes> get min;
  CopyWith$Input$reviews_stddev_order_by<TRes> get stddev;
  CopyWith$Input$reviews_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$reviews_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$reviews_sum_order_by<TRes> get sum;
  CopyWith$Input$reviews_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$reviews_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$reviews_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$reviews_aggregate_order_by<TRes>
    implements CopyWith$Input$reviews_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$reviews_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_aggregate_order_by _instance;

  final TRes Function(Input$reviews_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$reviews_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$reviews_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$reviews_max_order_by?),
        if (min != _undefined) 'min': (min as Input$reviews_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$reviews_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$reviews_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp': (stddev_samp as Input$reviews_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$reviews_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$reviews_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$reviews_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$reviews_variance_order_by?),
      }));

  CopyWith$Input$reviews_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$reviews_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_avg_order_by(local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$reviews_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$reviews_max_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$reviews_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$reviews_min_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_min_order_by(local$min, (e) => call(min: e));
  }

  CopyWith$Input$reviews_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$reviews_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$reviews_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$reviews_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$reviews_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$reviews_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$reviews_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$reviews_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_sum_order_by(local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$reviews_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$reviews_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$reviews_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$reviews_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$reviews_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$reviews_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$reviews_aggregate_order_by<TRes>
    implements CopyWith$Input$reviews_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$reviews_avg_order_by? avg,
    Enum$order_by? count,
    Input$reviews_max_order_by? max,
    Input$reviews_min_order_by? min,
    Input$reviews_stddev_order_by? stddev,
    Input$reviews_stddev_pop_order_by? stddev_pop,
    Input$reviews_stddev_samp_order_by? stddev_samp,
    Input$reviews_sum_order_by? sum,
    Input$reviews_var_pop_order_by? var_pop,
    Input$reviews_var_samp_order_by? var_samp,
    Input$reviews_variance_order_by? variance,
  }) =>
      _res;

  CopyWith$Input$reviews_avg_order_by<TRes> get avg =>
      CopyWith$Input$reviews_avg_order_by.stub(_res);

  CopyWith$Input$reviews_max_order_by<TRes> get max =>
      CopyWith$Input$reviews_max_order_by.stub(_res);

  CopyWith$Input$reviews_min_order_by<TRes> get min =>
      CopyWith$Input$reviews_min_order_by.stub(_res);

  CopyWith$Input$reviews_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$reviews_stddev_order_by.stub(_res);

  CopyWith$Input$reviews_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$reviews_stddev_pop_order_by.stub(_res);

  CopyWith$Input$reviews_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$reviews_stddev_samp_order_by.stub(_res);

  CopyWith$Input$reviews_sum_order_by<TRes> get sum =>
      CopyWith$Input$reviews_sum_order_by.stub(_res);

  CopyWith$Input$reviews_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$reviews_var_pop_order_by.stub(_res);

  CopyWith$Input$reviews_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$reviews_var_samp_order_by.stub(_res);

  CopyWith$Input$reviews_variance_order_by<TRes> get variance =>
      CopyWith$Input$reviews_variance_order_by.stub(_res);
}

class Input$reviews_avg_order_by {
  factory Input$reviews_avg_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_avg_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_avg_order_by._(this._$data);

  factory Input$reviews_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_avg_order_by<Input$reviews_avg_order_by>
      get copyWith => CopyWith$Input$reviews_avg_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_avg_order_by<TRes> {
  factory CopyWith$Input$reviews_avg_order_by(
    Input$reviews_avg_order_by instance,
    TRes Function(Input$reviews_avg_order_by) then,
  ) = _CopyWithImpl$Input$reviews_avg_order_by;

  factory CopyWith$Input$reviews_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_avg_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_avg_order_by<TRes>
    implements CopyWith$Input$reviews_avg_order_by<TRes> {
  _CopyWithImpl$Input$reviews_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_avg_order_by _instance;

  final TRes Function(Input$reviews_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_avg_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_avg_order_by<TRes>
    implements CopyWith$Input$reviews_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_bool_exp {
  factory Input$reviews_bool_exp({
    List<Input$reviews_bool_exp>? $_and,
    Input$reviews_bool_exp? $_not,
    List<Input$reviews_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? message,
    Input$Int_comparison_exp? stars,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$timestamptz_comparison_exp? updated_at,
    Input$Boolean_comparison_exp? verified,
  }) =>
      Input$reviews_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (id != null) r'id': id,
        if (message != null) r'message': message,
        if (stars != null) r'stars': stars,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (verified != null) r'verified': verified,
      });

  Input$reviews_bool_exp._(this._$data);

  factory Input$reviews_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$reviews_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$reviews_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$reviews_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('message')) {
      final l$message = data['message'];
      result$data['message'] = l$message == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$message as Map<String, dynamic>));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] = l$stars == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$stars as Map<String, dynamic>));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_bool_exp.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$station_id as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    if (data.containsKey('verified')) {
      final l$verified = data['verified'];
      result$data['verified'] = l$verified == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$verified as Map<String, dynamic>));
    }
    return Input$reviews_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$reviews_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$reviews_bool_exp>?);

  Input$reviews_bool_exp? get $_not =>
      (_$data['_not'] as Input$reviews_bool_exp?);

  List<Input$reviews_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$reviews_bool_exp>?);

  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$String_comparison_exp? get message =>
      (_$data['message'] as Input$String_comparison_exp?);

  Input$Int_comparison_exp? get stars =>
      (_$data['stars'] as Input$Int_comparison_exp?);

  Input$stations_bool_exp? get station =>
      (_$data['station'] as Input$stations_bool_exp?);

  Input$Int_comparison_exp? get station_id =>
      (_$data['station_id'] as Input$Int_comparison_exp?);

  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);

  Input$Boolean_comparison_exp? get verified =>
      (_$data['verified'] as Input$Boolean_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('message')) {
      final l$message = message;
      result$data['message'] = l$message?.toJson();
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] = l$stars?.toJson();
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    if (_$data.containsKey('verified')) {
      final l$verified = verified;
      result$data['verified'] = l$verified?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$reviews_bool_exp<Input$reviews_bool_exp> get copyWith =>
      CopyWith$Input$reviews_bool_exp(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (_$data.containsKey('message') != other._$data.containsKey('message')) {
      return false;
    }
    if (l$message != lOther$message) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$verified = verified;
    final lOther$verified = other.verified;
    if (_$data.containsKey('verified') !=
        other._$data.containsKey('verified')) {
      return false;
    }
    if (l$verified != lOther$verified) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$id = id;
    final l$message = message;
    final l$stars = stars;
    final l$station = station;
    final l$station_id = station_id;
    final l$updated_at = updated_at;
    final l$verified = verified;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('message') ? l$message : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('verified') ? l$verified : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_bool_exp<TRes> {
  factory CopyWith$Input$reviews_bool_exp(
    Input$reviews_bool_exp instance,
    TRes Function(Input$reviews_bool_exp) then,
  ) = _CopyWithImpl$Input$reviews_bool_exp;

  factory CopyWith$Input$reviews_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_bool_exp;

  TRes call({
    List<Input$reviews_bool_exp>? $_and,
    Input$reviews_bool_exp? $_not,
    List<Input$reviews_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? message,
    Input$Int_comparison_exp? stars,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$timestamptz_comparison_exp? updated_at,
    Input$Boolean_comparison_exp? verified,
  });
  TRes $_and(
      Iterable<Input$reviews_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$reviews_bool_exp<Input$reviews_bool_exp>>?)
          _fn);
  CopyWith$Input$reviews_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$reviews_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$reviews_bool_exp<Input$reviews_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get message;
  CopyWith$Input$Int_comparison_exp<TRes> get stars;
  CopyWith$Input$stations_bool_exp<TRes> get station;
  CopyWith$Input$Int_comparison_exp<TRes> get station_id;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
  CopyWith$Input$Boolean_comparison_exp<TRes> get verified;
}

class _CopyWithImpl$Input$reviews_bool_exp<TRes>
    implements CopyWith$Input$reviews_bool_exp<TRes> {
  _CopyWithImpl$Input$reviews_bool_exp(
    this._instance,
    this._then,
  );

  final Input$reviews_bool_exp _instance;

  final TRes Function(Input$reviews_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? id = _undefined,
    Object? message = _undefined,
    Object? stars = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? updated_at = _undefined,
    Object? verified = _undefined,
  }) =>
      _then(Input$reviews_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$reviews_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$reviews_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$reviews_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (message != _undefined)
          'message': (message as Input$String_comparison_exp?),
        if (stars != _undefined) 'stars': (stars as Input$Int_comparison_exp?),
        if (station != _undefined)
          'station': (station as Input$stations_bool_exp?),
        if (station_id != _undefined)
          'station_id': (station_id as Input$Int_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
        if (verified != _undefined)
          'verified': (verified as Input$Boolean_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$reviews_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$reviews_bool_exp<Input$reviews_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$reviews_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$reviews_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$reviews_bool_exp.stub(_then(_instance))
        : CopyWith$Input$reviews_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$reviews_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$reviews_bool_exp<Input$reviews_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$reviews_bool_exp(
                e,
                (i) => i,
              )))?.toList());

  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get message {
    final local$message = _instance.message;
    return local$message == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$message, (e) => call(message: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get stars {
    final local$stars = _instance.stars;
    return local$stars == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$stars, (e) => call(stars: e));
  }

  CopyWith$Input$stations_bool_exp<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(
            local$station, (e) => call(station: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get station_id {
    final local$station_id = _instance.station_id;
    return local$station_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$station_id, (e) => call(station_id: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get verified {
    final local$verified = _instance.verified;
    return local$verified == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$verified, (e) => call(verified: e));
  }
}

class _CopyWithStubImpl$Input$reviews_bool_exp<TRes>
    implements CopyWith$Input$reviews_bool_exp<TRes> {
  _CopyWithStubImpl$Input$reviews_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$reviews_bool_exp>? $_and,
    Input$reviews_bool_exp? $_not,
    List<Input$reviews_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? message,
    Input$Int_comparison_exp? stars,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$timestamptz_comparison_exp? updated_at,
    Input$Boolean_comparison_exp? verified,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$reviews_bool_exp<TRes> get $_not =>
      CopyWith$Input$reviews_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get message =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get stars =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$stations_bool_exp<TRes> get station =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get station_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);

  CopyWith$Input$Boolean_comparison_exp<TRes> get verified =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$reviews_max_order_by {
  factory Input$reviews_max_order_by({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
  }) =>
      Input$reviews_max_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (id != null) r'id': id,
        if (message != null) r'message': message,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$reviews_max_order_by._(this._$data);

  factory Input$reviews_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('message')) {
      final l$message = data['message'];
      result$data['message'] = l$message == null
          ? null
          : fromJson$Enum$order_by((l$message as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$reviews_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get message => (_$data['message'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('message')) {
      final l$message = message;
      result$data['message'] =
          l$message == null ? null : toJson$Enum$order_by(l$message);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$reviews_max_order_by<Input$reviews_max_order_by>
      get copyWith => CopyWith$Input$reviews_max_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (_$data.containsKey('message') != other._$data.containsKey('message')) {
      return false;
    }
    if (l$message != lOther$message) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$id = id;
    final l$message = message;
    final l$stars = stars;
    final l$station_id = station_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('message') ? l$message : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_max_order_by<TRes> {
  factory CopyWith$Input$reviews_max_order_by(
    Input$reviews_max_order_by instance,
    TRes Function(Input$reviews_max_order_by) then,
  ) = _CopyWithImpl$Input$reviews_max_order_by;

  factory CopyWith$Input$reviews_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_max_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$reviews_max_order_by<TRes>
    implements CopyWith$Input$reviews_max_order_by<TRes> {
  _CopyWithImpl$Input$reviews_max_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_max_order_by _instance;

  final TRes Function(Input$reviews_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? id = _undefined,
    Object? message = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$reviews_max_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (message != _undefined) 'message': (message as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_max_order_by<TRes>
    implements CopyWith$Input$reviews_max_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$reviews_min_order_by {
  factory Input$reviews_min_order_by({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
  }) =>
      Input$reviews_min_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (id != null) r'id': id,
        if (message != null) r'message': message,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$reviews_min_order_by._(this._$data);

  factory Input$reviews_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('message')) {
      final l$message = data['message'];
      result$data['message'] = l$message == null
          ? null
          : fromJson$Enum$order_by((l$message as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$reviews_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get message => (_$data['message'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('message')) {
      final l$message = message;
      result$data['message'] =
          l$message == null ? null : toJson$Enum$order_by(l$message);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$reviews_min_order_by<Input$reviews_min_order_by>
      get copyWith => CopyWith$Input$reviews_min_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (_$data.containsKey('message') != other._$data.containsKey('message')) {
      return false;
    }
    if (l$message != lOther$message) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$id = id;
    final l$message = message;
    final l$stars = stars;
    final l$station_id = station_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('message') ? l$message : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_min_order_by<TRes> {
  factory CopyWith$Input$reviews_min_order_by(
    Input$reviews_min_order_by instance,
    TRes Function(Input$reviews_min_order_by) then,
  ) = _CopyWithImpl$Input$reviews_min_order_by;

  factory CopyWith$Input$reviews_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_min_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$reviews_min_order_by<TRes>
    implements CopyWith$Input$reviews_min_order_by<TRes> {
  _CopyWithImpl$Input$reviews_min_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_min_order_by _instance;

  final TRes Function(Input$reviews_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? id = _undefined,
    Object? message = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$reviews_min_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (message != _undefined) 'message': (message as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_min_order_by<TRes>
    implements CopyWith$Input$reviews_min_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$reviews_order_by {
  factory Input$reviews_order_by({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
    Enum$order_by? verified,
  }) =>
      Input$reviews_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (id != null) r'id': id,
        if (message != null) r'message': message,
        if (stars != null) r'stars': stars,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (verified != null) r'verified': verified,
      });

  Input$reviews_order_by._(this._$data);

  factory Input$reviews_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('message')) {
      final l$message = data['message'];
      result$data['message'] = l$message == null
          ? null
          : fromJson$Enum$order_by((l$message as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_order_by.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('verified')) {
      final l$verified = data['verified'];
      result$data['verified'] = l$verified == null
          ? null
          : fromJson$Enum$order_by((l$verified as String));
    }
    return Input$reviews_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get message => (_$data['message'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Input$stations_order_by? get station =>
      (_$data['station'] as Input$stations_order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);

  Enum$order_by? get verified => (_$data['verified'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('message')) {
      final l$message = message;
      result$data['message'] =
          l$message == null ? null : toJson$Enum$order_by(l$message);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('verified')) {
      final l$verified = verified;
      result$data['verified'] =
          l$verified == null ? null : toJson$Enum$order_by(l$verified);
    }
    return result$data;
  }

  CopyWith$Input$reviews_order_by<Input$reviews_order_by> get copyWith =>
      CopyWith$Input$reviews_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (_$data.containsKey('message') != other._$data.containsKey('message')) {
      return false;
    }
    if (l$message != lOther$message) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$verified = verified;
    final lOther$verified = other.verified;
    if (_$data.containsKey('verified') !=
        other._$data.containsKey('verified')) {
      return false;
    }
    if (l$verified != lOther$verified) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$id = id;
    final l$message = message;
    final l$stars = stars;
    final l$station = station;
    final l$station_id = station_id;
    final l$updated_at = updated_at;
    final l$verified = verified;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('message') ? l$message : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('verified') ? l$verified : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_order_by<TRes> {
  factory CopyWith$Input$reviews_order_by(
    Input$reviews_order_by instance,
    TRes Function(Input$reviews_order_by) then,
  ) = _CopyWithImpl$Input$reviews_order_by;

  factory CopyWith$Input$reviews_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
    Enum$order_by? verified,
  });
  CopyWith$Input$stations_order_by<TRes> get station;
}

class _CopyWithImpl$Input$reviews_order_by<TRes>
    implements CopyWith$Input$reviews_order_by<TRes> {
  _CopyWithImpl$Input$reviews_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_order_by _instance;

  final TRes Function(Input$reviews_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? id = _undefined,
    Object? message = _undefined,
    Object? stars = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? updated_at = _undefined,
    Object? verified = _undefined,
  }) =>
      _then(Input$reviews_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (message != _undefined) 'message': (message as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station != _undefined)
          'station': (station as Input$stations_order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (verified != _undefined) 'verified': (verified as Enum$order_by?),
      }));

  CopyWith$Input$stations_order_by<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_order_by(
            local$station, (e) => call(station: e));
  }
}

class _CopyWithStubImpl$Input$reviews_order_by<TRes>
    implements CopyWith$Input$reviews_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? id,
    Enum$order_by? message,
    Enum$order_by? stars,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Enum$order_by? updated_at,
    Enum$order_by? verified,
  }) =>
      _res;

  CopyWith$Input$stations_order_by<TRes> get station =>
      CopyWith$Input$stations_order_by.stub(_res);
}

class Input$reviews_stddev_order_by {
  factory Input$reviews_stddev_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_stddev_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_stddev_order_by._(this._$data);

  factory Input$reviews_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_stddev_order_by<Input$reviews_stddev_order_by>
      get copyWith => CopyWith$Input$reviews_stddev_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_stddev_order_by<TRes> {
  factory CopyWith$Input$reviews_stddev_order_by(
    Input$reviews_stddev_order_by instance,
    TRes Function(Input$reviews_stddev_order_by) then,
  ) = _CopyWithImpl$Input$reviews_stddev_order_by;

  factory CopyWith$Input$reviews_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_stddev_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_stddev_order_by<TRes>
    implements CopyWith$Input$reviews_stddev_order_by<TRes> {
  _CopyWithImpl$Input$reviews_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_stddev_order_by _instance;

  final TRes Function(Input$reviews_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_stddev_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_stddev_order_by<TRes>
    implements CopyWith$Input$reviews_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_stddev_pop_order_by {
  factory Input$reviews_stddev_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_stddev_pop_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_stddev_pop_order_by._(this._$data);

  factory Input$reviews_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_stddev_pop_order_by<Input$reviews_stddev_pop_order_by>
      get copyWith => CopyWith$Input$reviews_stddev_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$reviews_stddev_pop_order_by(
    Input$reviews_stddev_pop_order_by instance,
    TRes Function(Input$reviews_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$reviews_stddev_pop_order_by;

  factory CopyWith$Input$reviews_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_stddev_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_stddev_pop_order_by<TRes>
    implements CopyWith$Input$reviews_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$reviews_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_stddev_pop_order_by _instance;

  final TRes Function(Input$reviews_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_stddev_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_stddev_pop_order_by<TRes>
    implements CopyWith$Input$reviews_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_stddev_samp_order_by {
  factory Input$reviews_stddev_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_stddev_samp_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_stddev_samp_order_by._(this._$data);

  factory Input$reviews_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_stddev_samp_order_by<
          Input$reviews_stddev_samp_order_by>
      get copyWith => CopyWith$Input$reviews_stddev_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$reviews_stddev_samp_order_by(
    Input$reviews_stddev_samp_order_by instance,
    TRes Function(Input$reviews_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$reviews_stddev_samp_order_by;

  factory CopyWith$Input$reviews_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_stddev_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_stddev_samp_order_by<TRes>
    implements CopyWith$Input$reviews_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$reviews_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_stddev_samp_order_by _instance;

  final TRes Function(Input$reviews_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_stddev_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_stddev_samp_order_by<TRes>
    implements CopyWith$Input$reviews_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_stream_cursor_input {
  factory Input$reviews_stream_cursor_input({
    required Input$reviews_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$reviews_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$reviews_stream_cursor_input._(this._$data);

  factory Input$reviews_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$reviews_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$reviews_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$reviews_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$reviews_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$reviews_stream_cursor_input<Input$reviews_stream_cursor_input>
      get copyWith => CopyWith$Input$reviews_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_stream_cursor_input<TRes> {
  factory CopyWith$Input$reviews_stream_cursor_input(
    Input$reviews_stream_cursor_input instance,
    TRes Function(Input$reviews_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$reviews_stream_cursor_input;

  factory CopyWith$Input$reviews_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_stream_cursor_input;

  TRes call({
    Input$reviews_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$reviews_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$reviews_stream_cursor_input<TRes>
    implements CopyWith$Input$reviews_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$reviews_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$reviews_stream_cursor_input _instance;

  final TRes Function(Input$reviews_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$reviews_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$reviews_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$reviews_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$reviews_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$reviews_stream_cursor_input<TRes>
    implements CopyWith$Input$reviews_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$reviews_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$reviews_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$reviews_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$reviews_stream_cursor_value_input.stub(_res);
}

class Input$reviews_stream_cursor_value_input {
  factory Input$reviews_stream_cursor_value_input({
    String? created_at,
    int? id,
    String? message,
    int? stars,
    int? station_id,
    String? updated_at,
    bool? verified,
  }) =>
      Input$reviews_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (id != null) r'id': id,
        if (message != null) r'message': message,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (verified != null) r'verified': verified,
      });

  Input$reviews_stream_cursor_value_input._(this._$data);

  factory Input$reviews_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = (l$created_at as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('message')) {
      final l$message = data['message'];
      result$data['message'] = (l$message as String?);
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] = (l$stars as int?);
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = (l$station_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = (l$updated_at as String?);
    }
    if (data.containsKey('verified')) {
      final l$verified = data['verified'];
      result$data['verified'] = (l$verified as bool?);
    }
    return Input$reviews_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get created_at => (_$data['created_at'] as String?);

  int? get id => (_$data['id'] as int?);

  String? get message => (_$data['message'] as String?);

  int? get stars => (_$data['stars'] as int?);

  int? get station_id => (_$data['station_id'] as int?);

  String? get updated_at => (_$data['updated_at'] as String?);

  bool? get verified => (_$data['verified'] as bool?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('message')) {
      final l$message = message;
      result$data['message'] = l$message;
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] = l$stars;
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at;
    }
    if (_$data.containsKey('verified')) {
      final l$verified = verified;
      result$data['verified'] = l$verified;
    }
    return result$data;
  }

  CopyWith$Input$reviews_stream_cursor_value_input<
          Input$reviews_stream_cursor_value_input>
      get copyWith => CopyWith$Input$reviews_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (_$data.containsKey('message') != other._$data.containsKey('message')) {
      return false;
    }
    if (l$message != lOther$message) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$verified = verified;
    final lOther$verified = other.verified;
    if (_$data.containsKey('verified') !=
        other._$data.containsKey('verified')) {
      return false;
    }
    if (l$verified != lOther$verified) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$id = id;
    final l$message = message;
    final l$stars = stars;
    final l$station_id = station_id;
    final l$updated_at = updated_at;
    final l$verified = verified;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('message') ? l$message : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('verified') ? l$verified : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$reviews_stream_cursor_value_input(
    Input$reviews_stream_cursor_value_input instance,
    TRes Function(Input$reviews_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$reviews_stream_cursor_value_input;

  factory CopyWith$Input$reviews_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_stream_cursor_value_input;

  TRes call({
    String? created_at,
    int? id,
    String? message,
    int? stars,
    int? station_id,
    String? updated_at,
    bool? verified,
  });
}

class _CopyWithImpl$Input$reviews_stream_cursor_value_input<TRes>
    implements CopyWith$Input$reviews_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$reviews_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$reviews_stream_cursor_value_input _instance;

  final TRes Function(Input$reviews_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? id = _undefined,
    Object? message = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
    Object? updated_at = _undefined,
    Object? verified = _undefined,
  }) =>
      _then(Input$reviews_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as String?),
        if (id != _undefined) 'id': (id as int?),
        if (message != _undefined) 'message': (message as String?),
        if (stars != _undefined) 'stars': (stars as int?),
        if (station_id != _undefined) 'station_id': (station_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as String?),
        if (verified != _undefined) 'verified': (verified as bool?),
      }));
}

class _CopyWithStubImpl$Input$reviews_stream_cursor_value_input<TRes>
    implements CopyWith$Input$reviews_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$reviews_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? created_at,
    int? id,
    String? message,
    int? stars,
    int? station_id,
    String? updated_at,
    bool? verified,
  }) =>
      _res;
}

class Input$reviews_sum_order_by {
  factory Input$reviews_sum_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_sum_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_sum_order_by._(this._$data);

  factory Input$reviews_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_sum_order_by<Input$reviews_sum_order_by>
      get copyWith => CopyWith$Input$reviews_sum_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_sum_order_by<TRes> {
  factory CopyWith$Input$reviews_sum_order_by(
    Input$reviews_sum_order_by instance,
    TRes Function(Input$reviews_sum_order_by) then,
  ) = _CopyWithImpl$Input$reviews_sum_order_by;

  factory CopyWith$Input$reviews_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_sum_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_sum_order_by<TRes>
    implements CopyWith$Input$reviews_sum_order_by<TRes> {
  _CopyWithImpl$Input$reviews_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_sum_order_by _instance;

  final TRes Function(Input$reviews_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_sum_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_sum_order_by<TRes>
    implements CopyWith$Input$reviews_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_var_pop_order_by {
  factory Input$reviews_var_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_var_pop_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_var_pop_order_by._(this._$data);

  factory Input$reviews_var_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_var_pop_order_by<Input$reviews_var_pop_order_by>
      get copyWith => CopyWith$Input$reviews_var_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_var_pop_order_by<TRes> {
  factory CopyWith$Input$reviews_var_pop_order_by(
    Input$reviews_var_pop_order_by instance,
    TRes Function(Input$reviews_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$reviews_var_pop_order_by;

  factory CopyWith$Input$reviews_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_var_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_var_pop_order_by<TRes>
    implements CopyWith$Input$reviews_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$reviews_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_var_pop_order_by _instance;

  final TRes Function(Input$reviews_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_var_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_var_pop_order_by<TRes>
    implements CopyWith$Input$reviews_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_var_samp_order_by {
  factory Input$reviews_var_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_var_samp_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_var_samp_order_by._(this._$data);

  factory Input$reviews_var_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_var_samp_order_by<Input$reviews_var_samp_order_by>
      get copyWith => CopyWith$Input$reviews_var_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_var_samp_order_by<TRes> {
  factory CopyWith$Input$reviews_var_samp_order_by(
    Input$reviews_var_samp_order_by instance,
    TRes Function(Input$reviews_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$reviews_var_samp_order_by;

  factory CopyWith$Input$reviews_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_var_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_var_samp_order_by<TRes>
    implements CopyWith$Input$reviews_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$reviews_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_var_samp_order_by _instance;

  final TRes Function(Input$reviews_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_var_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_var_samp_order_by<TRes>
    implements CopyWith$Input$reviews_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$reviews_variance_order_by {
  factory Input$reviews_variance_order_by({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      Input$reviews_variance_order_by._({
        if (id != null) r'id': id,
        if (stars != null) r'stars': stars,
        if (station_id != null) r'station_id': station_id,
      });

  Input$reviews_variance_order_by._(this._$data);

  factory Input$reviews_variance_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('stars')) {
      final l$stars = data['stars'];
      result$data['stars'] =
          l$stars == null ? null : fromJson$Enum$order_by((l$stars as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$reviews_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get stars => (_$data['stars'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('stars')) {
      final l$stars = stars;
      result$data['stars'] =
          l$stars == null ? null : toJson$Enum$order_by(l$stars);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$reviews_variance_order_by<Input$reviews_variance_order_by>
      get copyWith => CopyWith$Input$reviews_variance_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$reviews_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$stars = stars;
    final lOther$stars = other.stars;
    if (_$data.containsKey('stars') != other._$data.containsKey('stars')) {
      return false;
    }
    if (l$stars != lOther$stars) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$stars = stars;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('stars') ? l$stars : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$reviews_variance_order_by<TRes> {
  factory CopyWith$Input$reviews_variance_order_by(
    Input$reviews_variance_order_by instance,
    TRes Function(Input$reviews_variance_order_by) then,
  ) = _CopyWithImpl$Input$reviews_variance_order_by;

  factory CopyWith$Input$reviews_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$reviews_variance_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$reviews_variance_order_by<TRes>
    implements CopyWith$Input$reviews_variance_order_by<TRes> {
  _CopyWithImpl$Input$reviews_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$reviews_variance_order_by _instance;

  final TRes Function(Input$reviews_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? stars = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$reviews_variance_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (stars != _undefined) 'stars': (stars as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$reviews_variance_order_by<TRes>
    implements CopyWith$Input$reviews_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$reviews_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? stars,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$songs_aggregate_order_by {
  factory Input$songs_aggregate_order_by({
    Input$songs_avg_order_by? avg,
    Enum$order_by? count,
    Input$songs_max_order_by? max,
    Input$songs_min_order_by? min,
    Input$songs_stddev_order_by? stddev,
    Input$songs_stddev_pop_order_by? stddev_pop,
    Input$songs_stddev_samp_order_by? stddev_samp,
    Input$songs_sum_order_by? sum,
    Input$songs_var_pop_order_by? var_pop,
    Input$songs_var_samp_order_by? var_samp,
    Input$songs_variance_order_by? variance,
  }) =>
      Input$songs_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$songs_aggregate_order_by._(this._$data);

  factory Input$songs_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$songs_avg_order_by.fromJson((l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$songs_max_order_by.fromJson((l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$songs_min_order_by.fromJson((l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$songs_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$songs_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$songs_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$songs_sum_order_by.fromJson((l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$songs_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$songs_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$songs_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$songs_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$songs_avg_order_by? get avg =>
      (_$data['avg'] as Input$songs_avg_order_by?);

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);

  Input$songs_max_order_by? get max =>
      (_$data['max'] as Input$songs_max_order_by?);

  Input$songs_min_order_by? get min =>
      (_$data['min'] as Input$songs_min_order_by?);

  Input$songs_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$songs_stddev_order_by?);

  Input$songs_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$songs_stddev_pop_order_by?);

  Input$songs_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$songs_stddev_samp_order_by?);

  Input$songs_sum_order_by? get sum =>
      (_$data['sum'] as Input$songs_sum_order_by?);

  Input$songs_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$songs_var_pop_order_by?);

  Input$songs_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$songs_var_samp_order_by?);

  Input$songs_variance_order_by? get variance =>
      (_$data['variance'] as Input$songs_variance_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$songs_aggregate_order_by<Input$songs_aggregate_order_by>
      get copyWith => CopyWith$Input$songs_aggregate_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_aggregate_order_by<TRes> {
  factory CopyWith$Input$songs_aggregate_order_by(
    Input$songs_aggregate_order_by instance,
    TRes Function(Input$songs_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$songs_aggregate_order_by;

  factory CopyWith$Input$songs_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_aggregate_order_by;

  TRes call({
    Input$songs_avg_order_by? avg,
    Enum$order_by? count,
    Input$songs_max_order_by? max,
    Input$songs_min_order_by? min,
    Input$songs_stddev_order_by? stddev,
    Input$songs_stddev_pop_order_by? stddev_pop,
    Input$songs_stddev_samp_order_by? stddev_samp,
    Input$songs_sum_order_by? sum,
    Input$songs_var_pop_order_by? var_pop,
    Input$songs_var_samp_order_by? var_samp,
    Input$songs_variance_order_by? variance,
  });
  CopyWith$Input$songs_avg_order_by<TRes> get avg;
  CopyWith$Input$songs_max_order_by<TRes> get max;
  CopyWith$Input$songs_min_order_by<TRes> get min;
  CopyWith$Input$songs_stddev_order_by<TRes> get stddev;
  CopyWith$Input$songs_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$songs_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$songs_sum_order_by<TRes> get sum;
  CopyWith$Input$songs_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$songs_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$songs_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$songs_aggregate_order_by<TRes>
    implements CopyWith$Input$songs_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$songs_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_aggregate_order_by _instance;

  final TRes Function(Input$songs_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$songs_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$songs_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$songs_max_order_by?),
        if (min != _undefined) 'min': (min as Input$songs_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$songs_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$songs_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp': (stddev_samp as Input$songs_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$songs_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$songs_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$songs_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$songs_variance_order_by?),
      }));

  CopyWith$Input$songs_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$songs_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_avg_order_by(local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$songs_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$songs_max_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$songs_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$songs_min_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_min_order_by(local$min, (e) => call(min: e));
  }

  CopyWith$Input$songs_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$songs_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$songs_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$songs_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$songs_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$songs_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$songs_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$songs_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_sum_order_by(local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$songs_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$songs_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$songs_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$songs_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$songs_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$songs_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$songs_aggregate_order_by<TRes>
    implements CopyWith$Input$songs_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$songs_avg_order_by? avg,
    Enum$order_by? count,
    Input$songs_max_order_by? max,
    Input$songs_min_order_by? min,
    Input$songs_stddev_order_by? stddev,
    Input$songs_stddev_pop_order_by? stddev_pop,
    Input$songs_stddev_samp_order_by? stddev_samp,
    Input$songs_sum_order_by? sum,
    Input$songs_var_pop_order_by? var_pop,
    Input$songs_var_samp_order_by? var_samp,
    Input$songs_variance_order_by? variance,
  }) =>
      _res;

  CopyWith$Input$songs_avg_order_by<TRes> get avg =>
      CopyWith$Input$songs_avg_order_by.stub(_res);

  CopyWith$Input$songs_max_order_by<TRes> get max =>
      CopyWith$Input$songs_max_order_by.stub(_res);

  CopyWith$Input$songs_min_order_by<TRes> get min =>
      CopyWith$Input$songs_min_order_by.stub(_res);

  CopyWith$Input$songs_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$songs_stddev_order_by.stub(_res);

  CopyWith$Input$songs_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$songs_stddev_pop_order_by.stub(_res);

  CopyWith$Input$songs_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$songs_stddev_samp_order_by.stub(_res);

  CopyWith$Input$songs_sum_order_by<TRes> get sum =>
      CopyWith$Input$songs_sum_order_by.stub(_res);

  CopyWith$Input$songs_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$songs_var_pop_order_by.stub(_res);

  CopyWith$Input$songs_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$songs_var_samp_order_by.stub(_res);

  CopyWith$Input$songs_variance_order_by<TRes> get variance =>
      CopyWith$Input$songs_variance_order_by.stub(_res);
}

class Input$songs_avg_order_by {
  factory Input$songs_avg_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_avg_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_avg_order_by._(this._$data);

  factory Input$songs_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_avg_order_by<Input$songs_avg_order_by> get copyWith =>
      CopyWith$Input$songs_avg_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_avg_order_by<TRes> {
  factory CopyWith$Input$songs_avg_order_by(
    Input$songs_avg_order_by instance,
    TRes Function(Input$songs_avg_order_by) then,
  ) = _CopyWithImpl$Input$songs_avg_order_by;

  factory CopyWith$Input$songs_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_avg_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_avg_order_by<TRes>
    implements CopyWith$Input$songs_avg_order_by<TRes> {
  _CopyWithImpl$Input$songs_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_avg_order_by _instance;

  final TRes Function(Input$songs_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_avg_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_avg_order_by<TRes>
    implements CopyWith$Input$songs_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$songs_bool_exp {
  factory Input$songs_bool_exp({
    List<Input$songs_bool_exp>? $_and,
    Input$songs_bool_exp? $_not,
    List<Input$songs_bool_exp>? $_or,
    Input$artists_bool_exp? artist,
    Input$Int_comparison_exp? artist_id,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$stations_now_playing_bool_exp? played_songs,
    Input$String_comparison_exp? thumbnail_url,
  }) =>
      Input$songs_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (artist != null) r'artist': artist,
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (played_songs != null) r'played_songs': played_songs,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$songs_bool_exp._(this._$data);

  factory Input$songs_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$songs_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$songs_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$songs_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('artist')) {
      final l$artist = data['artist'];
      result$data['artist'] = l$artist == null
          ? null
          : Input$artists_bool_exp.fromJson((l$artist as Map<String, dynamic>));
    }
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$artist_id as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('played_songs')) {
      final l$played_songs = data['played_songs'];
      result$data['played_songs'] = l$played_songs == null
          ? null
          : Input$stations_now_playing_bool_exp.fromJson(
              (l$played_songs as Map<String, dynamic>));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$thumbnail_url as Map<String, dynamic>));
    }
    return Input$songs_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$songs_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$songs_bool_exp>?);

  Input$songs_bool_exp? get $_not => (_$data['_not'] as Input$songs_bool_exp?);

  List<Input$songs_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$songs_bool_exp>?);

  Input$artists_bool_exp? get artist =>
      (_$data['artist'] as Input$artists_bool_exp?);

  Input$Int_comparison_exp? get artist_id =>
      (_$data['artist_id'] as Input$Int_comparison_exp?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);

  Input$stations_now_playing_bool_exp? get played_songs =>
      (_$data['played_songs'] as Input$stations_now_playing_bool_exp?);

  Input$String_comparison_exp? get thumbnail_url =>
      (_$data['thumbnail_url'] as Input$String_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('artist')) {
      final l$artist = artist;
      result$data['artist'] = l$artist?.toJson();
    }
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] = l$artist_id?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('played_songs')) {
      final l$played_songs = played_songs;
      result$data['played_songs'] = l$played_songs?.toJson();
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$songs_bool_exp<Input$songs_bool_exp> get copyWith =>
      CopyWith$Input$songs_bool_exp(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$artist = artist;
    final lOther$artist = other.artist;
    if (_$data.containsKey('artist') != other._$data.containsKey('artist')) {
      return false;
    }
    if (l$artist != lOther$artist) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$played_songs = played_songs;
    final lOther$played_songs = other.played_songs;
    if (_$data.containsKey('played_songs') !=
        other._$data.containsKey('played_songs')) {
      return false;
    }
    if (l$played_songs != lOther$played_songs) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$artist = artist;
    final l$artist_id = artist_id;
    final l$id = id;
    final l$name = name;
    final l$played_songs = played_songs;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('artist') ? l$artist : const {},
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('played_songs') ? l$played_songs : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_bool_exp<TRes> {
  factory CopyWith$Input$songs_bool_exp(
    Input$songs_bool_exp instance,
    TRes Function(Input$songs_bool_exp) then,
  ) = _CopyWithImpl$Input$songs_bool_exp;

  factory CopyWith$Input$songs_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_bool_exp;

  TRes call({
    List<Input$songs_bool_exp>? $_and,
    Input$songs_bool_exp? $_not,
    List<Input$songs_bool_exp>? $_or,
    Input$artists_bool_exp? artist,
    Input$Int_comparison_exp? artist_id,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$stations_now_playing_bool_exp? played_songs,
    Input$String_comparison_exp? thumbnail_url,
  });
  TRes $_and(
      Iterable<Input$songs_bool_exp>? Function(
              Iterable<CopyWith$Input$songs_bool_exp<Input$songs_bool_exp>>?)
          _fn);
  CopyWith$Input$songs_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$songs_bool_exp>? Function(
              Iterable<CopyWith$Input$songs_bool_exp<Input$songs_bool_exp>>?)
          _fn);
  CopyWith$Input$artists_bool_exp<TRes> get artist;
  CopyWith$Input$Int_comparison_exp<TRes> get artist_id;
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$stations_now_playing_bool_exp<TRes> get played_songs;
  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url;
}

class _CopyWithImpl$Input$songs_bool_exp<TRes>
    implements CopyWith$Input$songs_bool_exp<TRes> {
  _CopyWithImpl$Input$songs_bool_exp(
    this._instance,
    this._then,
  );

  final Input$songs_bool_exp _instance;

  final TRes Function(Input$songs_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? artist = _undefined,
    Object? artist_id = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? played_songs = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$songs_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined) '_and': ($_and as List<Input$songs_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$songs_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$songs_bool_exp>?),
        if (artist != _undefined) 'artist': (artist as Input$artists_bool_exp?),
        if (artist_id != _undefined)
          'artist_id': (artist_id as Input$Int_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (played_songs != _undefined)
          'played_songs':
              (played_songs as Input$stations_now_playing_bool_exp?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Input$String_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$songs_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$songs_bool_exp<Input$songs_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$songs_bool_exp(
                e,
                (i) => i,
              )))?.toList());

  CopyWith$Input$songs_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$songs_bool_exp.stub(_then(_instance))
        : CopyWith$Input$songs_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$songs_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$songs_bool_exp<Input$songs_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$songs_bool_exp(
                e,
                (i) => i,
              )))?.toList());

  CopyWith$Input$artists_bool_exp<TRes> get artist {
    final local$artist = _instance.artist;
    return local$artist == null
        ? CopyWith$Input$artists_bool_exp.stub(_then(_instance))
        : CopyWith$Input$artists_bool_exp(local$artist, (e) => call(artist: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get artist_id {
    final local$artist_id = _instance.artist_id;
    return local$artist_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$artist_id, (e) => call(artist_id: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get played_songs {
    final local$played_songs = _instance.played_songs;
    return local$played_songs == null
        ? CopyWith$Input$stations_now_playing_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_now_playing_bool_exp(
            local$played_songs, (e) => call(played_songs: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url {
    final local$thumbnail_url = _instance.thumbnail_url;
    return local$thumbnail_url == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$thumbnail_url, (e) => call(thumbnail_url: e));
  }
}

class _CopyWithStubImpl$Input$songs_bool_exp<TRes>
    implements CopyWith$Input$songs_bool_exp<TRes> {
  _CopyWithStubImpl$Input$songs_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$songs_bool_exp>? $_and,
    Input$songs_bool_exp? $_not,
    List<Input$songs_bool_exp>? $_or,
    Input$artists_bool_exp? artist,
    Input$Int_comparison_exp? artist_id,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$stations_now_playing_bool_exp? played_songs,
    Input$String_comparison_exp? thumbnail_url,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$songs_bool_exp<TRes> get $_not =>
      CopyWith$Input$songs_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$artists_bool_exp<TRes> get artist =>
      CopyWith$Input$artists_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get artist_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get played_songs =>
      CopyWith$Input$stations_now_playing_bool_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$songs_max_order_by {
  factory Input$songs_max_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? thumbnail_url,
  }) =>
      Input$songs_max_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$songs_max_order_by._(this._$data);

  factory Input$songs_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail_url as String));
    }
    return Input$songs_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);

  Enum$order_by? get thumbnail_url =>
      (_$data['thumbnail_url'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : toJson$Enum$order_by(l$thumbnail_url);
    }
    return result$data;
  }

  CopyWith$Input$songs_max_order_by<Input$songs_max_order_by> get copyWith =>
      CopyWith$Input$songs_max_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    final l$name = name;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_max_order_by<TRes> {
  factory CopyWith$Input$songs_max_order_by(
    Input$songs_max_order_by instance,
    TRes Function(Input$songs_max_order_by) then,
  ) = _CopyWithImpl$Input$songs_max_order_by;

  factory CopyWith$Input$songs_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_max_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? thumbnail_url,
  });
}

class _CopyWithImpl$Input$songs_max_order_by<TRes>
    implements CopyWith$Input$songs_max_order_by<TRes> {
  _CopyWithImpl$Input$songs_max_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_max_order_by _instance;

  final TRes Function(Input$songs_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$songs_max_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_max_order_by<TRes>
    implements CopyWith$Input$songs_max_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? thumbnail_url,
  }) =>
      _res;
}

class Input$songs_min_order_by {
  factory Input$songs_min_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? thumbnail_url,
  }) =>
      Input$songs_min_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$songs_min_order_by._(this._$data);

  factory Input$songs_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail_url as String));
    }
    return Input$songs_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);

  Enum$order_by? get thumbnail_url =>
      (_$data['thumbnail_url'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : toJson$Enum$order_by(l$thumbnail_url);
    }
    return result$data;
  }

  CopyWith$Input$songs_min_order_by<Input$songs_min_order_by> get copyWith =>
      CopyWith$Input$songs_min_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    final l$name = name;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_min_order_by<TRes> {
  factory CopyWith$Input$songs_min_order_by(
    Input$songs_min_order_by instance,
    TRes Function(Input$songs_min_order_by) then,
  ) = _CopyWithImpl$Input$songs_min_order_by;

  factory CopyWith$Input$songs_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_min_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? thumbnail_url,
  });
}

class _CopyWithImpl$Input$songs_min_order_by<TRes>
    implements CopyWith$Input$songs_min_order_by<TRes> {
  _CopyWithImpl$Input$songs_min_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_min_order_by _instance;

  final TRes Function(Input$songs_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$songs_min_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_min_order_by<TRes>
    implements CopyWith$Input$songs_min_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? thumbnail_url,
  }) =>
      _res;
}

class Input$songs_order_by {
  factory Input$songs_order_by({
    Input$artists_order_by? artist,
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Input$stations_now_playing_aggregate_order_by? played_songs_aggregate,
    Enum$order_by? thumbnail_url,
  }) =>
      Input$songs_order_by._({
        if (artist != null) r'artist': artist,
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (played_songs_aggregate != null)
          r'played_songs_aggregate': played_songs_aggregate,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$songs_order_by._(this._$data);

  factory Input$songs_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist')) {
      final l$artist = data['artist'];
      result$data['artist'] = l$artist == null
          ? null
          : Input$artists_order_by.fromJson((l$artist as Map<String, dynamic>));
    }
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('played_songs_aggregate')) {
      final l$played_songs_aggregate = data['played_songs_aggregate'];
      result$data['played_songs_aggregate'] = l$played_songs_aggregate == null
          ? null
          : Input$stations_now_playing_aggregate_order_by.fromJson(
              (l$played_songs_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail_url as String));
    }
    return Input$songs_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$artists_order_by? get artist =>
      (_$data['artist'] as Input$artists_order_by?);

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);

  Input$stations_now_playing_aggregate_order_by? get played_songs_aggregate =>
      (_$data['played_songs_aggregate']
          as Input$stations_now_playing_aggregate_order_by?);

  Enum$order_by? get thumbnail_url =>
      (_$data['thumbnail_url'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist')) {
      final l$artist = artist;
      result$data['artist'] = l$artist?.toJson();
    }
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('played_songs_aggregate')) {
      final l$played_songs_aggregate = played_songs_aggregate;
      result$data['played_songs_aggregate'] =
          l$played_songs_aggregate?.toJson();
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : toJson$Enum$order_by(l$thumbnail_url);
    }
    return result$data;
  }

  CopyWith$Input$songs_order_by<Input$songs_order_by> get copyWith =>
      CopyWith$Input$songs_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist = artist;
    final lOther$artist = other.artist;
    if (_$data.containsKey('artist') != other._$data.containsKey('artist')) {
      return false;
    }
    if (l$artist != lOther$artist) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$played_songs_aggregate = played_songs_aggregate;
    final lOther$played_songs_aggregate = other.played_songs_aggregate;
    if (_$data.containsKey('played_songs_aggregate') !=
        other._$data.containsKey('played_songs_aggregate')) {
      return false;
    }
    if (l$played_songs_aggregate != lOther$played_songs_aggregate) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist = artist;
    final l$artist_id = artist_id;
    final l$id = id;
    final l$name = name;
    final l$played_songs_aggregate = played_songs_aggregate;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('artist') ? l$artist : const {},
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('played_songs_aggregate')
          ? l$played_songs_aggregate
          : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_order_by<TRes> {
  factory CopyWith$Input$songs_order_by(
    Input$songs_order_by instance,
    TRes Function(Input$songs_order_by) then,
  ) = _CopyWithImpl$Input$songs_order_by;

  factory CopyWith$Input$songs_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_order_by;

  TRes call({
    Input$artists_order_by? artist,
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Input$stations_now_playing_aggregate_order_by? played_songs_aggregate,
    Enum$order_by? thumbnail_url,
  });
  CopyWith$Input$artists_order_by<TRes> get artist;
  CopyWith$Input$stations_now_playing_aggregate_order_by<TRes>
      get played_songs_aggregate;
}

class _CopyWithImpl$Input$songs_order_by<TRes>
    implements CopyWith$Input$songs_order_by<TRes> {
  _CopyWithImpl$Input$songs_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_order_by _instance;

  final TRes Function(Input$songs_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist = _undefined,
    Object? artist_id = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? played_songs_aggregate = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$songs_order_by._({
        ..._instance._$data,
        if (artist != _undefined) 'artist': (artist as Input$artists_order_by?),
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (played_songs_aggregate != _undefined)
          'played_songs_aggregate': (played_songs_aggregate
              as Input$stations_now_playing_aggregate_order_by?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Enum$order_by?),
      }));

  CopyWith$Input$artists_order_by<TRes> get artist {
    final local$artist = _instance.artist;
    return local$artist == null
        ? CopyWith$Input$artists_order_by.stub(_then(_instance))
        : CopyWith$Input$artists_order_by(local$artist, (e) => call(artist: e));
  }

  CopyWith$Input$stations_now_playing_aggregate_order_by<TRes>
      get played_songs_aggregate {
    final local$played_songs_aggregate = _instance.played_songs_aggregate;
    return local$played_songs_aggregate == null
        ? CopyWith$Input$stations_now_playing_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_aggregate_order_by(
            local$played_songs_aggregate,
            (e) => call(played_songs_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$songs_order_by<TRes>
    implements CopyWith$Input$songs_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_order_by(this._res);

  TRes _res;

  call({
    Input$artists_order_by? artist,
    Enum$order_by? artist_id,
    Enum$order_by? id,
    Enum$order_by? name,
    Input$stations_now_playing_aggregate_order_by? played_songs_aggregate,
    Enum$order_by? thumbnail_url,
  }) =>
      _res;

  CopyWith$Input$artists_order_by<TRes> get artist =>
      CopyWith$Input$artists_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_aggregate_order_by<TRes>
      get played_songs_aggregate =>
          CopyWith$Input$stations_now_playing_aggregate_order_by.stub(_res);
}

class Input$songs_stddev_order_by {
  factory Input$songs_stddev_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_stddev_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_stddev_order_by._(this._$data);

  factory Input$songs_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_stddev_order_by<Input$songs_stddev_order_by>
      get copyWith => CopyWith$Input$songs_stddev_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_stddev_order_by<TRes> {
  factory CopyWith$Input$songs_stddev_order_by(
    Input$songs_stddev_order_by instance,
    TRes Function(Input$songs_stddev_order_by) then,
  ) = _CopyWithImpl$Input$songs_stddev_order_by;

  factory CopyWith$Input$songs_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_stddev_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_stddev_order_by<TRes>
    implements CopyWith$Input$songs_stddev_order_by<TRes> {
  _CopyWithImpl$Input$songs_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_stddev_order_by _instance;

  final TRes Function(Input$songs_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_stddev_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_stddev_order_by<TRes>
    implements CopyWith$Input$songs_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$songs_stddev_pop_order_by {
  factory Input$songs_stddev_pop_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_stddev_pop_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_stddev_pop_order_by._(this._$data);

  factory Input$songs_stddev_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_stddev_pop_order_by<Input$songs_stddev_pop_order_by>
      get copyWith => CopyWith$Input$songs_stddev_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$songs_stddev_pop_order_by(
    Input$songs_stddev_pop_order_by instance,
    TRes Function(Input$songs_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$songs_stddev_pop_order_by;

  factory CopyWith$Input$songs_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_stddev_pop_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_stddev_pop_order_by<TRes>
    implements CopyWith$Input$songs_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$songs_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_stddev_pop_order_by _instance;

  final TRes Function(Input$songs_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_stddev_pop_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_stddev_pop_order_by<TRes>
    implements CopyWith$Input$songs_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$songs_stddev_samp_order_by {
  factory Input$songs_stddev_samp_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_stddev_samp_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_stddev_samp_order_by._(this._$data);

  factory Input$songs_stddev_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_stddev_samp_order_by<Input$songs_stddev_samp_order_by>
      get copyWith => CopyWith$Input$songs_stddev_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$songs_stddev_samp_order_by(
    Input$songs_stddev_samp_order_by instance,
    TRes Function(Input$songs_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$songs_stddev_samp_order_by;

  factory CopyWith$Input$songs_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_stddev_samp_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_stddev_samp_order_by<TRes>
    implements CopyWith$Input$songs_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$songs_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_stddev_samp_order_by _instance;

  final TRes Function(Input$songs_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_stddev_samp_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_stddev_samp_order_by<TRes>
    implements CopyWith$Input$songs_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$songs_stream_cursor_input {
  factory Input$songs_stream_cursor_input({
    required Input$songs_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$songs_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$songs_stream_cursor_input._(this._$data);

  factory Input$songs_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$songs_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$songs_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$songs_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$songs_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$songs_stream_cursor_input<Input$songs_stream_cursor_input>
      get copyWith => CopyWith$Input$songs_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_stream_cursor_input<TRes> {
  factory CopyWith$Input$songs_stream_cursor_input(
    Input$songs_stream_cursor_input instance,
    TRes Function(Input$songs_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$songs_stream_cursor_input;

  factory CopyWith$Input$songs_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_stream_cursor_input;

  TRes call({
    Input$songs_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$songs_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$songs_stream_cursor_input<TRes>
    implements CopyWith$Input$songs_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$songs_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$songs_stream_cursor_input _instance;

  final TRes Function(Input$songs_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$songs_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$songs_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$songs_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$songs_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$songs_stream_cursor_input<TRes>
    implements CopyWith$Input$songs_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$songs_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$songs_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$songs_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$songs_stream_cursor_value_input.stub(_res);
}

class Input$songs_stream_cursor_value_input {
  factory Input$songs_stream_cursor_value_input({
    int? artist_id,
    int? id,
    String? name,
    String? thumbnail_url,
  }) =>
      Input$songs_stream_cursor_value_input._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
      });

  Input$songs_stream_cursor_value_input._(this._$data);

  factory Input$songs_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = (l$artist_id as int?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = (l$thumbnail_url as String?);
    }
    return Input$songs_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get artist_id => (_$data['artist_id'] as int?);

  int? get id => (_$data['id'] as int?);

  String? get name => (_$data['name'] as String?);

  String? get thumbnail_url => (_$data['thumbnail_url'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] = l$artist_id;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url;
    }
    return result$data;
  }

  CopyWith$Input$songs_stream_cursor_value_input<
          Input$songs_stream_cursor_value_input>
      get copyWith => CopyWith$Input$songs_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    final l$name = name;
    final l$thumbnail_url = thumbnail_url;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$songs_stream_cursor_value_input(
    Input$songs_stream_cursor_value_input instance,
    TRes Function(Input$songs_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$songs_stream_cursor_value_input;

  factory CopyWith$Input$songs_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_stream_cursor_value_input;

  TRes call({
    int? artist_id,
    int? id,
    String? name,
    String? thumbnail_url,
  });
}

class _CopyWithImpl$Input$songs_stream_cursor_value_input<TRes>
    implements CopyWith$Input$songs_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$songs_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$songs_stream_cursor_value_input _instance;

  final TRes Function(Input$songs_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? thumbnail_url = _undefined,
  }) =>
      _then(Input$songs_stream_cursor_value_input._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as int?),
        if (id != _undefined) 'id': (id as int?),
        if (name != _undefined) 'name': (name as String?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as String?),
      }));
}

class _CopyWithStubImpl$Input$songs_stream_cursor_value_input<TRes>
    implements CopyWith$Input$songs_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$songs_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    int? artist_id,
    int? id,
    String? name,
    String? thumbnail_url,
  }) =>
      _res;
}

class Input$songs_sum_order_by {
  factory Input$songs_sum_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_sum_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_sum_order_by._(this._$data);

  factory Input$songs_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_sum_order_by<Input$songs_sum_order_by> get copyWith =>
      CopyWith$Input$songs_sum_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_sum_order_by<TRes> {
  factory CopyWith$Input$songs_sum_order_by(
    Input$songs_sum_order_by instance,
    TRes Function(Input$songs_sum_order_by) then,
  ) = _CopyWithImpl$Input$songs_sum_order_by;

  factory CopyWith$Input$songs_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_sum_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_sum_order_by<TRes>
    implements CopyWith$Input$songs_sum_order_by<TRes> {
  _CopyWithImpl$Input$songs_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_sum_order_by _instance;

  final TRes Function(Input$songs_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_sum_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_sum_order_by<TRes>
    implements CopyWith$Input$songs_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$songs_var_pop_order_by {
  factory Input$songs_var_pop_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_var_pop_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_var_pop_order_by._(this._$data);

  factory Input$songs_var_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_var_pop_order_by<Input$songs_var_pop_order_by>
      get copyWith => CopyWith$Input$songs_var_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_var_pop_order_by<TRes> {
  factory CopyWith$Input$songs_var_pop_order_by(
    Input$songs_var_pop_order_by instance,
    TRes Function(Input$songs_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$songs_var_pop_order_by;

  factory CopyWith$Input$songs_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_var_pop_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_var_pop_order_by<TRes>
    implements CopyWith$Input$songs_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$songs_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_var_pop_order_by _instance;

  final TRes Function(Input$songs_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_var_pop_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_var_pop_order_by<TRes>
    implements CopyWith$Input$songs_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$songs_var_samp_order_by {
  factory Input$songs_var_samp_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_var_samp_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_var_samp_order_by._(this._$data);

  factory Input$songs_var_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_var_samp_order_by<Input$songs_var_samp_order_by>
      get copyWith => CopyWith$Input$songs_var_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_var_samp_order_by<TRes> {
  factory CopyWith$Input$songs_var_samp_order_by(
    Input$songs_var_samp_order_by instance,
    TRes Function(Input$songs_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$songs_var_samp_order_by;

  factory CopyWith$Input$songs_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_var_samp_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_var_samp_order_by<TRes>
    implements CopyWith$Input$songs_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$songs_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_var_samp_order_by _instance;

  final TRes Function(Input$songs_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_var_samp_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_var_samp_order_by<TRes>
    implements CopyWith$Input$songs_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$songs_variance_order_by {
  factory Input$songs_variance_order_by({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      Input$songs_variance_order_by._({
        if (artist_id != null) r'artist_id': artist_id,
        if (id != null) r'id': id,
      });

  Input$songs_variance_order_by._(this._$data);

  factory Input$songs_variance_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('artist_id')) {
      final l$artist_id = data['artist_id'];
      result$data['artist_id'] = l$artist_id == null
          ? null
          : fromJson$Enum$order_by((l$artist_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    return Input$songs_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get artist_id => (_$data['artist_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('artist_id')) {
      final l$artist_id = artist_id;
      result$data['artist_id'] =
          l$artist_id == null ? null : toJson$Enum$order_by(l$artist_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    return result$data;
  }

  CopyWith$Input$songs_variance_order_by<Input$songs_variance_order_by>
      get copyWith => CopyWith$Input$songs_variance_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$songs_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$artist_id = artist_id;
    final lOther$artist_id = other.artist_id;
    if (_$data.containsKey('artist_id') !=
        other._$data.containsKey('artist_id')) {
      return false;
    }
    if (l$artist_id != lOther$artist_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$artist_id = artist_id;
    final l$id = id;
    return Object.hashAll([
      _$data.containsKey('artist_id') ? l$artist_id : const {},
      _$data.containsKey('id') ? l$id : const {},
    ]);
  }
}

abstract class CopyWith$Input$songs_variance_order_by<TRes> {
  factory CopyWith$Input$songs_variance_order_by(
    Input$songs_variance_order_by instance,
    TRes Function(Input$songs_variance_order_by) then,
  ) = _CopyWithImpl$Input$songs_variance_order_by;

  factory CopyWith$Input$songs_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$songs_variance_order_by;

  TRes call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  });
}

class _CopyWithImpl$Input$songs_variance_order_by<TRes>
    implements CopyWith$Input$songs_variance_order_by<TRes> {
  _CopyWithImpl$Input$songs_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$songs_variance_order_by _instance;

  final TRes Function(Input$songs_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? artist_id = _undefined,
    Object? id = _undefined,
  }) =>
      _then(Input$songs_variance_order_by._({
        ..._instance._$data,
        if (artist_id != _undefined) 'artist_id': (artist_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$songs_variance_order_by<TRes>
    implements CopyWith$Input$songs_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$songs_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? artist_id,
    Enum$order_by? id,
  }) =>
      _res;
}

class Input$station_groups_bool_exp {
  factory Input$station_groups_bool_exp({
    List<Input$station_groups_bool_exp>? $_and,
    Input$station_groups_bool_exp? $_not,
    List<Input$station_groups_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$Int_comparison_exp? order,
    Input$String_comparison_exp? slug,
    Input$station_to_station_group_bool_exp? station_to_station_groups,
  }) =>
      Input$station_groups_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (order != null) r'order': order,
        if (slug != null) r'slug': slug,
        if (station_to_station_groups != null)
          r'station_to_station_groups': station_to_station_groups,
      });

  Input$station_groups_bool_exp._(this._$data);

  factory Input$station_groups_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$station_groups_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$station_groups_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$station_groups_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = l$order == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$order as Map<String, dynamic>));
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] = l$slug == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$slug as Map<String, dynamic>));
    }
    if (data.containsKey('station_to_station_groups')) {
      final l$station_to_station_groups = data['station_to_station_groups'];
      result$data['station_to_station_groups'] =
          l$station_to_station_groups == null
              ? null
              : Input$station_to_station_group_bool_exp.fromJson(
                  (l$station_to_station_groups as Map<String, dynamic>));
    }
    return Input$station_groups_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$station_groups_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$station_groups_bool_exp>?);

  Input$station_groups_bool_exp? get $_not =>
      (_$data['_not'] as Input$station_groups_bool_exp?);

  List<Input$station_groups_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$station_groups_bool_exp>?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);

  Input$Int_comparison_exp? get order =>
      (_$data['order'] as Input$Int_comparison_exp?);

  Input$String_comparison_exp? get slug =>
      (_$data['slug'] as Input$String_comparison_exp?);

  Input$station_to_station_group_bool_exp? get station_to_station_groups =>
      (_$data['station_to_station_groups']
          as Input$station_to_station_group_bool_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order?.toJson();
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] = l$slug?.toJson();
    }
    if (_$data.containsKey('station_to_station_groups')) {
      final l$station_to_station_groups = station_to_station_groups;
      result$data['station_to_station_groups'] =
          l$station_to_station_groups?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$station_groups_bool_exp<Input$station_groups_bool_exp>
      get copyWith => CopyWith$Input$station_groups_bool_exp(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_groups_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    final l$station_to_station_groups = station_to_station_groups;
    final lOther$station_to_station_groups = other.station_to_station_groups;
    if (_$data.containsKey('station_to_station_groups') !=
        other._$data.containsKey('station_to_station_groups')) {
      return false;
    }
    if (l$station_to_station_groups != lOther$station_to_station_groups) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$id = id;
    final l$name = name;
    final l$order = order;
    final l$slug = slug;
    final l$station_to_station_groups = station_to_station_groups;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('slug') ? l$slug : const {},
      _$data.containsKey('station_to_station_groups')
          ? l$station_to_station_groups
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_groups_bool_exp<TRes> {
  factory CopyWith$Input$station_groups_bool_exp(
    Input$station_groups_bool_exp instance,
    TRes Function(Input$station_groups_bool_exp) then,
  ) = _CopyWithImpl$Input$station_groups_bool_exp;

  factory CopyWith$Input$station_groups_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$station_groups_bool_exp;

  TRes call({
    List<Input$station_groups_bool_exp>? $_and,
    Input$station_groups_bool_exp? $_not,
    List<Input$station_groups_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$Int_comparison_exp? order,
    Input$String_comparison_exp? slug,
    Input$station_to_station_group_bool_exp? station_to_station_groups,
  });
  TRes $_and(
      Iterable<Input$station_groups_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$station_groups_bool_exp<
                      Input$station_groups_bool_exp>>?)
          _fn);
  CopyWith$Input$station_groups_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$station_groups_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$station_groups_bool_exp<
                      Input$station_groups_bool_exp>>?)
          _fn);
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$Int_comparison_exp<TRes> get order;
  CopyWith$Input$String_comparison_exp<TRes> get slug;
  CopyWith$Input$station_to_station_group_bool_exp<TRes>
      get station_to_station_groups;
}

class _CopyWithImpl$Input$station_groups_bool_exp<TRes>
    implements CopyWith$Input$station_groups_bool_exp<TRes> {
  _CopyWithImpl$Input$station_groups_bool_exp(
    this._instance,
    this._then,
  );

  final Input$station_groups_bool_exp _instance;

  final TRes Function(Input$station_groups_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? id = _undefined,
    Object? name = _undefined,
    Object? order = _undefined,
    Object? slug = _undefined,
    Object? station_to_station_groups = _undefined,
  }) =>
      _then(Input$station_groups_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$station_groups_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$station_groups_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$station_groups_bool_exp>?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (order != _undefined) 'order': (order as Input$Int_comparison_exp?),
        if (slug != _undefined) 'slug': (slug as Input$String_comparison_exp?),
        if (station_to_station_groups != _undefined)
          'station_to_station_groups': (station_to_station_groups
              as Input$station_to_station_group_bool_exp?),
      }));

  TRes $_and(
          Iterable<Input$station_groups_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$station_groups_bool_exp<
                          Input$station_groups_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$station_groups_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$station_groups_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$station_groups_bool_exp.stub(_then(_instance))
        : CopyWith$Input$station_groups_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$station_groups_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$station_groups_bool_exp<
                          Input$station_groups_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(
              _instance.$_or?.map((e) => CopyWith$Input$station_groups_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get order {
    final local$order = _instance.order;
    return local$order == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$order, (e) => call(order: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get slug {
    final local$slug = _instance.slug;
    return local$slug == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$slug, (e) => call(slug: e));
  }

  CopyWith$Input$station_to_station_group_bool_exp<TRes>
      get station_to_station_groups {
    final local$station_to_station_groups = _instance.station_to_station_groups;
    return local$station_to_station_groups == null
        ? CopyWith$Input$station_to_station_group_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_bool_exp(
            local$station_to_station_groups,
            (e) => call(station_to_station_groups: e));
  }
}

class _CopyWithStubImpl$Input$station_groups_bool_exp<TRes>
    implements CopyWith$Input$station_groups_bool_exp<TRes> {
  _CopyWithStubImpl$Input$station_groups_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$station_groups_bool_exp>? $_and,
    Input$station_groups_bool_exp? $_not,
    List<Input$station_groups_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$String_comparison_exp? name,
    Input$Int_comparison_exp? order,
    Input$String_comparison_exp? slug,
    Input$station_to_station_group_bool_exp? station_to_station_groups,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$station_groups_bool_exp<TRes> get $_not =>
      CopyWith$Input$station_groups_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get order =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get slug =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$station_to_station_group_bool_exp<TRes>
      get station_to_station_groups =>
          CopyWith$Input$station_to_station_group_bool_exp.stub(_res);
}

class Input$station_groups_order_by {
  factory Input$station_groups_order_by({
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? order,
    Enum$order_by? slug,
    Input$station_to_station_group_aggregate_order_by?
        station_to_station_groups_aggregate,
  }) =>
      Input$station_groups_order_by._({
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (order != null) r'order': order,
        if (slug != null) r'slug': slug,
        if (station_to_station_groups_aggregate != null)
          r'station_to_station_groups_aggregate':
              station_to_station_groups_aggregate,
      });

  Input$station_groups_order_by._(this._$data);

  factory Input$station_groups_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] =
          l$slug == null ? null : fromJson$Enum$order_by((l$slug as String));
    }
    if (data.containsKey('station_to_station_groups_aggregate')) {
      final l$station_to_station_groups_aggregate =
          data['station_to_station_groups_aggregate'];
      result$data['station_to_station_groups_aggregate'] =
          l$station_to_station_groups_aggregate == null
              ? null
              : Input$station_to_station_group_aggregate_order_by.fromJson(
                  (l$station_to_station_groups_aggregate
                      as Map<String, dynamic>));
    }
    return Input$station_groups_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get slug => (_$data['slug'] as Enum$order_by?);

  Input$station_to_station_group_aggregate_order_by?
      get station_to_station_groups_aggregate =>
          (_$data['station_to_station_groups_aggregate']
              as Input$station_to_station_group_aggregate_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] =
          l$slug == null ? null : toJson$Enum$order_by(l$slug);
    }
    if (_$data.containsKey('station_to_station_groups_aggregate')) {
      final l$station_to_station_groups_aggregate =
          station_to_station_groups_aggregate;
      result$data['station_to_station_groups_aggregate'] =
          l$station_to_station_groups_aggregate?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$station_groups_order_by<Input$station_groups_order_by>
      get copyWith => CopyWith$Input$station_groups_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_groups_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    final l$station_to_station_groups_aggregate =
        station_to_station_groups_aggregate;
    final lOther$station_to_station_groups_aggregate =
        other.station_to_station_groups_aggregate;
    if (_$data.containsKey('station_to_station_groups_aggregate') !=
        other._$data.containsKey('station_to_station_groups_aggregate')) {
      return false;
    }
    if (l$station_to_station_groups_aggregate !=
        lOther$station_to_station_groups_aggregate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$order = order;
    final l$slug = slug;
    final l$station_to_station_groups_aggregate =
        station_to_station_groups_aggregate;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('slug') ? l$slug : const {},
      _$data.containsKey('station_to_station_groups_aggregate')
          ? l$station_to_station_groups_aggregate
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_groups_order_by<TRes> {
  factory CopyWith$Input$station_groups_order_by(
    Input$station_groups_order_by instance,
    TRes Function(Input$station_groups_order_by) then,
  ) = _CopyWithImpl$Input$station_groups_order_by;

  factory CopyWith$Input$station_groups_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$station_groups_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? order,
    Enum$order_by? slug,
    Input$station_to_station_group_aggregate_order_by?
        station_to_station_groups_aggregate,
  });
  CopyWith$Input$station_to_station_group_aggregate_order_by<TRes>
      get station_to_station_groups_aggregate;
}

class _CopyWithImpl$Input$station_groups_order_by<TRes>
    implements CopyWith$Input$station_groups_order_by<TRes> {
  _CopyWithImpl$Input$station_groups_order_by(
    this._instance,
    this._then,
  );

  final Input$station_groups_order_by _instance;

  final TRes Function(Input$station_groups_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? order = _undefined,
    Object? slug = _undefined,
    Object? station_to_station_groups_aggregate = _undefined,
  }) =>
      _then(Input$station_groups_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (slug != _undefined) 'slug': (slug as Enum$order_by?),
        if (station_to_station_groups_aggregate != _undefined)
          'station_to_station_groups_aggregate':
              (station_to_station_groups_aggregate
                  as Input$station_to_station_group_aggregate_order_by?),
      }));

  CopyWith$Input$station_to_station_group_aggregate_order_by<TRes>
      get station_to_station_groups_aggregate {
    final local$station_to_station_groups_aggregate =
        _instance.station_to_station_groups_aggregate;
    return local$station_to_station_groups_aggregate == null
        ? CopyWith$Input$station_to_station_group_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_aggregate_order_by(
            local$station_to_station_groups_aggregate,
            (e) => call(station_to_station_groups_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$station_groups_order_by<TRes>
    implements CopyWith$Input$station_groups_order_by<TRes> {
  _CopyWithStubImpl$Input$station_groups_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? name,
    Enum$order_by? order,
    Enum$order_by? slug,
    Input$station_to_station_group_aggregate_order_by?
        station_to_station_groups_aggregate,
  }) =>
      _res;

  CopyWith$Input$station_to_station_group_aggregate_order_by<TRes>
      get station_to_station_groups_aggregate =>
          CopyWith$Input$station_to_station_group_aggregate_order_by.stub(_res);
}

class Input$station_groups_stream_cursor_input {
  factory Input$station_groups_stream_cursor_input({
    required Input$station_groups_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$station_groups_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$station_groups_stream_cursor_input._(this._$data);

  factory Input$station_groups_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$station_groups_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$station_groups_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$station_groups_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$station_groups_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$station_groups_stream_cursor_input<
          Input$station_groups_stream_cursor_input>
      get copyWith => CopyWith$Input$station_groups_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_groups_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_groups_stream_cursor_input<TRes> {
  factory CopyWith$Input$station_groups_stream_cursor_input(
    Input$station_groups_stream_cursor_input instance,
    TRes Function(Input$station_groups_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$station_groups_stream_cursor_input;

  factory CopyWith$Input$station_groups_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$station_groups_stream_cursor_input;

  TRes call({
    Input$station_groups_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$station_groups_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$station_groups_stream_cursor_input<TRes>
    implements CopyWith$Input$station_groups_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$station_groups_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$station_groups_stream_cursor_input _instance;

  final TRes Function(Input$station_groups_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$station_groups_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$station_groups_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$station_groups_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$station_groups_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$station_groups_stream_cursor_input<TRes>
    implements CopyWith$Input$station_groups_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$station_groups_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$station_groups_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$station_groups_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$station_groups_stream_cursor_value_input.stub(_res);
}

class Input$station_groups_stream_cursor_value_input {
  factory Input$station_groups_stream_cursor_value_input({
    int? id,
    String? name,
    int? order,
    String? slug,
  }) =>
      Input$station_groups_stream_cursor_value_input._({
        if (id != null) r'id': id,
        if (name != null) r'name': name,
        if (order != null) r'order': order,
        if (slug != null) r'slug': slug,
      });

  Input$station_groups_stream_cursor_value_input._(this._$data);

  factory Input$station_groups_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] = (l$slug as String?);
    }
    return Input$station_groups_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get id => (_$data['id'] as int?);

  String? get name => (_$data['name'] as String?);

  int? get order => (_$data['order'] as int?);

  String? get slug => (_$data['slug'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] = l$slug;
    }
    return result$data;
  }

  CopyWith$Input$station_groups_stream_cursor_value_input<
          Input$station_groups_stream_cursor_value_input>
      get copyWith => CopyWith$Input$station_groups_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_groups_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$order = order;
    final l$slug = slug;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('slug') ? l$slug : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_groups_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$station_groups_stream_cursor_value_input(
    Input$station_groups_stream_cursor_value_input instance,
    TRes Function(Input$station_groups_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$station_groups_stream_cursor_value_input;

  factory CopyWith$Input$station_groups_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_groups_stream_cursor_value_input;

  TRes call({
    int? id,
    String? name,
    int? order,
    String? slug,
  });
}

class _CopyWithImpl$Input$station_groups_stream_cursor_value_input<TRes>
    implements CopyWith$Input$station_groups_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$station_groups_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$station_groups_stream_cursor_value_input _instance;

  final TRes Function(Input$station_groups_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? order = _undefined,
    Object? slug = _undefined,
  }) =>
      _then(Input$station_groups_stream_cursor_value_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as int?),
        if (name != _undefined) 'name': (name as String?),
        if (order != _undefined) 'order': (order as int?),
        if (slug != _undefined) 'slug': (slug as String?),
      }));
}

class _CopyWithStubImpl$Input$station_groups_stream_cursor_value_input<TRes>
    implements CopyWith$Input$station_groups_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$station_groups_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    int? order,
    String? slug,
  }) =>
      _res;
}

class Input$station_to_station_group_aggregate_order_by {
  factory Input$station_to_station_group_aggregate_order_by({
    Input$station_to_station_group_avg_order_by? avg,
    Enum$order_by? count,
    Input$station_to_station_group_max_order_by? max,
    Input$station_to_station_group_min_order_by? min,
    Input$station_to_station_group_stddev_order_by? stddev,
    Input$station_to_station_group_stddev_pop_order_by? stddev_pop,
    Input$station_to_station_group_stddev_samp_order_by? stddev_samp,
    Input$station_to_station_group_sum_order_by? sum,
    Input$station_to_station_group_var_pop_order_by? var_pop,
    Input$station_to_station_group_var_samp_order_by? var_samp,
    Input$station_to_station_group_variance_order_by? variance,
  }) =>
      Input$station_to_station_group_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$station_to_station_group_aggregate_order_by._(this._$data);

  factory Input$station_to_station_group_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$station_to_station_group_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$station_to_station_group_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$station_to_station_group_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$station_to_station_group_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$station_to_station_group_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$station_to_station_group_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$station_to_station_group_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$station_to_station_group_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$station_to_station_group_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$station_to_station_group_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$station_to_station_group_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$station_to_station_group_avg_order_by? get avg =>
      (_$data['avg'] as Input$station_to_station_group_avg_order_by?);

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);

  Input$station_to_station_group_max_order_by? get max =>
      (_$data['max'] as Input$station_to_station_group_max_order_by?);

  Input$station_to_station_group_min_order_by? get min =>
      (_$data['min'] as Input$station_to_station_group_min_order_by?);

  Input$station_to_station_group_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$station_to_station_group_stddev_order_by?);

  Input$station_to_station_group_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop']
          as Input$station_to_station_group_stddev_pop_order_by?);

  Input$station_to_station_group_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp']
          as Input$station_to_station_group_stddev_samp_order_by?);

  Input$station_to_station_group_sum_order_by? get sum =>
      (_$data['sum'] as Input$station_to_station_group_sum_order_by?);

  Input$station_to_station_group_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$station_to_station_group_var_pop_order_by?);

  Input$station_to_station_group_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$station_to_station_group_var_samp_order_by?);

  Input$station_to_station_group_variance_order_by? get variance =>
      (_$data['variance'] as Input$station_to_station_group_variance_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_aggregate_order_by<
          Input$station_to_station_group_aggregate_order_by>
      get copyWith =>
          CopyWith$Input$station_to_station_group_aggregate_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_aggregate_order_by<
    TRes> {
  factory CopyWith$Input$station_to_station_group_aggregate_order_by(
    Input$station_to_station_group_aggregate_order_by instance,
    TRes Function(Input$station_to_station_group_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_aggregate_order_by;

  factory CopyWith$Input$station_to_station_group_aggregate_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_aggregate_order_by;

  TRes call({
    Input$station_to_station_group_avg_order_by? avg,
    Enum$order_by? count,
    Input$station_to_station_group_max_order_by? max,
    Input$station_to_station_group_min_order_by? min,
    Input$station_to_station_group_stddev_order_by? stddev,
    Input$station_to_station_group_stddev_pop_order_by? stddev_pop,
    Input$station_to_station_group_stddev_samp_order_by? stddev_samp,
    Input$station_to_station_group_sum_order_by? sum,
    Input$station_to_station_group_var_pop_order_by? var_pop,
    Input$station_to_station_group_var_samp_order_by? var_samp,
    Input$station_to_station_group_variance_order_by? variance,
  });
  CopyWith$Input$station_to_station_group_avg_order_by<TRes> get avg;
  CopyWith$Input$station_to_station_group_max_order_by<TRes> get max;
  CopyWith$Input$station_to_station_group_min_order_by<TRes> get min;
  CopyWith$Input$station_to_station_group_stddev_order_by<TRes> get stddev;
  CopyWith$Input$station_to_station_group_stddev_pop_order_by<TRes>
      get stddev_pop;
  CopyWith$Input$station_to_station_group_stddev_samp_order_by<TRes>
      get stddev_samp;
  CopyWith$Input$station_to_station_group_sum_order_by<TRes> get sum;
  CopyWith$Input$station_to_station_group_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$station_to_station_group_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$station_to_station_group_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$station_to_station_group_aggregate_order_by<TRes>
    implements
        CopyWith$Input$station_to_station_group_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_aggregate_order_by _instance;

  final TRes Function(Input$station_to_station_group_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$station_to_station_group_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined)
          'avg': (avg as Input$station_to_station_group_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$station_to_station_group_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$station_to_station_group_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$station_to_station_group_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop
              as Input$station_to_station_group_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp': (stddev_samp
              as Input$station_to_station_group_stddev_samp_order_by?),
        if (sum != _undefined)
          'sum': (sum as Input$station_to_station_group_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop':
              (var_pop as Input$station_to_station_group_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp':
              (var_samp as Input$station_to_station_group_var_samp_order_by?),
        if (variance != _undefined)
          'variance':
              (variance as Input$station_to_station_group_variance_order_by?),
      }));

  CopyWith$Input$station_to_station_group_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$station_to_station_group_avg_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_avg_order_by(
            local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$station_to_station_group_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$station_to_station_group_max_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$station_to_station_group_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$station_to_station_group_min_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_min_order_by(
            local$min, (e) => call(min: e));
  }

  CopyWith$Input$station_to_station_group_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$station_to_station_group_stddev_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$station_to_station_group_stddev_pop_order_by<TRes>
      get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$station_to_station_group_stddev_pop_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$station_to_station_group_stddev_samp_order_by<TRes>
      get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$station_to_station_group_stddev_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$station_to_station_group_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$station_to_station_group_sum_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_sum_order_by(
            local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$station_to_station_group_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$station_to_station_group_var_pop_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$station_to_station_group_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$station_to_station_group_var_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$station_to_station_group_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$station_to_station_group_variance_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$station_to_station_group_aggregate_order_by<TRes>
    implements
        CopyWith$Input$station_to_station_group_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_aggregate_order_by(
      this._res);

  TRes _res;

  call({
    Input$station_to_station_group_avg_order_by? avg,
    Enum$order_by? count,
    Input$station_to_station_group_max_order_by? max,
    Input$station_to_station_group_min_order_by? min,
    Input$station_to_station_group_stddev_order_by? stddev,
    Input$station_to_station_group_stddev_pop_order_by? stddev_pop,
    Input$station_to_station_group_stddev_samp_order_by? stddev_samp,
    Input$station_to_station_group_sum_order_by? sum,
    Input$station_to_station_group_var_pop_order_by? var_pop,
    Input$station_to_station_group_var_samp_order_by? var_samp,
    Input$station_to_station_group_variance_order_by? variance,
  }) =>
      _res;

  CopyWith$Input$station_to_station_group_avg_order_by<TRes> get avg =>
      CopyWith$Input$station_to_station_group_avg_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_max_order_by<TRes> get max =>
      CopyWith$Input$station_to_station_group_max_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_min_order_by<TRes> get min =>
      CopyWith$Input$station_to_station_group_min_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$station_to_station_group_stddev_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_stddev_pop_order_by<TRes>
      get stddev_pop =>
          CopyWith$Input$station_to_station_group_stddev_pop_order_by.stub(
              _res);

  CopyWith$Input$station_to_station_group_stddev_samp_order_by<TRes>
      get stddev_samp =>
          CopyWith$Input$station_to_station_group_stddev_samp_order_by.stub(
              _res);

  CopyWith$Input$station_to_station_group_sum_order_by<TRes> get sum =>
      CopyWith$Input$station_to_station_group_sum_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$station_to_station_group_var_pop_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_var_samp_order_by<TRes>
      get var_samp =>
          CopyWith$Input$station_to_station_group_var_samp_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_variance_order_by<TRes>
      get variance =>
          CopyWith$Input$station_to_station_group_variance_order_by.stub(_res);
}

class Input$station_to_station_group_avg_order_by {
  factory Input$station_to_station_group_avg_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_avg_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_avg_order_by._(this._$data);

  factory Input$station_to_station_group_avg_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_avg_order_by<
          Input$station_to_station_group_avg_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_avg_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_avg_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_avg_order_by(
    Input$station_to_station_group_avg_order_by instance,
    TRes Function(Input$station_to_station_group_avg_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_avg_order_by;

  factory CopyWith$Input$station_to_station_group_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_avg_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_avg_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_avg_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_avg_order_by _instance;

  final TRes Function(Input$station_to_station_group_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_avg_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_avg_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_bool_exp {
  factory Input$station_to_station_group_bool_exp({
    List<Input$station_to_station_group_bool_exp>? $_and,
    Input$station_to_station_group_bool_exp? $_not,
    List<Input$station_to_station_group_bool_exp>? $_or,
    Input$station_groups_bool_exp? group,
    Input$Int_comparison_exp? group_id,
    Input$Int_comparison_exp? id,
    Input$Int_comparison_exp? order,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
  }) =>
      Input$station_to_station_group_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (group != null) r'group': group,
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_bool_exp._(this._$data);

  factory Input$station_to_station_group_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$station_to_station_group_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$station_to_station_group_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$station_to_station_group_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] = l$group == null
          ? null
          : Input$station_groups_bool_exp.fromJson(
              (l$group as Map<String, dynamic>));
    }
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$group_id as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = l$order == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$order as Map<String, dynamic>));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_bool_exp.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$station_id as Map<String, dynamic>));
    }
    return Input$station_to_station_group_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$station_to_station_group_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$station_to_station_group_bool_exp>?);

  Input$station_to_station_group_bool_exp? get $_not =>
      (_$data['_not'] as Input$station_to_station_group_bool_exp?);

  List<Input$station_to_station_group_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$station_to_station_group_bool_exp>?);

  Input$station_groups_bool_exp? get group =>
      (_$data['group'] as Input$station_groups_bool_exp?);

  Input$Int_comparison_exp? get group_id =>
      (_$data['group_id'] as Input$Int_comparison_exp?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$Int_comparison_exp? get order =>
      (_$data['order'] as Input$Int_comparison_exp?);

  Input$stations_bool_exp? get station =>
      (_$data['station'] as Input$stations_bool_exp?);

  Input$Int_comparison_exp? get station_id =>
      (_$data['station_id'] as Input$Int_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] = l$group?.toJson();
    }
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] = l$group_id?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order?.toJson();
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_bool_exp<
          Input$station_to_station_group_bool_exp>
      get copyWith => CopyWith$Input$station_to_station_group_bool_exp(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$group = group;
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station = station;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_bool_exp<TRes> {
  factory CopyWith$Input$station_to_station_group_bool_exp(
    Input$station_to_station_group_bool_exp instance,
    TRes Function(Input$station_to_station_group_bool_exp) then,
  ) = _CopyWithImpl$Input$station_to_station_group_bool_exp;

  factory CopyWith$Input$station_to_station_group_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_bool_exp;

  TRes call({
    List<Input$station_to_station_group_bool_exp>? $_and,
    Input$station_to_station_group_bool_exp? $_not,
    List<Input$station_to_station_group_bool_exp>? $_or,
    Input$station_groups_bool_exp? group,
    Input$Int_comparison_exp? group_id,
    Input$Int_comparison_exp? id,
    Input$Int_comparison_exp? order,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
  });
  TRes $_and(
      Iterable<Input$station_to_station_group_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$station_to_station_group_bool_exp<
                      Input$station_to_station_group_bool_exp>>?)
          _fn);
  CopyWith$Input$station_to_station_group_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$station_to_station_group_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$station_to_station_group_bool_exp<
                      Input$station_to_station_group_bool_exp>>?)
          _fn);
  CopyWith$Input$station_groups_bool_exp<TRes> get group;
  CopyWith$Input$Int_comparison_exp<TRes> get group_id;
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$Int_comparison_exp<TRes> get order;
  CopyWith$Input$stations_bool_exp<TRes> get station;
  CopyWith$Input$Int_comparison_exp<TRes> get station_id;
}

class _CopyWithImpl$Input$station_to_station_group_bool_exp<TRes>
    implements CopyWith$Input$station_to_station_group_bool_exp<TRes> {
  _CopyWithImpl$Input$station_to_station_group_bool_exp(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_bool_exp _instance;

  final TRes Function(Input$station_to_station_group_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? group = _undefined,
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$station_to_station_group_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$station_to_station_group_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$station_to_station_group_bool_exp>?),
        if (group != _undefined)
          'group': (group as Input$station_groups_bool_exp?),
        if (group_id != _undefined)
          'group_id': (group_id as Input$Int_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (order != _undefined) 'order': (order as Input$Int_comparison_exp?),
        if (station != _undefined)
          'station': (station as Input$stations_bool_exp?),
        if (station_id != _undefined)
          'station_id': (station_id as Input$Int_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$station_to_station_group_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$station_to_station_group_bool_exp<
                          Input$station_to_station_group_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$station_to_station_group_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$station_to_station_group_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$station_to_station_group_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$station_to_station_group_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$station_to_station_group_bool_exp<
                          Input$station_to_station_group_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$station_to_station_group_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$station_groups_bool_exp<TRes> get group {
    final local$group = _instance.group;
    return local$group == null
        ? CopyWith$Input$station_groups_bool_exp.stub(_then(_instance))
        : CopyWith$Input$station_groups_bool_exp(
            local$group, (e) => call(group: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get group_id {
    final local$group_id = _instance.group_id;
    return local$group_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$group_id, (e) => call(group_id: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get order {
    final local$order = _instance.order;
    return local$order == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$order, (e) => call(order: e));
  }

  CopyWith$Input$stations_bool_exp<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(
            local$station, (e) => call(station: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get station_id {
    final local$station_id = _instance.station_id;
    return local$station_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$station_id, (e) => call(station_id: e));
  }
}

class _CopyWithStubImpl$Input$station_to_station_group_bool_exp<TRes>
    implements CopyWith$Input$station_to_station_group_bool_exp<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$station_to_station_group_bool_exp>? $_and,
    Input$station_to_station_group_bool_exp? $_not,
    List<Input$station_to_station_group_bool_exp>? $_or,
    Input$station_groups_bool_exp? group,
    Input$Int_comparison_exp? group_id,
    Input$Int_comparison_exp? id,
    Input$Int_comparison_exp? order,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$station_to_station_group_bool_exp<TRes> get $_not =>
      CopyWith$Input$station_to_station_group_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$station_groups_bool_exp<TRes> get group =>
      CopyWith$Input$station_groups_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get group_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get order =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$stations_bool_exp<TRes> get station =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get station_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$station_to_station_group_max_order_by {
  factory Input$station_to_station_group_max_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_max_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_max_order_by._(this._$data);

  factory Input$station_to_station_group_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_max_order_by<
          Input$station_to_station_group_max_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_max_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_max_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_max_order_by(
    Input$station_to_station_group_max_order_by instance,
    TRes Function(Input$station_to_station_group_max_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_max_order_by;

  factory CopyWith$Input$station_to_station_group_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_max_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_max_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_max_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_max_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_max_order_by _instance;

  final TRes Function(Input$station_to_station_group_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_max_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_max_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_max_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_min_order_by {
  factory Input$station_to_station_group_min_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_min_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_min_order_by._(this._$data);

  factory Input$station_to_station_group_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_min_order_by<
          Input$station_to_station_group_min_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_min_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_min_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_min_order_by(
    Input$station_to_station_group_min_order_by instance,
    TRes Function(Input$station_to_station_group_min_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_min_order_by;

  factory CopyWith$Input$station_to_station_group_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_min_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_min_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_min_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_min_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_min_order_by _instance;

  final TRes Function(Input$station_to_station_group_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_min_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_min_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_min_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_order_by {
  factory Input$station_to_station_group_order_by({
    Input$station_groups_order_by? group,
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_order_by._({
        if (group != null) r'group': group,
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_order_by._(this._$data);

  factory Input$station_to_station_group_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group')) {
      final l$group = data['group'];
      result$data['group'] = l$group == null
          ? null
          : Input$station_groups_order_by.fromJson(
              (l$group as Map<String, dynamic>));
    }
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_order_by.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$station_groups_order_by? get group =>
      (_$data['group'] as Input$station_groups_order_by?);

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Input$stations_order_by? get station =>
      (_$data['station'] as Input$stations_order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group')) {
      final l$group = group;
      result$data['group'] = l$group?.toJson();
    }
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_order_by<
          Input$station_to_station_group_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group = group;
    final lOther$group = other.group;
    if (_$data.containsKey('group') != other._$data.containsKey('group')) {
      return false;
    }
    if (l$group != lOther$group) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group = group;
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station = station;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group') ? l$group : const {},
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_order_by(
    Input$station_to_station_group_order_by instance,
    TRes Function(Input$station_to_station_group_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_order_by;

  factory CopyWith$Input$station_to_station_group_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_order_by;

  TRes call({
    Input$station_groups_order_by? group,
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
  });
  CopyWith$Input$station_groups_order_by<TRes> get group;
  CopyWith$Input$stations_order_by<TRes> get station;
}

class _CopyWithImpl$Input$station_to_station_group_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_order_by _instance;

  final TRes Function(Input$station_to_station_group_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group = _undefined,
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_order_by._({
        ..._instance._$data,
        if (group != _undefined)
          'group': (group as Input$station_groups_order_by?),
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station != _undefined)
          'station': (station as Input$stations_order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));

  CopyWith$Input$station_groups_order_by<TRes> get group {
    final local$group = _instance.group;
    return local$group == null
        ? CopyWith$Input$station_groups_order_by.stub(_then(_instance))
        : CopyWith$Input$station_groups_order_by(
            local$group, (e) => call(group: e));
  }

  CopyWith$Input$stations_order_by<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_order_by(
            local$station, (e) => call(station: e));
  }
}

class _CopyWithStubImpl$Input$station_to_station_group_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_order_by(this._res);

  TRes _res;

  call({
    Input$station_groups_order_by? group,
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
  }) =>
      _res;

  CopyWith$Input$station_groups_order_by<TRes> get group =>
      CopyWith$Input$station_groups_order_by.stub(_res);

  CopyWith$Input$stations_order_by<TRes> get station =>
      CopyWith$Input$stations_order_by.stub(_res);
}

class Input$station_to_station_group_stddev_order_by {
  factory Input$station_to_station_group_stddev_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_stddev_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_stddev_order_by._(this._$data);

  factory Input$station_to_station_group_stddev_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_stddev_order_by<
          Input$station_to_station_group_stddev_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_stddev_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_stddev_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_stddev_order_by(
    Input$station_to_station_group_stddev_order_by instance,
    TRes Function(Input$station_to_station_group_stddev_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_stddev_order_by;

  factory CopyWith$Input$station_to_station_group_stddev_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_stddev_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_stddev_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_stddev_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_stddev_order_by _instance;

  final TRes Function(Input$station_to_station_group_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_stddev_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_stddev_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_stddev_pop_order_by {
  factory Input$station_to_station_group_stddev_pop_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_stddev_pop_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_stddev_pop_order_by._(this._$data);

  factory Input$station_to_station_group_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_stddev_pop_order_by<
          Input$station_to_station_group_stddev_pop_order_by>
      get copyWith =>
          CopyWith$Input$station_to_station_group_stddev_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_stddev_pop_order_by<
    TRes> {
  factory CopyWith$Input$station_to_station_group_stddev_pop_order_by(
    Input$station_to_station_group_stddev_pop_order_by instance,
    TRes Function(Input$station_to_station_group_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_stddev_pop_order_by;

  factory CopyWith$Input$station_to_station_group_stddev_pop_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_stddev_pop_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_stddev_pop_order_by<TRes>
    implements
        CopyWith$Input$station_to_station_group_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_stddev_pop_order_by _instance;

  final TRes Function(Input$station_to_station_group_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_stddev_pop_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_stddev_pop_order_by<TRes>
    implements
        CopyWith$Input$station_to_station_group_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_stddev_pop_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_stddev_samp_order_by {
  factory Input$station_to_station_group_stddev_samp_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_stddev_samp_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_stddev_samp_order_by._(this._$data);

  factory Input$station_to_station_group_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_stddev_samp_order_by<
          Input$station_to_station_group_stddev_samp_order_by>
      get copyWith =>
          CopyWith$Input$station_to_station_group_stddev_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_stddev_samp_order_by<
    TRes> {
  factory CopyWith$Input$station_to_station_group_stddev_samp_order_by(
    Input$station_to_station_group_stddev_samp_order_by instance,
    TRes Function(Input$station_to_station_group_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_stddev_samp_order_by;

  factory CopyWith$Input$station_to_station_group_stddev_samp_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_stddev_samp_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_stddev_samp_order_by<TRes>
    implements
        CopyWith$Input$station_to_station_group_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_stddev_samp_order_by _instance;

  final TRes Function(Input$station_to_station_group_stddev_samp_order_by)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_stddev_samp_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_stddev_samp_order_by<
        TRes>
    implements
        CopyWith$Input$station_to_station_group_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_stddev_samp_order_by(
      this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_stream_cursor_input {
  factory Input$station_to_station_group_stream_cursor_input({
    required Input$station_to_station_group_stream_cursor_value_input
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$station_to_station_group_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$station_to_station_group_stream_cursor_input._(this._$data);

  factory Input$station_to_station_group_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$station_to_station_group_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$station_to_station_group_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$station_to_station_group_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$station_to_station_group_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_stream_cursor_input<
          Input$station_to_station_group_stream_cursor_input>
      get copyWith =>
          CopyWith$Input$station_to_station_group_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_stream_cursor_input<
    TRes> {
  factory CopyWith$Input$station_to_station_group_stream_cursor_input(
    Input$station_to_station_group_stream_cursor_input instance,
    TRes Function(Input$station_to_station_group_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$station_to_station_group_stream_cursor_input;

  factory CopyWith$Input$station_to_station_group_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_stream_cursor_input;

  TRes call({
    Input$station_to_station_group_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$station_to_station_group_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$station_to_station_group_stream_cursor_input<TRes>
    implements
        CopyWith$Input$station_to_station_group_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$station_to_station_group_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_stream_cursor_input _instance;

  final TRes Function(Input$station_to_station_group_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$station_to_station_group_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$station_to_station_group_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$station_to_station_group_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$station_to_station_group_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$station_to_station_group_stream_cursor_input<TRes>
    implements
        CopyWith$Input$station_to_station_group_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_stream_cursor_input(
      this._res);

  TRes _res;

  call({
    Input$station_to_station_group_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$station_to_station_group_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$station_to_station_group_stream_cursor_value_input
              .stub(_res);
}

class Input$station_to_station_group_stream_cursor_value_input {
  factory Input$station_to_station_group_stream_cursor_value_input({
    int? group_id,
    int? id,
    int? order,
    int? station_id,
  }) =>
      Input$station_to_station_group_stream_cursor_value_input._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_stream_cursor_value_input._(this._$data);

  factory Input$station_to_station_group_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = (l$group_id as int?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = (l$station_id as int?);
    }
    return Input$station_to_station_group_stream_cursor_value_input._(
        result$data);
  }

  Map<String, dynamic> _$data;

  int? get group_id => (_$data['group_id'] as int?);

  int? get id => (_$data['id'] as int?);

  int? get order => (_$data['order'] as int?);

  int? get station_id => (_$data['station_id'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] = l$group_id;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id;
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_stream_cursor_value_input<
          Input$station_to_station_group_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$station_to_station_group_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$station_to_station_group_stream_cursor_value_input(
    Input$station_to_station_group_stream_cursor_value_input instance,
    TRes Function(Input$station_to_station_group_stream_cursor_value_input)
        then,
  ) = _CopyWithImpl$Input$station_to_station_group_stream_cursor_value_input;

  factory CopyWith$Input$station_to_station_group_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_stream_cursor_value_input;

  TRes call({
    int? group_id,
    int? id,
    int? order,
    int? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$station_to_station_group_stream_cursor_value_input<
            TRes> {
  _CopyWithImpl$Input$station_to_station_group_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_stream_cursor_value_input _instance;

  final TRes Function(Input$station_to_station_group_stream_cursor_value_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_stream_cursor_value_input._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as int?),
        if (id != _undefined) 'id': (id as int?),
        if (order != _undefined) 'order': (order as int?),
        if (station_id != _undefined) 'station_id': (station_id as int?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$station_to_station_group_stream_cursor_value_input<
            TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    int? group_id,
    int? id,
    int? order,
    int? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_sum_order_by {
  factory Input$station_to_station_group_sum_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_sum_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_sum_order_by._(this._$data);

  factory Input$station_to_station_group_sum_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_sum_order_by<
          Input$station_to_station_group_sum_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_sum_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_sum_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_sum_order_by(
    Input$station_to_station_group_sum_order_by instance,
    TRes Function(Input$station_to_station_group_sum_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_sum_order_by;

  factory CopyWith$Input$station_to_station_group_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_sum_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_sum_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_sum_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_sum_order_by _instance;

  final TRes Function(Input$station_to_station_group_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_sum_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_sum_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_var_pop_order_by {
  factory Input$station_to_station_group_var_pop_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_var_pop_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_var_pop_order_by._(this._$data);

  factory Input$station_to_station_group_var_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_var_pop_order_by<
          Input$station_to_station_group_var_pop_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_var_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_var_pop_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_var_pop_order_by(
    Input$station_to_station_group_var_pop_order_by instance,
    TRes Function(Input$station_to_station_group_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_var_pop_order_by;

  factory CopyWith$Input$station_to_station_group_var_pop_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_var_pop_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_var_pop_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_var_pop_order_by _instance;

  final TRes Function(Input$station_to_station_group_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_var_pop_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_var_pop_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_var_samp_order_by {
  factory Input$station_to_station_group_var_samp_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_var_samp_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_var_samp_order_by._(this._$data);

  factory Input$station_to_station_group_var_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_var_samp_order_by<
          Input$station_to_station_group_var_samp_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_var_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_var_samp_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_var_samp_order_by(
    Input$station_to_station_group_var_samp_order_by instance,
    TRes Function(Input$station_to_station_group_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_var_samp_order_by;

  factory CopyWith$Input$station_to_station_group_var_samp_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_var_samp_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_var_samp_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_var_samp_order_by _instance;

  final TRes Function(Input$station_to_station_group_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_var_samp_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_var_samp_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$station_to_station_group_variance_order_by {
  factory Input$station_to_station_group_variance_order_by({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      Input$station_to_station_group_variance_order_by._({
        if (group_id != null) r'group_id': group_id,
        if (id != null) r'id': id,
        if (order != null) r'order': order,
        if (station_id != null) r'station_id': station_id,
      });

  Input$station_to_station_group_variance_order_by._(this._$data);

  factory Input$station_to_station_group_variance_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('group_id')) {
      final l$group_id = data['group_id'];
      result$data['group_id'] = l$group_id == null
          ? null
          : fromJson$Enum$order_by((l$group_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$station_to_station_group_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get group_id => (_$data['group_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('group_id')) {
      final l$group_id = group_id;
      result$data['group_id'] =
          l$group_id == null ? null : toJson$Enum$order_by(l$group_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$station_to_station_group_variance_order_by<
          Input$station_to_station_group_variance_order_by>
      get copyWith => CopyWith$Input$station_to_station_group_variance_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$station_to_station_group_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$group_id = group_id;
    final lOther$group_id = other.group_id;
    if (_$data.containsKey('group_id') !=
        other._$data.containsKey('group_id')) {
      return false;
    }
    if (l$group_id != lOther$group_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$group_id = group_id;
    final l$id = id;
    final l$order = order;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('group_id') ? l$group_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$station_to_station_group_variance_order_by<TRes> {
  factory CopyWith$Input$station_to_station_group_variance_order_by(
    Input$station_to_station_group_variance_order_by instance,
    TRes Function(Input$station_to_station_group_variance_order_by) then,
  ) = _CopyWithImpl$Input$station_to_station_group_variance_order_by;

  factory CopyWith$Input$station_to_station_group_variance_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$station_to_station_group_variance_order_by;

  TRes call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$station_to_station_group_variance_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_variance_order_by<TRes> {
  _CopyWithImpl$Input$station_to_station_group_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$station_to_station_group_variance_order_by _instance;

  final TRes Function(Input$station_to_station_group_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? group_id = _undefined,
    Object? id = _undefined,
    Object? order = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$station_to_station_group_variance_order_by._({
        ..._instance._$data,
        if (group_id != _undefined) 'group_id': (group_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$station_to_station_group_variance_order_by<TRes>
    implements CopyWith$Input$station_to_station_group_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$station_to_station_group_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? group_id,
    Enum$order_by? id,
    Enum$order_by? order,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_aggregate_order_by {
  factory Input$stations_aggregate_order_by({
    Input$stations_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_max_order_by? max,
    Input$stations_min_order_by? min,
    Input$stations_stddev_order_by? stddev,
    Input$stations_stddev_pop_order_by? stddev_pop,
    Input$stations_stddev_samp_order_by? stddev_samp,
    Input$stations_sum_order_by? sum,
    Input$stations_var_pop_order_by? var_pop,
    Input$stations_var_samp_order_by? var_samp,
    Input$stations_variance_order_by? variance,
  }) =>
      Input$stations_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$stations_aggregate_order_by._(this._$data);

  factory Input$stations_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$stations_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$stations_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$stations_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$stations_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$stations_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$stations_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$stations_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$stations_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$stations_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$stations_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$stations_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$stations_avg_order_by? get avg =>
      (_$data['avg'] as Input$stations_avg_order_by?);

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);

  Input$stations_max_order_by? get max =>
      (_$data['max'] as Input$stations_max_order_by?);

  Input$stations_min_order_by? get min =>
      (_$data['min'] as Input$stations_min_order_by?);

  Input$stations_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$stations_stddev_order_by?);

  Input$stations_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$stations_stddev_pop_order_by?);

  Input$stations_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$stations_stddev_samp_order_by?);

  Input$stations_sum_order_by? get sum =>
      (_$data['sum'] as Input$stations_sum_order_by?);

  Input$stations_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$stations_var_pop_order_by?);

  Input$stations_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$stations_var_samp_order_by?);

  Input$stations_variance_order_by? get variance =>
      (_$data['variance'] as Input$stations_variance_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$stations_aggregate_order_by<Input$stations_aggregate_order_by>
      get copyWith => CopyWith$Input$stations_aggregate_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_aggregate_order_by<TRes> {
  factory CopyWith$Input$stations_aggregate_order_by(
    Input$stations_aggregate_order_by instance,
    TRes Function(Input$stations_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$stations_aggregate_order_by;

  factory CopyWith$Input$stations_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_aggregate_order_by;

  TRes call({
    Input$stations_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_max_order_by? max,
    Input$stations_min_order_by? min,
    Input$stations_stddev_order_by? stddev,
    Input$stations_stddev_pop_order_by? stddev_pop,
    Input$stations_stddev_samp_order_by? stddev_samp,
    Input$stations_sum_order_by? sum,
    Input$stations_var_pop_order_by? var_pop,
    Input$stations_var_samp_order_by? var_samp,
    Input$stations_variance_order_by? variance,
  });
  CopyWith$Input$stations_avg_order_by<TRes> get avg;
  CopyWith$Input$stations_max_order_by<TRes> get max;
  CopyWith$Input$stations_min_order_by<TRes> get min;
  CopyWith$Input$stations_stddev_order_by<TRes> get stddev;
  CopyWith$Input$stations_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$stations_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$stations_sum_order_by<TRes> get sum;
  CopyWith$Input$stations_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$stations_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$stations_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$stations_aggregate_order_by<TRes>
    implements CopyWith$Input$stations_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$stations_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_aggregate_order_by _instance;

  final TRes Function(Input$stations_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$stations_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$stations_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$stations_max_order_by?),
        if (min != _undefined) 'min': (min as Input$stations_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$stations_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$stations_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp': (stddev_samp as Input$stations_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$stations_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$stations_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$stations_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$stations_variance_order_by?),
      }));

  CopyWith$Input$stations_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$stations_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_avg_order_by(local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$stations_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$stations_max_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$stations_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$stations_min_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_min_order_by(local$min, (e) => call(min: e));
  }

  CopyWith$Input$stations_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$stations_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$stations_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$stations_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$stations_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$stations_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$stations_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$stations_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_sum_order_by(local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$stations_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$stations_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$stations_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$stations_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$stations_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$stations_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$stations_aggregate_order_by<TRes>
    implements CopyWith$Input$stations_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$stations_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_max_order_by? max,
    Input$stations_min_order_by? min,
    Input$stations_stddev_order_by? stddev,
    Input$stations_stddev_pop_order_by? stddev_pop,
    Input$stations_stddev_samp_order_by? stddev_samp,
    Input$stations_sum_order_by? sum,
    Input$stations_var_pop_order_by? var_pop,
    Input$stations_var_samp_order_by? var_samp,
    Input$stations_variance_order_by? variance,
  }) =>
      _res;

  CopyWith$Input$stations_avg_order_by<TRes> get avg =>
      CopyWith$Input$stations_avg_order_by.stub(_res);

  CopyWith$Input$stations_max_order_by<TRes> get max =>
      CopyWith$Input$stations_max_order_by.stub(_res);

  CopyWith$Input$stations_min_order_by<TRes> get min =>
      CopyWith$Input$stations_min_order_by.stub(_res);

  CopyWith$Input$stations_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$stations_stddev_order_by.stub(_res);

  CopyWith$Input$stations_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$stations_stddev_pop_order_by.stub(_res);

  CopyWith$Input$stations_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$stations_stddev_samp_order_by.stub(_res);

  CopyWith$Input$stations_sum_order_by<TRes> get sum =>
      CopyWith$Input$stations_sum_order_by.stub(_res);

  CopyWith$Input$stations_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$stations_var_pop_order_by.stub(_res);

  CopyWith$Input$stations_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$stations_var_samp_order_by.stub(_res);

  CopyWith$Input$stations_variance_order_by<TRes> get variance =>
      CopyWith$Input$stations_variance_order_by.stub(_res);
}

class Input$stations_avg_order_by {
  factory Input$stations_avg_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_avg_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_avg_order_by._(this._$data);

  factory Input$stations_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_avg_order_by<Input$stations_avg_order_by>
      get copyWith => CopyWith$Input$stations_avg_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_avg_order_by<TRes> {
  factory CopyWith$Input$stations_avg_order_by(
    Input$stations_avg_order_by instance,
    TRes Function(Input$stations_avg_order_by) then,
  ) = _CopyWithImpl$Input$stations_avg_order_by;

  factory CopyWith$Input$stations_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_avg_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_avg_order_by<TRes>
    implements CopyWith$Input$stations_avg_order_by<TRes> {
  _CopyWithImpl$Input$stations_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_avg_order_by _instance;

  final TRes Function(Input$stations_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_avg_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_avg_order_by<TRes>
    implements CopyWith$Input$stations_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$stations_bool_exp {
  factory Input$stations_bool_exp({
    List<Input$stations_bool_exp>? $_and,
    Input$stations_bool_exp? $_not,
    List<Input$stations_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$String_comparison_exp? description,
    Input$String_comparison_exp? description_action_title,
    Input$String_comparison_exp? description_link,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? facebook_page_id,
    Input$Boolean_comparison_exp? feature_latest_post,
    Input$String_comparison_exp? hls_stream_url,
    Input$Int_comparison_exp? id,
    Input$Int_comparison_exp? latest_station_now_playing_id,
    Input$Int_comparison_exp? latest_station_uptime_id,
    Input$stations_now_playing_bool_exp? now_playing,
    Input$stations_now_playing_bool_exp? now_playing_history,
    Input$Int_comparison_exp? order,
    Input$posts_bool_exp? posts,
    Input$String_comparison_exp? proxy_stream_url,
    Input$reviews_bool_exp? reviews,
    Input$String_comparison_exp? rss_feed,
    Input$String_comparison_exp? slug,
    Input$station_to_station_group_bool_exp? station_to_station_groups,
    Input$String_comparison_exp? stream_url,
    Input$String_comparison_exp? thumbnail,
    Input$String_comparison_exp? thumbnail_url,
    Input$String_comparison_exp? title,
    Input$Int_comparison_exp? total_listeners,
    Input$timestamptz_comparison_exp? updated_at,
    Input$stations_uptime_bool_exp? uptime,
    Input$stations_uptime_bool_exp? uptime_history,
    Input$String_comparison_exp? website,
  }) =>
      Input$stations_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (description != null) r'description': description,
        if (description_action_title != null)
          r'description_action_title': description_action_title,
        if (description_link != null) r'description_link': description_link,
        if (email != null) r'email': email,
        if (facebook_page_id != null) r'facebook_page_id': facebook_page_id,
        if (feature_latest_post != null)
          r'feature_latest_post': feature_latest_post,
        if (hls_stream_url != null) r'hls_stream_url': hls_stream_url,
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (now_playing != null) r'now_playing': now_playing,
        if (now_playing_history != null)
          r'now_playing_history': now_playing_history,
        if (order != null) r'order': order,
        if (posts != null) r'posts': posts,
        if (proxy_stream_url != null) r'proxy_stream_url': proxy_stream_url,
        if (reviews != null) r'reviews': reviews,
        if (rss_feed != null) r'rss_feed': rss_feed,
        if (slug != null) r'slug': slug,
        if (station_to_station_groups != null)
          r'station_to_station_groups': station_to_station_groups,
        if (stream_url != null) r'stream_url': stream_url,
        if (thumbnail != null) r'thumbnail': thumbnail,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
        if (title != null) r'title': title,
        if (total_listeners != null) r'total_listeners': total_listeners,
        if (updated_at != null) r'updated_at': updated_at,
        if (uptime != null) r'uptime': uptime,
        if (uptime_history != null) r'uptime_history': uptime_history,
        if (website != null) r'website': website,
      });

  Input$stations_bool_exp._(this._$data);

  factory Input$stations_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$stations_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$stations_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$stations_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$description as Map<String, dynamic>));
    }
    if (data.containsKey('description_action_title')) {
      final l$description_action_title = data['description_action_title'];
      result$data['description_action_title'] =
          l$description_action_title == null
              ? null
              : Input$String_comparison_exp.fromJson(
                  (l$description_action_title as Map<String, dynamic>));
    }
    if (data.containsKey('description_link')) {
      final l$description_link = data['description_link'];
      result$data['description_link'] = l$description_link == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$description_link as Map<String, dynamic>));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = l$email == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$email as Map<String, dynamic>));
    }
    if (data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = data['facebook_page_id'];
      result$data['facebook_page_id'] = l$facebook_page_id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$facebook_page_id as Map<String, dynamic>));
    }
    if (data.containsKey('feature_latest_post')) {
      final l$feature_latest_post = data['feature_latest_post'];
      result$data['feature_latest_post'] = l$feature_latest_post == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$feature_latest_post as Map<String, dynamic>));
    }
    if (data.containsKey('hls_stream_url')) {
      final l$hls_stream_url = data['hls_stream_url'];
      result$data['hls_stream_url'] = l$hls_stream_url == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$hls_stream_url as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : Input$Int_comparison_exp.fromJson(
                  (l$latest_station_now_playing_id as Map<String, dynamic>));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : Input$Int_comparison_exp.fromJson(
                  (l$latest_station_uptime_id as Map<String, dynamic>));
    }
    if (data.containsKey('now_playing')) {
      final l$now_playing = data['now_playing'];
      result$data['now_playing'] = l$now_playing == null
          ? null
          : Input$stations_now_playing_bool_exp.fromJson(
              (l$now_playing as Map<String, dynamic>));
    }
    if (data.containsKey('now_playing_history')) {
      final l$now_playing_history = data['now_playing_history'];
      result$data['now_playing_history'] = l$now_playing_history == null
          ? null
          : Input$stations_now_playing_bool_exp.fromJson(
              (l$now_playing_history as Map<String, dynamic>));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = l$order == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$order as Map<String, dynamic>));
    }
    if (data.containsKey('posts')) {
      final l$posts = data['posts'];
      result$data['posts'] = l$posts == null
          ? null
          : Input$posts_bool_exp.fromJson((l$posts as Map<String, dynamic>));
    }
    if (data.containsKey('proxy_stream_url')) {
      final l$proxy_stream_url = data['proxy_stream_url'];
      result$data['proxy_stream_url'] = l$proxy_stream_url == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$proxy_stream_url as Map<String, dynamic>));
    }
    if (data.containsKey('reviews')) {
      final l$reviews = data['reviews'];
      result$data['reviews'] = l$reviews == null
          ? null
          : Input$reviews_bool_exp.fromJson(
              (l$reviews as Map<String, dynamic>));
    }
    if (data.containsKey('rss_feed')) {
      final l$rss_feed = data['rss_feed'];
      result$data['rss_feed'] = l$rss_feed == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$rss_feed as Map<String, dynamic>));
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] = l$slug == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$slug as Map<String, dynamic>));
    }
    if (data.containsKey('station_to_station_groups')) {
      final l$station_to_station_groups = data['station_to_station_groups'];
      result$data['station_to_station_groups'] =
          l$station_to_station_groups == null
              ? null
              : Input$station_to_station_group_bool_exp.fromJson(
                  (l$station_to_station_groups as Map<String, dynamic>));
    }
    if (data.containsKey('stream_url')) {
      final l$stream_url = data['stream_url'];
      result$data['stream_url'] = l$stream_url == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$stream_url as Map<String, dynamic>));
    }
    if (data.containsKey('thumbnail')) {
      final l$thumbnail = data['thumbnail'];
      result$data['thumbnail'] = l$thumbnail == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$thumbnail_url as Map<String, dynamic>));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = l$title == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$title as Map<String, dynamic>));
    }
    if (data.containsKey('total_listeners')) {
      final l$total_listeners = data['total_listeners'];
      result$data['total_listeners'] = l$total_listeners == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$total_listeners as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    if (data.containsKey('uptime')) {
      final l$uptime = data['uptime'];
      result$data['uptime'] = l$uptime == null
          ? null
          : Input$stations_uptime_bool_exp.fromJson(
              (l$uptime as Map<String, dynamic>));
    }
    if (data.containsKey('uptime_history')) {
      final l$uptime_history = data['uptime_history'];
      result$data['uptime_history'] = l$uptime_history == null
          ? null
          : Input$stations_uptime_bool_exp.fromJson(
              (l$uptime_history as Map<String, dynamic>));
    }
    if (data.containsKey('website')) {
      final l$website = data['website'];
      result$data['website'] = l$website == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$website as Map<String, dynamic>));
    }
    return Input$stations_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$stations_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$stations_bool_exp>?);

  Input$stations_bool_exp? get $_not =>
      (_$data['_not'] as Input$stations_bool_exp?);

  List<Input$stations_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$stations_bool_exp>?);

  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);

  Input$String_comparison_exp? get description =>
      (_$data['description'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get description_action_title =>
      (_$data['description_action_title'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get description_link =>
      (_$data['description_link'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get email =>
      (_$data['email'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get facebook_page_id =>
      (_$data['facebook_page_id'] as Input$String_comparison_exp?);

  Input$Boolean_comparison_exp? get feature_latest_post =>
      (_$data['feature_latest_post'] as Input$Boolean_comparison_exp?);

  Input$String_comparison_exp? get hls_stream_url =>
      (_$data['hls_stream_url'] as Input$String_comparison_exp?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$Int_comparison_exp? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Input$Int_comparison_exp?);

  Input$Int_comparison_exp? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Input$Int_comparison_exp?);

  Input$stations_now_playing_bool_exp? get now_playing =>
      (_$data['now_playing'] as Input$stations_now_playing_bool_exp?);

  Input$stations_now_playing_bool_exp? get now_playing_history =>
      (_$data['now_playing_history'] as Input$stations_now_playing_bool_exp?);

  Input$Int_comparison_exp? get order =>
      (_$data['order'] as Input$Int_comparison_exp?);

  Input$posts_bool_exp? get posts => (_$data['posts'] as Input$posts_bool_exp?);

  Input$String_comparison_exp? get proxy_stream_url =>
      (_$data['proxy_stream_url'] as Input$String_comparison_exp?);

  Input$reviews_bool_exp? get reviews =>
      (_$data['reviews'] as Input$reviews_bool_exp?);

  Input$String_comparison_exp? get rss_feed =>
      (_$data['rss_feed'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get slug =>
      (_$data['slug'] as Input$String_comparison_exp?);

  Input$station_to_station_group_bool_exp? get station_to_station_groups =>
      (_$data['station_to_station_groups']
          as Input$station_to_station_group_bool_exp?);

  Input$String_comparison_exp? get stream_url =>
      (_$data['stream_url'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get thumbnail =>
      (_$data['thumbnail'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get thumbnail_url =>
      (_$data['thumbnail_url'] as Input$String_comparison_exp?);

  Input$String_comparison_exp? get title =>
      (_$data['title'] as Input$String_comparison_exp?);

  Input$Int_comparison_exp? get total_listeners =>
      (_$data['total_listeners'] as Input$Int_comparison_exp?);

  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);

  Input$stations_uptime_bool_exp? get uptime =>
      (_$data['uptime'] as Input$stations_uptime_bool_exp?);

  Input$stations_uptime_bool_exp? get uptime_history =>
      (_$data['uptime_history'] as Input$stations_uptime_bool_exp?);

  Input$String_comparison_exp? get website =>
      (_$data['website'] as Input$String_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description?.toJson();
    }
    if (_$data.containsKey('description_action_title')) {
      final l$description_action_title = description_action_title;
      result$data['description_action_title'] =
          l$description_action_title?.toJson();
    }
    if (_$data.containsKey('description_link')) {
      final l$description_link = description_link;
      result$data['description_link'] = l$description_link?.toJson();
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email?.toJson();
    }
    if (_$data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = facebook_page_id;
      result$data['facebook_page_id'] = l$facebook_page_id?.toJson();
    }
    if (_$data.containsKey('feature_latest_post')) {
      final l$feature_latest_post = feature_latest_post;
      result$data['feature_latest_post'] = l$feature_latest_post?.toJson();
    }
    if (_$data.containsKey('hls_stream_url')) {
      final l$hls_stream_url = hls_stream_url;
      result$data['hls_stream_url'] = l$hls_stream_url?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id?.toJson();
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id?.toJson();
    }
    if (_$data.containsKey('now_playing')) {
      final l$now_playing = now_playing;
      result$data['now_playing'] = l$now_playing?.toJson();
    }
    if (_$data.containsKey('now_playing_history')) {
      final l$now_playing_history = now_playing_history;
      result$data['now_playing_history'] = l$now_playing_history?.toJson();
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order?.toJson();
    }
    if (_$data.containsKey('posts')) {
      final l$posts = posts;
      result$data['posts'] = l$posts?.toJson();
    }
    if (_$data.containsKey('proxy_stream_url')) {
      final l$proxy_stream_url = proxy_stream_url;
      result$data['proxy_stream_url'] = l$proxy_stream_url?.toJson();
    }
    if (_$data.containsKey('reviews')) {
      final l$reviews = reviews;
      result$data['reviews'] = l$reviews?.toJson();
    }
    if (_$data.containsKey('rss_feed')) {
      final l$rss_feed = rss_feed;
      result$data['rss_feed'] = l$rss_feed?.toJson();
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] = l$slug?.toJson();
    }
    if (_$data.containsKey('station_to_station_groups')) {
      final l$station_to_station_groups = station_to_station_groups;
      result$data['station_to_station_groups'] =
          l$station_to_station_groups?.toJson();
    }
    if (_$data.containsKey('stream_url')) {
      final l$stream_url = stream_url;
      result$data['stream_url'] = l$stream_url?.toJson();
    }
    if (_$data.containsKey('thumbnail')) {
      final l$thumbnail = thumbnail;
      result$data['thumbnail'] = l$thumbnail?.toJson();
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url?.toJson();
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title?.toJson();
    }
    if (_$data.containsKey('total_listeners')) {
      final l$total_listeners = total_listeners;
      result$data['total_listeners'] = l$total_listeners?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    if (_$data.containsKey('uptime')) {
      final l$uptime = uptime;
      result$data['uptime'] = l$uptime?.toJson();
    }
    if (_$data.containsKey('uptime_history')) {
      final l$uptime_history = uptime_history;
      result$data['uptime_history'] = l$uptime_history?.toJson();
    }
    if (_$data.containsKey('website')) {
      final l$website = website;
      result$data['website'] = l$website?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$stations_bool_exp<Input$stations_bool_exp> get copyWith =>
      CopyWith$Input$stations_bool_exp(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$description_action_title = description_action_title;
    final lOther$description_action_title = other.description_action_title;
    if (_$data.containsKey('description_action_title') !=
        other._$data.containsKey('description_action_title')) {
      return false;
    }
    if (l$description_action_title != lOther$description_action_title) {
      return false;
    }
    final l$description_link = description_link;
    final lOther$description_link = other.description_link;
    if (_$data.containsKey('description_link') !=
        other._$data.containsKey('description_link')) {
      return false;
    }
    if (l$description_link != lOther$description_link) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$facebook_page_id = facebook_page_id;
    final lOther$facebook_page_id = other.facebook_page_id;
    if (_$data.containsKey('facebook_page_id') !=
        other._$data.containsKey('facebook_page_id')) {
      return false;
    }
    if (l$facebook_page_id != lOther$facebook_page_id) {
      return false;
    }
    final l$feature_latest_post = feature_latest_post;
    final lOther$feature_latest_post = other.feature_latest_post;
    if (_$data.containsKey('feature_latest_post') !=
        other._$data.containsKey('feature_latest_post')) {
      return false;
    }
    if (l$feature_latest_post != lOther$feature_latest_post) {
      return false;
    }
    final l$hls_stream_url = hls_stream_url;
    final lOther$hls_stream_url = other.hls_stream_url;
    if (_$data.containsKey('hls_stream_url') !=
        other._$data.containsKey('hls_stream_url')) {
      return false;
    }
    if (l$hls_stream_url != lOther$hls_stream_url) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$now_playing = now_playing;
    final lOther$now_playing = other.now_playing;
    if (_$data.containsKey('now_playing') !=
        other._$data.containsKey('now_playing')) {
      return false;
    }
    if (l$now_playing != lOther$now_playing) {
      return false;
    }
    final l$now_playing_history = now_playing_history;
    final lOther$now_playing_history = other.now_playing_history;
    if (_$data.containsKey('now_playing_history') !=
        other._$data.containsKey('now_playing_history')) {
      return false;
    }
    if (l$now_playing_history != lOther$now_playing_history) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$posts = posts;
    final lOther$posts = other.posts;
    if (_$data.containsKey('posts') != other._$data.containsKey('posts')) {
      return false;
    }
    if (l$posts != lOther$posts) {
      return false;
    }
    final l$proxy_stream_url = proxy_stream_url;
    final lOther$proxy_stream_url = other.proxy_stream_url;
    if (_$data.containsKey('proxy_stream_url') !=
        other._$data.containsKey('proxy_stream_url')) {
      return false;
    }
    if (l$proxy_stream_url != lOther$proxy_stream_url) {
      return false;
    }
    final l$reviews = reviews;
    final lOther$reviews = other.reviews;
    if (_$data.containsKey('reviews') != other._$data.containsKey('reviews')) {
      return false;
    }
    if (l$reviews != lOther$reviews) {
      return false;
    }
    final l$rss_feed = rss_feed;
    final lOther$rss_feed = other.rss_feed;
    if (_$data.containsKey('rss_feed') !=
        other._$data.containsKey('rss_feed')) {
      return false;
    }
    if (l$rss_feed != lOther$rss_feed) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    final l$station_to_station_groups = station_to_station_groups;
    final lOther$station_to_station_groups = other.station_to_station_groups;
    if (_$data.containsKey('station_to_station_groups') !=
        other._$data.containsKey('station_to_station_groups')) {
      return false;
    }
    if (l$station_to_station_groups != lOther$station_to_station_groups) {
      return false;
    }
    final l$stream_url = stream_url;
    final lOther$stream_url = other.stream_url;
    if (_$data.containsKey('stream_url') !=
        other._$data.containsKey('stream_url')) {
      return false;
    }
    if (l$stream_url != lOther$stream_url) {
      return false;
    }
    final l$thumbnail = thumbnail;
    final lOther$thumbnail = other.thumbnail;
    if (_$data.containsKey('thumbnail') !=
        other._$data.containsKey('thumbnail')) {
      return false;
    }
    if (l$thumbnail != lOther$thumbnail) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$total_listeners = total_listeners;
    final lOther$total_listeners = other.total_listeners;
    if (_$data.containsKey('total_listeners') !=
        other._$data.containsKey('total_listeners')) {
      return false;
    }
    if (l$total_listeners != lOther$total_listeners) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$uptime = uptime;
    final lOther$uptime = other.uptime;
    if (_$data.containsKey('uptime') != other._$data.containsKey('uptime')) {
      return false;
    }
    if (l$uptime != lOther$uptime) {
      return false;
    }
    final l$uptime_history = uptime_history;
    final lOther$uptime_history = other.uptime_history;
    if (_$data.containsKey('uptime_history') !=
        other._$data.containsKey('uptime_history')) {
      return false;
    }
    if (l$uptime_history != lOther$uptime_history) {
      return false;
    }
    final l$website = website;
    final lOther$website = other.website;
    if (_$data.containsKey('website') != other._$data.containsKey('website')) {
      return false;
    }
    if (l$website != lOther$website) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$description = description;
    final l$description_action_title = description_action_title;
    final l$description_link = description_link;
    final l$email = email;
    final l$facebook_page_id = facebook_page_id;
    final l$feature_latest_post = feature_latest_post;
    final l$hls_stream_url = hls_stream_url;
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$now_playing = now_playing;
    final l$now_playing_history = now_playing_history;
    final l$order = order;
    final l$posts = posts;
    final l$proxy_stream_url = proxy_stream_url;
    final l$reviews = reviews;
    final l$rss_feed = rss_feed;
    final l$slug = slug;
    final l$station_to_station_groups = station_to_station_groups;
    final l$stream_url = stream_url;
    final l$thumbnail = thumbnail;
    final l$thumbnail_url = thumbnail_url;
    final l$title = title;
    final l$total_listeners = total_listeners;
    final l$updated_at = updated_at;
    final l$uptime = uptime;
    final l$uptime_history = uptime_history;
    final l$website = website;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('description_action_title')
          ? l$description_action_title
          : const {},
      _$data.containsKey('description_link') ? l$description_link : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('facebook_page_id') ? l$facebook_page_id : const {},
      _$data.containsKey('feature_latest_post')
          ? l$feature_latest_post
          : const {},
      _$data.containsKey('hls_stream_url') ? l$hls_stream_url : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('now_playing') ? l$now_playing : const {},
      _$data.containsKey('now_playing_history')
          ? l$now_playing_history
          : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('posts') ? l$posts : const {},
      _$data.containsKey('proxy_stream_url') ? l$proxy_stream_url : const {},
      _$data.containsKey('reviews') ? l$reviews : const {},
      _$data.containsKey('rss_feed') ? l$rss_feed : const {},
      _$data.containsKey('slug') ? l$slug : const {},
      _$data.containsKey('station_to_station_groups')
          ? l$station_to_station_groups
          : const {},
      _$data.containsKey('stream_url') ? l$stream_url : const {},
      _$data.containsKey('thumbnail') ? l$thumbnail : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('total_listeners') ? l$total_listeners : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('uptime') ? l$uptime : const {},
      _$data.containsKey('uptime_history') ? l$uptime_history : const {},
      _$data.containsKey('website') ? l$website : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_bool_exp<TRes> {
  factory CopyWith$Input$stations_bool_exp(
    Input$stations_bool_exp instance,
    TRes Function(Input$stations_bool_exp) then,
  ) = _CopyWithImpl$Input$stations_bool_exp;

  factory CopyWith$Input$stations_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_bool_exp;

  TRes call({
    List<Input$stations_bool_exp>? $_and,
    Input$stations_bool_exp? $_not,
    List<Input$stations_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$String_comparison_exp? description,
    Input$String_comparison_exp? description_action_title,
    Input$String_comparison_exp? description_link,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? facebook_page_id,
    Input$Boolean_comparison_exp? feature_latest_post,
    Input$String_comparison_exp? hls_stream_url,
    Input$Int_comparison_exp? id,
    Input$Int_comparison_exp? latest_station_now_playing_id,
    Input$Int_comparison_exp? latest_station_uptime_id,
    Input$stations_now_playing_bool_exp? now_playing,
    Input$stations_now_playing_bool_exp? now_playing_history,
    Input$Int_comparison_exp? order,
    Input$posts_bool_exp? posts,
    Input$String_comparison_exp? proxy_stream_url,
    Input$reviews_bool_exp? reviews,
    Input$String_comparison_exp? rss_feed,
    Input$String_comparison_exp? slug,
    Input$station_to_station_group_bool_exp? station_to_station_groups,
    Input$String_comparison_exp? stream_url,
    Input$String_comparison_exp? thumbnail,
    Input$String_comparison_exp? thumbnail_url,
    Input$String_comparison_exp? title,
    Input$Int_comparison_exp? total_listeners,
    Input$timestamptz_comparison_exp? updated_at,
    Input$stations_uptime_bool_exp? uptime,
    Input$stations_uptime_bool_exp? uptime_history,
    Input$String_comparison_exp? website,
  });
  TRes $_and(
      Iterable<Input$stations_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$stations_bool_exp<Input$stations_bool_exp>>?)
          _fn);
  CopyWith$Input$stations_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$stations_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$stations_bool_exp<Input$stations_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$String_comparison_exp<TRes> get description;
  CopyWith$Input$String_comparison_exp<TRes> get description_action_title;
  CopyWith$Input$String_comparison_exp<TRes> get description_link;
  CopyWith$Input$String_comparison_exp<TRes> get email;
  CopyWith$Input$String_comparison_exp<TRes> get facebook_page_id;
  CopyWith$Input$Boolean_comparison_exp<TRes> get feature_latest_post;
  CopyWith$Input$String_comparison_exp<TRes> get hls_stream_url;
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$Int_comparison_exp<TRes> get latest_station_now_playing_id;
  CopyWith$Input$Int_comparison_exp<TRes> get latest_station_uptime_id;
  CopyWith$Input$stations_now_playing_bool_exp<TRes> get now_playing;
  CopyWith$Input$stations_now_playing_bool_exp<TRes> get now_playing_history;
  CopyWith$Input$Int_comparison_exp<TRes> get order;
  CopyWith$Input$posts_bool_exp<TRes> get posts;
  CopyWith$Input$String_comparison_exp<TRes> get proxy_stream_url;
  CopyWith$Input$reviews_bool_exp<TRes> get reviews;
  CopyWith$Input$String_comparison_exp<TRes> get rss_feed;
  CopyWith$Input$String_comparison_exp<TRes> get slug;
  CopyWith$Input$station_to_station_group_bool_exp<TRes>
      get station_to_station_groups;
  CopyWith$Input$String_comparison_exp<TRes> get stream_url;
  CopyWith$Input$String_comparison_exp<TRes> get thumbnail;
  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url;
  CopyWith$Input$String_comparison_exp<TRes> get title;
  CopyWith$Input$Int_comparison_exp<TRes> get total_listeners;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
  CopyWith$Input$stations_uptime_bool_exp<TRes> get uptime;
  CopyWith$Input$stations_uptime_bool_exp<TRes> get uptime_history;
  CopyWith$Input$String_comparison_exp<TRes> get website;
}

class _CopyWithImpl$Input$stations_bool_exp<TRes>
    implements CopyWith$Input$stations_bool_exp<TRes> {
  _CopyWithImpl$Input$stations_bool_exp(
    this._instance,
    this._then,
  );

  final Input$stations_bool_exp _instance;

  final TRes Function(Input$stations_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? description = _undefined,
    Object? description_action_title = _undefined,
    Object? description_link = _undefined,
    Object? email = _undefined,
    Object? facebook_page_id = _undefined,
    Object? feature_latest_post = _undefined,
    Object? hls_stream_url = _undefined,
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? now_playing = _undefined,
    Object? now_playing_history = _undefined,
    Object? order = _undefined,
    Object? posts = _undefined,
    Object? proxy_stream_url = _undefined,
    Object? reviews = _undefined,
    Object? rss_feed = _undefined,
    Object? slug = _undefined,
    Object? station_to_station_groups = _undefined,
    Object? stream_url = _undefined,
    Object? thumbnail = _undefined,
    Object? thumbnail_url = _undefined,
    Object? title = _undefined,
    Object? total_listeners = _undefined,
    Object? updated_at = _undefined,
    Object? uptime = _undefined,
    Object? uptime_history = _undefined,
    Object? website = _undefined,
  }) =>
      _then(Input$stations_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$stations_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$stations_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$stations_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (description != _undefined)
          'description': (description as Input$String_comparison_exp?),
        if (description_action_title != _undefined)
          'description_action_title':
              (description_action_title as Input$String_comparison_exp?),
        if (description_link != _undefined)
          'description_link':
              (description_link as Input$String_comparison_exp?),
        if (email != _undefined)
          'email': (email as Input$String_comparison_exp?),
        if (facebook_page_id != _undefined)
          'facebook_page_id':
              (facebook_page_id as Input$String_comparison_exp?),
        if (feature_latest_post != _undefined)
          'feature_latest_post':
              (feature_latest_post as Input$Boolean_comparison_exp?),
        if (hls_stream_url != _undefined)
          'hls_stream_url': (hls_stream_url as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Input$Int_comparison_exp?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Input$Int_comparison_exp?),
        if (now_playing != _undefined)
          'now_playing': (now_playing as Input$stations_now_playing_bool_exp?),
        if (now_playing_history != _undefined)
          'now_playing_history':
              (now_playing_history as Input$stations_now_playing_bool_exp?),
        if (order != _undefined) 'order': (order as Input$Int_comparison_exp?),
        if (posts != _undefined) 'posts': (posts as Input$posts_bool_exp?),
        if (proxy_stream_url != _undefined)
          'proxy_stream_url':
              (proxy_stream_url as Input$String_comparison_exp?),
        if (reviews != _undefined)
          'reviews': (reviews as Input$reviews_bool_exp?),
        if (rss_feed != _undefined)
          'rss_feed': (rss_feed as Input$String_comparison_exp?),
        if (slug != _undefined) 'slug': (slug as Input$String_comparison_exp?),
        if (station_to_station_groups != _undefined)
          'station_to_station_groups': (station_to_station_groups
              as Input$station_to_station_group_bool_exp?),
        if (stream_url != _undefined)
          'stream_url': (stream_url as Input$String_comparison_exp?),
        if (thumbnail != _undefined)
          'thumbnail': (thumbnail as Input$String_comparison_exp?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Input$String_comparison_exp?),
        if (title != _undefined)
          'title': (title as Input$String_comparison_exp?),
        if (total_listeners != _undefined)
          'total_listeners': (total_listeners as Input$Int_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
        if (uptime != _undefined)
          'uptime': (uptime as Input$stations_uptime_bool_exp?),
        if (uptime_history != _undefined)
          'uptime_history': (uptime_history as Input$stations_uptime_bool_exp?),
        if (website != _undefined)
          'website': (website as Input$String_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$stations_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$stations_bool_exp<
                          Input$stations_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$stations_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$stations_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$stations_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$stations_bool_exp<
                          Input$stations_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$stations_bool_exp(
                e,
                (i) => i,
              )))?.toList());

  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get description {
    final local$description = _instance.description;
    return local$description == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$description, (e) => call(description: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get description_action_title {
    final local$description_action_title = _instance.description_action_title;
    return local$description_action_title == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$description_action_title,
            (e) => call(description_action_title: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get description_link {
    final local$description_link = _instance.description_link;
    return local$description_link == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$description_link, (e) => call(description_link: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get email {
    final local$email = _instance.email;
    return local$email == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$email, (e) => call(email: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get facebook_page_id {
    final local$facebook_page_id = _instance.facebook_page_id;
    return local$facebook_page_id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$facebook_page_id, (e) => call(facebook_page_id: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get feature_latest_post {
    final local$feature_latest_post = _instance.feature_latest_post;
    return local$feature_latest_post == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$feature_latest_post, (e) => call(feature_latest_post: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get hls_stream_url {
    final local$hls_stream_url = _instance.hls_stream_url;
    return local$hls_stream_url == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$hls_stream_url, (e) => call(hls_stream_url: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get latest_station_now_playing_id {
    final local$latest_station_now_playing_id =
        _instance.latest_station_now_playing_id;
    return local$latest_station_now_playing_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$latest_station_now_playing_id,
            (e) => call(latest_station_now_playing_id: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get latest_station_uptime_id {
    final local$latest_station_uptime_id = _instance.latest_station_uptime_id;
    return local$latest_station_uptime_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$latest_station_uptime_id,
            (e) => call(latest_station_uptime_id: e));
  }

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get now_playing {
    final local$now_playing = _instance.now_playing;
    return local$now_playing == null
        ? CopyWith$Input$stations_now_playing_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_now_playing_bool_exp(
            local$now_playing, (e) => call(now_playing: e));
  }

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get now_playing_history {
    final local$now_playing_history = _instance.now_playing_history;
    return local$now_playing_history == null
        ? CopyWith$Input$stations_now_playing_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_now_playing_bool_exp(
            local$now_playing_history, (e) => call(now_playing_history: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get order {
    final local$order = _instance.order;
    return local$order == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$order, (e) => call(order: e));
  }

  CopyWith$Input$posts_bool_exp<TRes> get posts {
    final local$posts = _instance.posts;
    return local$posts == null
        ? CopyWith$Input$posts_bool_exp.stub(_then(_instance))
        : CopyWith$Input$posts_bool_exp(local$posts, (e) => call(posts: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get proxy_stream_url {
    final local$proxy_stream_url = _instance.proxy_stream_url;
    return local$proxy_stream_url == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$proxy_stream_url, (e) => call(proxy_stream_url: e));
  }

  CopyWith$Input$reviews_bool_exp<TRes> get reviews {
    final local$reviews = _instance.reviews;
    return local$reviews == null
        ? CopyWith$Input$reviews_bool_exp.stub(_then(_instance))
        : CopyWith$Input$reviews_bool_exp(
            local$reviews, (e) => call(reviews: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get rss_feed {
    final local$rss_feed = _instance.rss_feed;
    return local$rss_feed == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$rss_feed, (e) => call(rss_feed: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get slug {
    final local$slug = _instance.slug;
    return local$slug == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$slug, (e) => call(slug: e));
  }

  CopyWith$Input$station_to_station_group_bool_exp<TRes>
      get station_to_station_groups {
    final local$station_to_station_groups = _instance.station_to_station_groups;
    return local$station_to_station_groups == null
        ? CopyWith$Input$station_to_station_group_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_bool_exp(
            local$station_to_station_groups,
            (e) => call(station_to_station_groups: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get stream_url {
    final local$stream_url = _instance.stream_url;
    return local$stream_url == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$stream_url, (e) => call(stream_url: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail {
    final local$thumbnail = _instance.thumbnail;
    return local$thumbnail == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$thumbnail, (e) => call(thumbnail: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url {
    final local$thumbnail_url = _instance.thumbnail_url;
    return local$thumbnail_url == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$thumbnail_url, (e) => call(thumbnail_url: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$title, (e) => call(title: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get total_listeners {
    final local$total_listeners = _instance.total_listeners;
    return local$total_listeners == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$total_listeners, (e) => call(total_listeners: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }

  CopyWith$Input$stations_uptime_bool_exp<TRes> get uptime {
    final local$uptime = _instance.uptime;
    return local$uptime == null
        ? CopyWith$Input$stations_uptime_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_bool_exp(
            local$uptime, (e) => call(uptime: e));
  }

  CopyWith$Input$stations_uptime_bool_exp<TRes> get uptime_history {
    final local$uptime_history = _instance.uptime_history;
    return local$uptime_history == null
        ? CopyWith$Input$stations_uptime_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_bool_exp(
            local$uptime_history, (e) => call(uptime_history: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get website {
    final local$website = _instance.website;
    return local$website == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$website, (e) => call(website: e));
  }
}

class _CopyWithStubImpl$Input$stations_bool_exp<TRes>
    implements CopyWith$Input$stations_bool_exp<TRes> {
  _CopyWithStubImpl$Input$stations_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$stations_bool_exp>? $_and,
    Input$stations_bool_exp? $_not,
    List<Input$stations_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$String_comparison_exp? description,
    Input$String_comparison_exp? description_action_title,
    Input$String_comparison_exp? description_link,
    Input$String_comparison_exp? email,
    Input$String_comparison_exp? facebook_page_id,
    Input$Boolean_comparison_exp? feature_latest_post,
    Input$String_comparison_exp? hls_stream_url,
    Input$Int_comparison_exp? id,
    Input$Int_comparison_exp? latest_station_now_playing_id,
    Input$Int_comparison_exp? latest_station_uptime_id,
    Input$stations_now_playing_bool_exp? now_playing,
    Input$stations_now_playing_bool_exp? now_playing_history,
    Input$Int_comparison_exp? order,
    Input$posts_bool_exp? posts,
    Input$String_comparison_exp? proxy_stream_url,
    Input$reviews_bool_exp? reviews,
    Input$String_comparison_exp? rss_feed,
    Input$String_comparison_exp? slug,
    Input$station_to_station_group_bool_exp? station_to_station_groups,
    Input$String_comparison_exp? stream_url,
    Input$String_comparison_exp? thumbnail,
    Input$String_comparison_exp? thumbnail_url,
    Input$String_comparison_exp? title,
    Input$Int_comparison_exp? total_listeners,
    Input$timestamptz_comparison_exp? updated_at,
    Input$stations_uptime_bool_exp? uptime,
    Input$stations_uptime_bool_exp? uptime_history,
    Input$String_comparison_exp? website,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$stations_bool_exp<TRes> get $_not =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get description =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get description_action_title =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get description_link =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get email =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get facebook_page_id =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$Boolean_comparison_exp<TRes> get feature_latest_post =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get hls_stream_url =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get latest_station_now_playing_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get latest_station_uptime_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get now_playing =>
      CopyWith$Input$stations_now_playing_bool_exp.stub(_res);

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get now_playing_history =>
      CopyWith$Input$stations_now_playing_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get order =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$posts_bool_exp<TRes> get posts =>
      CopyWith$Input$posts_bool_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get proxy_stream_url =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$reviews_bool_exp<TRes> get reviews =>
      CopyWith$Input$reviews_bool_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get rss_feed =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get slug =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$station_to_station_group_bool_exp<TRes>
      get station_to_station_groups =>
          CopyWith$Input$station_to_station_group_bool_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get stream_url =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get thumbnail_url =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get title =>
      CopyWith$Input$String_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get total_listeners =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);

  CopyWith$Input$stations_uptime_bool_exp<TRes> get uptime =>
      CopyWith$Input$stations_uptime_bool_exp.stub(_res);

  CopyWith$Input$stations_uptime_bool_exp<TRes> get uptime_history =>
      CopyWith$Input$stations_uptime_bool_exp.stub(_res);

  CopyWith$Input$String_comparison_exp<TRes> get website =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$stations_max_order_by {
  factory Input$stations_max_order_by({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? updated_at,
    Enum$order_by? website,
  }) =>
      Input$stations_max_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (description != null) r'description': description,
        if (description_action_title != null)
          r'description_action_title': description_action_title,
        if (description_link != null) r'description_link': description_link,
        if (email != null) r'email': email,
        if (facebook_page_id != null) r'facebook_page_id': facebook_page_id,
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
        if (rss_feed != null) r'rss_feed': rss_feed,
        if (slug != null) r'slug': slug,
        if (stream_url != null) r'stream_url': stream_url,
        if (thumbnail != null) r'thumbnail': thumbnail,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
        if (title != null) r'title': title,
        if (updated_at != null) r'updated_at': updated_at,
        if (website != null) r'website': website,
      });

  Input$stations_max_order_by._(this._$data);

  factory Input$stations_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : fromJson$Enum$order_by((l$description as String));
    }
    if (data.containsKey('description_action_title')) {
      final l$description_action_title = data['description_action_title'];
      result$data['description_action_title'] =
          l$description_action_title == null
              ? null
              : fromJson$Enum$order_by((l$description_action_title as String));
    }
    if (data.containsKey('description_link')) {
      final l$description_link = data['description_link'];
      result$data['description_link'] = l$description_link == null
          ? null
          : fromJson$Enum$order_by((l$description_link as String));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = data['facebook_page_id'];
      result$data['facebook_page_id'] = l$facebook_page_id == null
          ? null
          : fromJson$Enum$order_by((l$facebook_page_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('rss_feed')) {
      final l$rss_feed = data['rss_feed'];
      result$data['rss_feed'] = l$rss_feed == null
          ? null
          : fromJson$Enum$order_by((l$rss_feed as String));
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] =
          l$slug == null ? null : fromJson$Enum$order_by((l$slug as String));
    }
    if (data.containsKey('stream_url')) {
      final l$stream_url = data['stream_url'];
      result$data['stream_url'] = l$stream_url == null
          ? null
          : fromJson$Enum$order_by((l$stream_url as String));
    }
    if (data.containsKey('thumbnail')) {
      final l$thumbnail = data['thumbnail'];
      result$data['thumbnail'] = l$thumbnail == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail as String));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail_url as String));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] =
          l$title == null ? null : fromJson$Enum$order_by((l$title as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('website')) {
      final l$website = data['website'];
      result$data['website'] = l$website == null
          ? null
          : fromJson$Enum$order_by((l$website as String));
    }
    return Input$stations_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);

  Enum$order_by? get description => (_$data['description'] as Enum$order_by?);

  Enum$order_by? get description_action_title =>
      (_$data['description_action_title'] as Enum$order_by?);

  Enum$order_by? get description_link =>
      (_$data['description_link'] as Enum$order_by?);

  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);

  Enum$order_by? get facebook_page_id =>
      (_$data['facebook_page_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get rss_feed => (_$data['rss_feed'] as Enum$order_by?);

  Enum$order_by? get slug => (_$data['slug'] as Enum$order_by?);

  Enum$order_by? get stream_url => (_$data['stream_url'] as Enum$order_by?);

  Enum$order_by? get thumbnail => (_$data['thumbnail'] as Enum$order_by?);

  Enum$order_by? get thumbnail_url =>
      (_$data['thumbnail_url'] as Enum$order_by?);

  Enum$order_by? get title => (_$data['title'] as Enum$order_by?);

  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);

  Enum$order_by? get website => (_$data['website'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] =
          l$description == null ? null : toJson$Enum$order_by(l$description);
    }
    if (_$data.containsKey('description_action_title')) {
      final l$description_action_title = description_action_title;
      result$data['description_action_title'] =
          l$description_action_title == null
              ? null
              : toJson$Enum$order_by(l$description_action_title);
    }
    if (_$data.containsKey('description_link')) {
      final l$description_link = description_link;
      result$data['description_link'] = l$description_link == null
          ? null
          : toJson$Enum$order_by(l$description_link);
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = facebook_page_id;
      result$data['facebook_page_id'] = l$facebook_page_id == null
          ? null
          : toJson$Enum$order_by(l$facebook_page_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('rss_feed')) {
      final l$rss_feed = rss_feed;
      result$data['rss_feed'] =
          l$rss_feed == null ? null : toJson$Enum$order_by(l$rss_feed);
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] =
          l$slug == null ? null : toJson$Enum$order_by(l$slug);
    }
    if (_$data.containsKey('stream_url')) {
      final l$stream_url = stream_url;
      result$data['stream_url'] =
          l$stream_url == null ? null : toJson$Enum$order_by(l$stream_url);
    }
    if (_$data.containsKey('thumbnail')) {
      final l$thumbnail = thumbnail;
      result$data['thumbnail'] =
          l$thumbnail == null ? null : toJson$Enum$order_by(l$thumbnail);
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : toJson$Enum$order_by(l$thumbnail_url);
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] =
          l$title == null ? null : toJson$Enum$order_by(l$title);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('website')) {
      final l$website = website;
      result$data['website'] =
          l$website == null ? null : toJson$Enum$order_by(l$website);
    }
    return result$data;
  }

  CopyWith$Input$stations_max_order_by<Input$stations_max_order_by>
      get copyWith => CopyWith$Input$stations_max_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$description_action_title = description_action_title;
    final lOther$description_action_title = other.description_action_title;
    if (_$data.containsKey('description_action_title') !=
        other._$data.containsKey('description_action_title')) {
      return false;
    }
    if (l$description_action_title != lOther$description_action_title) {
      return false;
    }
    final l$description_link = description_link;
    final lOther$description_link = other.description_link;
    if (_$data.containsKey('description_link') !=
        other._$data.containsKey('description_link')) {
      return false;
    }
    if (l$description_link != lOther$description_link) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$facebook_page_id = facebook_page_id;
    final lOther$facebook_page_id = other.facebook_page_id;
    if (_$data.containsKey('facebook_page_id') !=
        other._$data.containsKey('facebook_page_id')) {
      return false;
    }
    if (l$facebook_page_id != lOther$facebook_page_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$rss_feed = rss_feed;
    final lOther$rss_feed = other.rss_feed;
    if (_$data.containsKey('rss_feed') !=
        other._$data.containsKey('rss_feed')) {
      return false;
    }
    if (l$rss_feed != lOther$rss_feed) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    final l$stream_url = stream_url;
    final lOther$stream_url = other.stream_url;
    if (_$data.containsKey('stream_url') !=
        other._$data.containsKey('stream_url')) {
      return false;
    }
    if (l$stream_url != lOther$stream_url) {
      return false;
    }
    final l$thumbnail = thumbnail;
    final lOther$thumbnail = other.thumbnail;
    if (_$data.containsKey('thumbnail') !=
        other._$data.containsKey('thumbnail')) {
      return false;
    }
    if (l$thumbnail != lOther$thumbnail) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$website = website;
    final lOther$website = other.website;
    if (_$data.containsKey('website') != other._$data.containsKey('website')) {
      return false;
    }
    if (l$website != lOther$website) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$description = description;
    final l$description_action_title = description_action_title;
    final l$description_link = description_link;
    final l$email = email;
    final l$facebook_page_id = facebook_page_id;
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    final l$rss_feed = rss_feed;
    final l$slug = slug;
    final l$stream_url = stream_url;
    final l$thumbnail = thumbnail;
    final l$thumbnail_url = thumbnail_url;
    final l$title = title;
    final l$updated_at = updated_at;
    final l$website = website;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('description_action_title')
          ? l$description_action_title
          : const {},
      _$data.containsKey('description_link') ? l$description_link : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('facebook_page_id') ? l$facebook_page_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('rss_feed') ? l$rss_feed : const {},
      _$data.containsKey('slug') ? l$slug : const {},
      _$data.containsKey('stream_url') ? l$stream_url : const {},
      _$data.containsKey('thumbnail') ? l$thumbnail : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('website') ? l$website : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_max_order_by<TRes> {
  factory CopyWith$Input$stations_max_order_by(
    Input$stations_max_order_by instance,
    TRes Function(Input$stations_max_order_by) then,
  ) = _CopyWithImpl$Input$stations_max_order_by;

  factory CopyWith$Input$stations_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_max_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? updated_at,
    Enum$order_by? website,
  });
}

class _CopyWithImpl$Input$stations_max_order_by<TRes>
    implements CopyWith$Input$stations_max_order_by<TRes> {
  _CopyWithImpl$Input$stations_max_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_max_order_by _instance;

  final TRes Function(Input$stations_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? description = _undefined,
    Object? description_action_title = _undefined,
    Object? description_link = _undefined,
    Object? email = _undefined,
    Object? facebook_page_id = _undefined,
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
    Object? rss_feed = _undefined,
    Object? slug = _undefined,
    Object? stream_url = _undefined,
    Object? thumbnail = _undefined,
    Object? thumbnail_url = _undefined,
    Object? title = _undefined,
    Object? updated_at = _undefined,
    Object? website = _undefined,
  }) =>
      _then(Input$stations_max_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (description != _undefined)
          'description': (description as Enum$order_by?),
        if (description_action_title != _undefined)
          'description_action_title':
              (description_action_title as Enum$order_by?),
        if (description_link != _undefined)
          'description_link': (description_link as Enum$order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (facebook_page_id != _undefined)
          'facebook_page_id': (facebook_page_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (rss_feed != _undefined) 'rss_feed': (rss_feed as Enum$order_by?),
        if (slug != _undefined) 'slug': (slug as Enum$order_by?),
        if (stream_url != _undefined)
          'stream_url': (stream_url as Enum$order_by?),
        if (thumbnail != _undefined) 'thumbnail': (thumbnail as Enum$order_by?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Enum$order_by?),
        if (title != _undefined) 'title': (title as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (website != _undefined) 'website': (website as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_max_order_by<TRes>
    implements CopyWith$Input$stations_max_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? updated_at,
    Enum$order_by? website,
  }) =>
      _res;
}

class Input$stations_min_order_by {
  factory Input$stations_min_order_by({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? updated_at,
    Enum$order_by? website,
  }) =>
      Input$stations_min_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (description != null) r'description': description,
        if (description_action_title != null)
          r'description_action_title': description_action_title,
        if (description_link != null) r'description_link': description_link,
        if (email != null) r'email': email,
        if (facebook_page_id != null) r'facebook_page_id': facebook_page_id,
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
        if (rss_feed != null) r'rss_feed': rss_feed,
        if (slug != null) r'slug': slug,
        if (stream_url != null) r'stream_url': stream_url,
        if (thumbnail != null) r'thumbnail': thumbnail,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
        if (title != null) r'title': title,
        if (updated_at != null) r'updated_at': updated_at,
        if (website != null) r'website': website,
      });

  Input$stations_min_order_by._(this._$data);

  factory Input$stations_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : fromJson$Enum$order_by((l$description as String));
    }
    if (data.containsKey('description_action_title')) {
      final l$description_action_title = data['description_action_title'];
      result$data['description_action_title'] =
          l$description_action_title == null
              ? null
              : fromJson$Enum$order_by((l$description_action_title as String));
    }
    if (data.containsKey('description_link')) {
      final l$description_link = data['description_link'];
      result$data['description_link'] = l$description_link == null
          ? null
          : fromJson$Enum$order_by((l$description_link as String));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = data['facebook_page_id'];
      result$data['facebook_page_id'] = l$facebook_page_id == null
          ? null
          : fromJson$Enum$order_by((l$facebook_page_id as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('rss_feed')) {
      final l$rss_feed = data['rss_feed'];
      result$data['rss_feed'] = l$rss_feed == null
          ? null
          : fromJson$Enum$order_by((l$rss_feed as String));
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] =
          l$slug == null ? null : fromJson$Enum$order_by((l$slug as String));
    }
    if (data.containsKey('stream_url')) {
      final l$stream_url = data['stream_url'];
      result$data['stream_url'] = l$stream_url == null
          ? null
          : fromJson$Enum$order_by((l$stream_url as String));
    }
    if (data.containsKey('thumbnail')) {
      final l$thumbnail = data['thumbnail'];
      result$data['thumbnail'] = l$thumbnail == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail as String));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail_url as String));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] =
          l$title == null ? null : fromJson$Enum$order_by((l$title as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('website')) {
      final l$website = data['website'];
      result$data['website'] = l$website == null
          ? null
          : fromJson$Enum$order_by((l$website as String));
    }
    return Input$stations_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);

  Enum$order_by? get description => (_$data['description'] as Enum$order_by?);

  Enum$order_by? get description_action_title =>
      (_$data['description_action_title'] as Enum$order_by?);

  Enum$order_by? get description_link =>
      (_$data['description_link'] as Enum$order_by?);

  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);

  Enum$order_by? get facebook_page_id =>
      (_$data['facebook_page_id'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Enum$order_by? get rss_feed => (_$data['rss_feed'] as Enum$order_by?);

  Enum$order_by? get slug => (_$data['slug'] as Enum$order_by?);

  Enum$order_by? get stream_url => (_$data['stream_url'] as Enum$order_by?);

  Enum$order_by? get thumbnail => (_$data['thumbnail'] as Enum$order_by?);

  Enum$order_by? get thumbnail_url =>
      (_$data['thumbnail_url'] as Enum$order_by?);

  Enum$order_by? get title => (_$data['title'] as Enum$order_by?);

  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);

  Enum$order_by? get website => (_$data['website'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] =
          l$description == null ? null : toJson$Enum$order_by(l$description);
    }
    if (_$data.containsKey('description_action_title')) {
      final l$description_action_title = description_action_title;
      result$data['description_action_title'] =
          l$description_action_title == null
              ? null
              : toJson$Enum$order_by(l$description_action_title);
    }
    if (_$data.containsKey('description_link')) {
      final l$description_link = description_link;
      result$data['description_link'] = l$description_link == null
          ? null
          : toJson$Enum$order_by(l$description_link);
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = facebook_page_id;
      result$data['facebook_page_id'] = l$facebook_page_id == null
          ? null
          : toJson$Enum$order_by(l$facebook_page_id);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('rss_feed')) {
      final l$rss_feed = rss_feed;
      result$data['rss_feed'] =
          l$rss_feed == null ? null : toJson$Enum$order_by(l$rss_feed);
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] =
          l$slug == null ? null : toJson$Enum$order_by(l$slug);
    }
    if (_$data.containsKey('stream_url')) {
      final l$stream_url = stream_url;
      result$data['stream_url'] =
          l$stream_url == null ? null : toJson$Enum$order_by(l$stream_url);
    }
    if (_$data.containsKey('thumbnail')) {
      final l$thumbnail = thumbnail;
      result$data['thumbnail'] =
          l$thumbnail == null ? null : toJson$Enum$order_by(l$thumbnail);
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : toJson$Enum$order_by(l$thumbnail_url);
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] =
          l$title == null ? null : toJson$Enum$order_by(l$title);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('website')) {
      final l$website = website;
      result$data['website'] =
          l$website == null ? null : toJson$Enum$order_by(l$website);
    }
    return result$data;
  }

  CopyWith$Input$stations_min_order_by<Input$stations_min_order_by>
      get copyWith => CopyWith$Input$stations_min_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$description_action_title = description_action_title;
    final lOther$description_action_title = other.description_action_title;
    if (_$data.containsKey('description_action_title') !=
        other._$data.containsKey('description_action_title')) {
      return false;
    }
    if (l$description_action_title != lOther$description_action_title) {
      return false;
    }
    final l$description_link = description_link;
    final lOther$description_link = other.description_link;
    if (_$data.containsKey('description_link') !=
        other._$data.containsKey('description_link')) {
      return false;
    }
    if (l$description_link != lOther$description_link) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$facebook_page_id = facebook_page_id;
    final lOther$facebook_page_id = other.facebook_page_id;
    if (_$data.containsKey('facebook_page_id') !=
        other._$data.containsKey('facebook_page_id')) {
      return false;
    }
    if (l$facebook_page_id != lOther$facebook_page_id) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$rss_feed = rss_feed;
    final lOther$rss_feed = other.rss_feed;
    if (_$data.containsKey('rss_feed') !=
        other._$data.containsKey('rss_feed')) {
      return false;
    }
    if (l$rss_feed != lOther$rss_feed) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    final l$stream_url = stream_url;
    final lOther$stream_url = other.stream_url;
    if (_$data.containsKey('stream_url') !=
        other._$data.containsKey('stream_url')) {
      return false;
    }
    if (l$stream_url != lOther$stream_url) {
      return false;
    }
    final l$thumbnail = thumbnail;
    final lOther$thumbnail = other.thumbnail;
    if (_$data.containsKey('thumbnail') !=
        other._$data.containsKey('thumbnail')) {
      return false;
    }
    if (l$thumbnail != lOther$thumbnail) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$website = website;
    final lOther$website = other.website;
    if (_$data.containsKey('website') != other._$data.containsKey('website')) {
      return false;
    }
    if (l$website != lOther$website) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$description = description;
    final l$description_action_title = description_action_title;
    final l$description_link = description_link;
    final l$email = email;
    final l$facebook_page_id = facebook_page_id;
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    final l$rss_feed = rss_feed;
    final l$slug = slug;
    final l$stream_url = stream_url;
    final l$thumbnail = thumbnail;
    final l$thumbnail_url = thumbnail_url;
    final l$title = title;
    final l$updated_at = updated_at;
    final l$website = website;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('description_action_title')
          ? l$description_action_title
          : const {},
      _$data.containsKey('description_link') ? l$description_link : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('facebook_page_id') ? l$facebook_page_id : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('rss_feed') ? l$rss_feed : const {},
      _$data.containsKey('slug') ? l$slug : const {},
      _$data.containsKey('stream_url') ? l$stream_url : const {},
      _$data.containsKey('thumbnail') ? l$thumbnail : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('website') ? l$website : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_min_order_by<TRes> {
  factory CopyWith$Input$stations_min_order_by(
    Input$stations_min_order_by instance,
    TRes Function(Input$stations_min_order_by) then,
  ) = _CopyWithImpl$Input$stations_min_order_by;

  factory CopyWith$Input$stations_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_min_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? updated_at,
    Enum$order_by? website,
  });
}

class _CopyWithImpl$Input$stations_min_order_by<TRes>
    implements CopyWith$Input$stations_min_order_by<TRes> {
  _CopyWithImpl$Input$stations_min_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_min_order_by _instance;

  final TRes Function(Input$stations_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? description = _undefined,
    Object? description_action_title = _undefined,
    Object? description_link = _undefined,
    Object? email = _undefined,
    Object? facebook_page_id = _undefined,
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
    Object? rss_feed = _undefined,
    Object? slug = _undefined,
    Object? stream_url = _undefined,
    Object? thumbnail = _undefined,
    Object? thumbnail_url = _undefined,
    Object? title = _undefined,
    Object? updated_at = _undefined,
    Object? website = _undefined,
  }) =>
      _then(Input$stations_min_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (description != _undefined)
          'description': (description as Enum$order_by?),
        if (description_action_title != _undefined)
          'description_action_title':
              (description_action_title as Enum$order_by?),
        if (description_link != _undefined)
          'description_link': (description_link as Enum$order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (facebook_page_id != _undefined)
          'facebook_page_id': (facebook_page_id as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (rss_feed != _undefined) 'rss_feed': (rss_feed as Enum$order_by?),
        if (slug != _undefined) 'slug': (slug as Enum$order_by?),
        if (stream_url != _undefined)
          'stream_url': (stream_url as Enum$order_by?),
        if (thumbnail != _undefined) 'thumbnail': (thumbnail as Enum$order_by?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Enum$order_by?),
        if (title != _undefined) 'title': (title as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (website != _undefined) 'website': (website as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_min_order_by<TRes>
    implements CopyWith$Input$stations_min_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? updated_at,
    Enum$order_by? website,
  }) =>
      _res;
}

class Input$stations_now_playing_aggregate_order_by {
  factory Input$stations_now_playing_aggregate_order_by({
    Input$stations_now_playing_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_now_playing_max_order_by? max,
    Input$stations_now_playing_min_order_by? min,
    Input$stations_now_playing_stddev_order_by? stddev,
    Input$stations_now_playing_stddev_pop_order_by? stddev_pop,
    Input$stations_now_playing_stddev_samp_order_by? stddev_samp,
    Input$stations_now_playing_sum_order_by? sum,
    Input$stations_now_playing_var_pop_order_by? var_pop,
    Input$stations_now_playing_var_samp_order_by? var_samp,
    Input$stations_now_playing_variance_order_by? variance,
  }) =>
      Input$stations_now_playing_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$stations_now_playing_aggregate_order_by._(this._$data);

  factory Input$stations_now_playing_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$stations_now_playing_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$stations_now_playing_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$stations_now_playing_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$stations_now_playing_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$stations_now_playing_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$stations_now_playing_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$stations_now_playing_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$stations_now_playing_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$stations_now_playing_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$stations_now_playing_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$stations_now_playing_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$stations_now_playing_avg_order_by? get avg =>
      (_$data['avg'] as Input$stations_now_playing_avg_order_by?);

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);

  Input$stations_now_playing_max_order_by? get max =>
      (_$data['max'] as Input$stations_now_playing_max_order_by?);

  Input$stations_now_playing_min_order_by? get min =>
      (_$data['min'] as Input$stations_now_playing_min_order_by?);

  Input$stations_now_playing_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$stations_now_playing_stddev_order_by?);

  Input$stations_now_playing_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$stations_now_playing_stddev_pop_order_by?);

  Input$stations_now_playing_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp']
          as Input$stations_now_playing_stddev_samp_order_by?);

  Input$stations_now_playing_sum_order_by? get sum =>
      (_$data['sum'] as Input$stations_now_playing_sum_order_by?);

  Input$stations_now_playing_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$stations_now_playing_var_pop_order_by?);

  Input$stations_now_playing_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$stations_now_playing_var_samp_order_by?);

  Input$stations_now_playing_variance_order_by? get variance =>
      (_$data['variance'] as Input$stations_now_playing_variance_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_aggregate_order_by<
          Input$stations_now_playing_aggregate_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_aggregate_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_aggregate_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_aggregate_order_by(
    Input$stations_now_playing_aggregate_order_by instance,
    TRes Function(Input$stations_now_playing_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_aggregate_order_by;

  factory CopyWith$Input$stations_now_playing_aggregate_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_aggregate_order_by;

  TRes call({
    Input$stations_now_playing_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_now_playing_max_order_by? max,
    Input$stations_now_playing_min_order_by? min,
    Input$stations_now_playing_stddev_order_by? stddev,
    Input$stations_now_playing_stddev_pop_order_by? stddev_pop,
    Input$stations_now_playing_stddev_samp_order_by? stddev_samp,
    Input$stations_now_playing_sum_order_by? sum,
    Input$stations_now_playing_var_pop_order_by? var_pop,
    Input$stations_now_playing_var_samp_order_by? var_samp,
    Input$stations_now_playing_variance_order_by? variance,
  });
  CopyWith$Input$stations_now_playing_avg_order_by<TRes> get avg;
  CopyWith$Input$stations_now_playing_max_order_by<TRes> get max;
  CopyWith$Input$stations_now_playing_min_order_by<TRes> get min;
  CopyWith$Input$stations_now_playing_stddev_order_by<TRes> get stddev;
  CopyWith$Input$stations_now_playing_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$stations_now_playing_stddev_samp_order_by<TRes>
      get stddev_samp;
  CopyWith$Input$stations_now_playing_sum_order_by<TRes> get sum;
  CopyWith$Input$stations_now_playing_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$stations_now_playing_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$stations_now_playing_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$stations_now_playing_aggregate_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_aggregate_order_by _instance;

  final TRes Function(Input$stations_now_playing_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$stations_now_playing_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined)
          'avg': (avg as Input$stations_now_playing_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$stations_now_playing_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$stations_now_playing_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$stations_now_playing_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop':
              (stddev_pop as Input$stations_now_playing_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp':
              (stddev_samp as Input$stations_now_playing_stddev_samp_order_by?),
        if (sum != _undefined)
          'sum': (sum as Input$stations_now_playing_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$stations_now_playing_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp':
              (var_samp as Input$stations_now_playing_var_samp_order_by?),
        if (variance != _undefined)
          'variance':
              (variance as Input$stations_now_playing_variance_order_by?),
      }));

  CopyWith$Input$stations_now_playing_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$stations_now_playing_avg_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_avg_order_by(
            local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$stations_now_playing_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$stations_now_playing_max_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$stations_now_playing_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$stations_now_playing_min_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_min_order_by(
            local$min, (e) => call(min: e));
  }

  CopyWith$Input$stations_now_playing_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$stations_now_playing_stddev_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$stations_now_playing_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$stations_now_playing_stddev_pop_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$stations_now_playing_stddev_samp_order_by<TRes>
      get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$stations_now_playing_stddev_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$stations_now_playing_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$stations_now_playing_sum_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_sum_order_by(
            local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$stations_now_playing_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$stations_now_playing_var_pop_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$stations_now_playing_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$stations_now_playing_var_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$stations_now_playing_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$stations_now_playing_variance_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$stations_now_playing_aggregate_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$stations_now_playing_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_now_playing_max_order_by? max,
    Input$stations_now_playing_min_order_by? min,
    Input$stations_now_playing_stddev_order_by? stddev,
    Input$stations_now_playing_stddev_pop_order_by? stddev_pop,
    Input$stations_now_playing_stddev_samp_order_by? stddev_samp,
    Input$stations_now_playing_sum_order_by? sum,
    Input$stations_now_playing_var_pop_order_by? var_pop,
    Input$stations_now_playing_var_samp_order_by? var_samp,
    Input$stations_now_playing_variance_order_by? variance,
  }) =>
      _res;

  CopyWith$Input$stations_now_playing_avg_order_by<TRes> get avg =>
      CopyWith$Input$stations_now_playing_avg_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_max_order_by<TRes> get max =>
      CopyWith$Input$stations_now_playing_max_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_min_order_by<TRes> get min =>
      CopyWith$Input$stations_now_playing_min_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$stations_now_playing_stddev_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_stddev_pop_order_by<TRes>
      get stddev_pop =>
          CopyWith$Input$stations_now_playing_stddev_pop_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_stddev_samp_order_by<TRes>
      get stddev_samp =>
          CopyWith$Input$stations_now_playing_stddev_samp_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_sum_order_by<TRes> get sum =>
      CopyWith$Input$stations_now_playing_sum_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$stations_now_playing_var_pop_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$stations_now_playing_var_samp_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_variance_order_by<TRes> get variance =>
      CopyWith$Input$stations_now_playing_variance_order_by.stub(_res);
}

class Input$stations_now_playing_avg_order_by {
  factory Input$stations_now_playing_avg_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_avg_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_avg_order_by._(this._$data);

  factory Input$stations_now_playing_avg_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_avg_order_by<
          Input$stations_now_playing_avg_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_avg_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_avg_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_avg_order_by(
    Input$stations_now_playing_avg_order_by instance,
    TRes Function(Input$stations_now_playing_avg_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_avg_order_by;

  factory CopyWith$Input$stations_now_playing_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_avg_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_avg_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_avg_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_avg_order_by _instance;

  final TRes Function(Input$stations_now_playing_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_avg_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_avg_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_now_playing_bool_exp {
  factory Input$stations_now_playing_bool_exp({
    List<Input$stations_now_playing_bool_exp>? $_and,
    Input$stations_now_playing_bool_exp? $_not,
    List<Input$stations_now_playing_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$songs_bool_exp? song,
    Input$Int_comparison_exp? song_id,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$stations_bool_exp? stations,
    Input$timestamptz_comparison_exp? timestamp,
  }) =>
      Input$stations_now_playing_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (id != null) r'id': id,
        if (song != null) r'song': song,
        if (song_id != null) r'song_id': song_id,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (stations != null) r'stations': stations,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_now_playing_bool_exp._(this._$data);

  factory Input$stations_now_playing_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$stations_now_playing_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$stations_now_playing_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$stations_now_playing_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('song')) {
      final l$song = data['song'];
      result$data['song'] = l$song == null
          ? null
          : Input$songs_bool_exp.fromJson((l$song as Map<String, dynamic>));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$song_id as Map<String, dynamic>));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_bool_exp.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$station_id as Map<String, dynamic>));
    }
    if (data.containsKey('stations')) {
      final l$stations = data['stations'];
      result$data['stations'] = l$stations == null
          ? null
          : Input$stations_bool_exp.fromJson(
              (l$stations as Map<String, dynamic>));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$timestamp as Map<String, dynamic>));
    }
    return Input$stations_now_playing_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$stations_now_playing_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$stations_now_playing_bool_exp>?);

  Input$stations_now_playing_bool_exp? get $_not =>
      (_$data['_not'] as Input$stations_now_playing_bool_exp?);

  List<Input$stations_now_playing_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$stations_now_playing_bool_exp>?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$songs_bool_exp? get song => (_$data['song'] as Input$songs_bool_exp?);

  Input$Int_comparison_exp? get song_id =>
      (_$data['song_id'] as Input$Int_comparison_exp?);

  Input$stations_bool_exp? get station =>
      (_$data['station'] as Input$stations_bool_exp?);

  Input$Int_comparison_exp? get station_id =>
      (_$data['station_id'] as Input$Int_comparison_exp?);

  Input$stations_bool_exp? get stations =>
      (_$data['stations'] as Input$stations_bool_exp?);

  Input$timestamptz_comparison_exp? get timestamp =>
      (_$data['timestamp'] as Input$timestamptz_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('song')) {
      final l$song = song;
      result$data['song'] = l$song?.toJson();
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] = l$song_id?.toJson();
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id?.toJson();
    }
    if (_$data.containsKey('stations')) {
      final l$stations = stations;
      result$data['stations'] = l$stations?.toJson();
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] = l$timestamp?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_bool_exp<
          Input$stations_now_playing_bool_exp>
      get copyWith => CopyWith$Input$stations_now_playing_bool_exp(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song = song;
    final lOther$song = other.song;
    if (_$data.containsKey('song') != other._$data.containsKey('song')) {
      return false;
    }
    if (l$song != lOther$song) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$stations = stations;
    final lOther$stations = other.stations;
    if (_$data.containsKey('stations') !=
        other._$data.containsKey('stations')) {
      return false;
    }
    if (l$stations != lOther$stations) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$id = id;
    final l$song = song;
    final l$song_id = song_id;
    final l$station = station;
    final l$station_id = station_id;
    final l$stations = stations;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song') ? l$song : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('stations') ? l$stations : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_bool_exp<TRes> {
  factory CopyWith$Input$stations_now_playing_bool_exp(
    Input$stations_now_playing_bool_exp instance,
    TRes Function(Input$stations_now_playing_bool_exp) then,
  ) = _CopyWithImpl$Input$stations_now_playing_bool_exp;

  factory CopyWith$Input$stations_now_playing_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_bool_exp;

  TRes call({
    List<Input$stations_now_playing_bool_exp>? $_and,
    Input$stations_now_playing_bool_exp? $_not,
    List<Input$stations_now_playing_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$songs_bool_exp? song,
    Input$Int_comparison_exp? song_id,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$stations_bool_exp? stations,
    Input$timestamptz_comparison_exp? timestamp,
  });
  TRes $_and(
      Iterable<Input$stations_now_playing_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$stations_now_playing_bool_exp<
                      Input$stations_now_playing_bool_exp>>?)
          _fn);
  CopyWith$Input$stations_now_playing_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$stations_now_playing_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$stations_now_playing_bool_exp<
                      Input$stations_now_playing_bool_exp>>?)
          _fn);
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$songs_bool_exp<TRes> get song;
  CopyWith$Input$Int_comparison_exp<TRes> get song_id;
  CopyWith$Input$stations_bool_exp<TRes> get station;
  CopyWith$Input$Int_comparison_exp<TRes> get station_id;
  CopyWith$Input$stations_bool_exp<TRes> get stations;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get timestamp;
}

class _CopyWithImpl$Input$stations_now_playing_bool_exp<TRes>
    implements CopyWith$Input$stations_now_playing_bool_exp<TRes> {
  _CopyWithImpl$Input$stations_now_playing_bool_exp(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_bool_exp _instance;

  final TRes Function(Input$stations_now_playing_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? id = _undefined,
    Object? song = _undefined,
    Object? song_id = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? stations = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_now_playing_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$stations_now_playing_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$stations_now_playing_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$stations_now_playing_bool_exp>?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (song != _undefined) 'song': (song as Input$songs_bool_exp?),
        if (song_id != _undefined)
          'song_id': (song_id as Input$Int_comparison_exp?),
        if (station != _undefined)
          'station': (station as Input$stations_bool_exp?),
        if (station_id != _undefined)
          'station_id': (station_id as Input$Int_comparison_exp?),
        if (stations != _undefined)
          'stations': (stations as Input$stations_bool_exp?),
        if (timestamp != _undefined)
          'timestamp': (timestamp as Input$timestamptz_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$stations_now_playing_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$stations_now_playing_bool_exp<
                          Input$stations_now_playing_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$stations_now_playing_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$stations_now_playing_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_now_playing_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$stations_now_playing_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$stations_now_playing_bool_exp<
                          Input$stations_now_playing_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$stations_now_playing_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$songs_bool_exp<TRes> get song {
    final local$song = _instance.song;
    return local$song == null
        ? CopyWith$Input$songs_bool_exp.stub(_then(_instance))
        : CopyWith$Input$songs_bool_exp(local$song, (e) => call(song: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get song_id {
    final local$song_id = _instance.song_id;
    return local$song_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$song_id, (e) => call(song_id: e));
  }

  CopyWith$Input$stations_bool_exp<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(
            local$station, (e) => call(station: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get station_id {
    final local$station_id = _instance.station_id;
    return local$station_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$station_id, (e) => call(station_id: e));
  }

  CopyWith$Input$stations_bool_exp<TRes> get stations {
    final local$stations = _instance.stations;
    return local$stations == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(
            local$stations, (e) => call(stations: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get timestamp {
    final local$timestamp = _instance.timestamp;
    return local$timestamp == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$timestamp, (e) => call(timestamp: e));
  }
}

class _CopyWithStubImpl$Input$stations_now_playing_bool_exp<TRes>
    implements CopyWith$Input$stations_now_playing_bool_exp<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$stations_now_playing_bool_exp>? $_and,
    Input$stations_now_playing_bool_exp? $_not,
    List<Input$stations_now_playing_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$songs_bool_exp? song,
    Input$Int_comparison_exp? song_id,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$stations_bool_exp? stations,
    Input$timestamptz_comparison_exp? timestamp,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$stations_now_playing_bool_exp<TRes> get $_not =>
      CopyWith$Input$stations_now_playing_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$songs_bool_exp<TRes> get song =>
      CopyWith$Input$songs_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get song_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$stations_bool_exp<TRes> get station =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get station_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$stations_bool_exp<TRes> get stations =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  CopyWith$Input$timestamptz_comparison_exp<TRes> get timestamp =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$stations_now_playing_max_order_by {
  factory Input$stations_now_playing_max_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      Input$stations_now_playing_max_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_now_playing_max_order_by._(this._$data);

  factory Input$stations_now_playing_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : fromJson$Enum$order_by((l$timestamp as String));
    }
    return Input$stations_now_playing_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get timestamp => (_$data['timestamp'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] =
          l$timestamp == null ? null : toJson$Enum$order_by(l$timestamp);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_max_order_by<
          Input$stations_now_playing_max_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_max_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_max_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_max_order_by(
    Input$stations_now_playing_max_order_by instance,
    TRes Function(Input$stations_now_playing_max_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_max_order_by;

  factory CopyWith$Input$stations_now_playing_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_max_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  });
}

class _CopyWithImpl$Input$stations_now_playing_max_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_max_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_max_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_max_order_by _instance;

  final TRes Function(Input$stations_now_playing_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_now_playing_max_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (timestamp != _undefined) 'timestamp': (timestamp as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_max_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_max_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      _res;
}

class Input$stations_now_playing_min_order_by {
  factory Input$stations_now_playing_min_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      Input$stations_now_playing_min_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_now_playing_min_order_by._(this._$data);

  factory Input$stations_now_playing_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : fromJson$Enum$order_by((l$timestamp as String));
    }
    return Input$stations_now_playing_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get timestamp => (_$data['timestamp'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] =
          l$timestamp == null ? null : toJson$Enum$order_by(l$timestamp);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_min_order_by<
          Input$stations_now_playing_min_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_min_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_min_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_min_order_by(
    Input$stations_now_playing_min_order_by instance,
    TRes Function(Input$stations_now_playing_min_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_min_order_by;

  factory CopyWith$Input$stations_now_playing_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_min_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  });
}

class _CopyWithImpl$Input$stations_now_playing_min_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_min_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_min_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_min_order_by _instance;

  final TRes Function(Input$stations_now_playing_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_now_playing_min_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (timestamp != _undefined) 'timestamp': (timestamp as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_min_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_min_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      _res;
}

class Input$stations_now_playing_order_by {
  factory Input$stations_now_playing_order_by({
    Enum$order_by? id,
    Input$songs_order_by? song,
    Enum$order_by? song_id,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Input$stations_aggregate_order_by? stations_aggregate,
    Enum$order_by? timestamp,
  }) =>
      Input$stations_now_playing_order_by._({
        if (id != null) r'id': id,
        if (song != null) r'song': song,
        if (song_id != null) r'song_id': song_id,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (stations_aggregate != null)
          r'stations_aggregate': stations_aggregate,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_now_playing_order_by._(this._$data);

  factory Input$stations_now_playing_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song')) {
      final l$song = data['song'];
      result$data['song'] = l$song == null
          ? null
          : Input$songs_order_by.fromJson((l$song as Map<String, dynamic>));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_order_by.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('stations_aggregate')) {
      final l$stations_aggregate = data['stations_aggregate'];
      result$data['stations_aggregate'] = l$stations_aggregate == null
          ? null
          : Input$stations_aggregate_order_by.fromJson(
              (l$stations_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : fromJson$Enum$order_by((l$timestamp as String));
    }
    return Input$stations_now_playing_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Input$songs_order_by? get song => (_$data['song'] as Input$songs_order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Input$stations_order_by? get station =>
      (_$data['station'] as Input$stations_order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Input$stations_aggregate_order_by? get stations_aggregate =>
      (_$data['stations_aggregate'] as Input$stations_aggregate_order_by?);

  Enum$order_by? get timestamp => (_$data['timestamp'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song')) {
      final l$song = song;
      result$data['song'] = l$song?.toJson();
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('stations_aggregate')) {
      final l$stations_aggregate = stations_aggregate;
      result$data['stations_aggregate'] = l$stations_aggregate?.toJson();
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] =
          l$timestamp == null ? null : toJson$Enum$order_by(l$timestamp);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_order_by<
          Input$stations_now_playing_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song = song;
    final lOther$song = other.song;
    if (_$data.containsKey('song') != other._$data.containsKey('song')) {
      return false;
    }
    if (l$song != lOther$song) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$stations_aggregate = stations_aggregate;
    final lOther$stations_aggregate = other.stations_aggregate;
    if (_$data.containsKey('stations_aggregate') !=
        other._$data.containsKey('stations_aggregate')) {
      return false;
    }
    if (l$stations_aggregate != lOther$stations_aggregate) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song = song;
    final l$song_id = song_id;
    final l$station = station;
    final l$station_id = station_id;
    final l$stations_aggregate = stations_aggregate;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song') ? l$song : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('stations_aggregate')
          ? l$stations_aggregate
          : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_order_by(
    Input$stations_now_playing_order_by instance,
    TRes Function(Input$stations_now_playing_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_order_by;

  factory CopyWith$Input$stations_now_playing_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_order_by;

  TRes call({
    Enum$order_by? id,
    Input$songs_order_by? song,
    Enum$order_by? song_id,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Input$stations_aggregate_order_by? stations_aggregate,
    Enum$order_by? timestamp,
  });
  CopyWith$Input$songs_order_by<TRes> get song;
  CopyWith$Input$stations_order_by<TRes> get station;
  CopyWith$Input$stations_aggregate_order_by<TRes> get stations_aggregate;
}

class _CopyWithImpl$Input$stations_now_playing_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_order_by _instance;

  final TRes Function(Input$stations_now_playing_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song = _undefined,
    Object? song_id = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? stations_aggregate = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_now_playing_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song != _undefined) 'song': (song as Input$songs_order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station != _undefined)
          'station': (station as Input$stations_order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (stations_aggregate != _undefined)
          'stations_aggregate':
              (stations_aggregate as Input$stations_aggregate_order_by?),
        if (timestamp != _undefined) 'timestamp': (timestamp as Enum$order_by?),
      }));

  CopyWith$Input$songs_order_by<TRes> get song {
    final local$song = _instance.song;
    return local$song == null
        ? CopyWith$Input$songs_order_by.stub(_then(_instance))
        : CopyWith$Input$songs_order_by(local$song, (e) => call(song: e));
  }

  CopyWith$Input$stations_order_by<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_order_by(
            local$station, (e) => call(station: e));
  }

  CopyWith$Input$stations_aggregate_order_by<TRes> get stations_aggregate {
    final local$stations_aggregate = _instance.stations_aggregate;
    return local$stations_aggregate == null
        ? CopyWith$Input$stations_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_aggregate_order_by(
            local$stations_aggregate, (e) => call(stations_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$stations_now_playing_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Input$songs_order_by? song,
    Enum$order_by? song_id,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Input$stations_aggregate_order_by? stations_aggregate,
    Enum$order_by? timestamp,
  }) =>
      _res;

  CopyWith$Input$songs_order_by<TRes> get song =>
      CopyWith$Input$songs_order_by.stub(_res);

  CopyWith$Input$stations_order_by<TRes> get station =>
      CopyWith$Input$stations_order_by.stub(_res);

  CopyWith$Input$stations_aggregate_order_by<TRes> get stations_aggregate =>
      CopyWith$Input$stations_aggregate_order_by.stub(_res);
}

class Input$stations_now_playing_stddev_order_by {
  factory Input$stations_now_playing_stddev_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_stddev_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_stddev_order_by._(this._$data);

  factory Input$stations_now_playing_stddev_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_stddev_order_by<
          Input$stations_now_playing_stddev_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_stddev_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_stddev_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_stddev_order_by(
    Input$stations_now_playing_stddev_order_by instance,
    TRes Function(Input$stations_now_playing_stddev_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_stddev_order_by;

  factory CopyWith$Input$stations_now_playing_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_stddev_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_stddev_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_stddev_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_stddev_order_by _instance;

  final TRes Function(Input$stations_now_playing_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_stddev_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_stddev_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_now_playing_stddev_pop_order_by {
  factory Input$stations_now_playing_stddev_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_stddev_pop_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_stddev_pop_order_by._(this._$data);

  factory Input$stations_now_playing_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_stddev_pop_order_by<
          Input$stations_now_playing_stddev_pop_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_stddev_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_stddev_pop_order_by(
    Input$stations_now_playing_stddev_pop_order_by instance,
    TRes Function(Input$stations_now_playing_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_stddev_pop_order_by;

  factory CopyWith$Input$stations_now_playing_stddev_pop_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_stddev_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_stddev_pop_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_stddev_pop_order_by _instance;

  final TRes Function(Input$stations_now_playing_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_stddev_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_stddev_pop_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_now_playing_stddev_samp_order_by {
  factory Input$stations_now_playing_stddev_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_stddev_samp_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_stddev_samp_order_by._(this._$data);

  factory Input$stations_now_playing_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_stddev_samp_order_by<
          Input$stations_now_playing_stddev_samp_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_stddev_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_stddev_samp_order_by(
    Input$stations_now_playing_stddev_samp_order_by instance,
    TRes Function(Input$stations_now_playing_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_stddev_samp_order_by;

  factory CopyWith$Input$stations_now_playing_stddev_samp_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_stddev_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_stddev_samp_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_stddev_samp_order_by _instance;

  final TRes Function(Input$stations_now_playing_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_stddev_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_stddev_samp_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_now_playing_stream_cursor_input {
  factory Input$stations_now_playing_stream_cursor_input({
    required Input$stations_now_playing_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$stations_now_playing_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$stations_now_playing_stream_cursor_input._(this._$data);

  factory Input$stations_now_playing_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$stations_now_playing_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$stations_now_playing_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$stations_now_playing_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$stations_now_playing_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_stream_cursor_input<
          Input$stations_now_playing_stream_cursor_input>
      get copyWith => CopyWith$Input$stations_now_playing_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_stream_cursor_input<TRes> {
  factory CopyWith$Input$stations_now_playing_stream_cursor_input(
    Input$stations_now_playing_stream_cursor_input instance,
    TRes Function(Input$stations_now_playing_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$stations_now_playing_stream_cursor_input;

  factory CopyWith$Input$stations_now_playing_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_stream_cursor_input;

  TRes call({
    Input$stations_now_playing_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$stations_now_playing_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$stations_now_playing_stream_cursor_input<TRes>
    implements CopyWith$Input$stations_now_playing_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$stations_now_playing_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_stream_cursor_input _instance;

  final TRes Function(Input$stations_now_playing_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$stations_now_playing_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$stations_now_playing_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$stations_now_playing_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$stations_now_playing_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$stations_now_playing_stream_cursor_input<TRes>
    implements CopyWith$Input$stations_now_playing_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$stations_now_playing_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$stations_now_playing_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$stations_now_playing_stream_cursor_value_input.stub(
              _res);
}

class Input$stations_now_playing_stream_cursor_value_input {
  factory Input$stations_now_playing_stream_cursor_value_input({
    int? id,
    int? song_id,
    int? station_id,
    String? timestamp,
  }) =>
      Input$stations_now_playing_stream_cursor_value_input._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_now_playing_stream_cursor_value_input._(this._$data);

  factory Input$stations_now_playing_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = (l$song_id as int?);
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = (l$station_id as int?);
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = (l$timestamp as String?);
    }
    return Input$stations_now_playing_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get id => (_$data['id'] as int?);

  int? get song_id => (_$data['song_id'] as int?);

  int? get station_id => (_$data['station_id'] as int?);

  String? get timestamp => (_$data['timestamp'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] = l$song_id;
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id;
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] = l$timestamp;
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_stream_cursor_value_input<
          Input$stations_now_playing_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$stations_now_playing_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$stations_now_playing_stream_cursor_value_input(
    Input$stations_now_playing_stream_cursor_value_input instance,
    TRes Function(Input$stations_now_playing_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$stations_now_playing_stream_cursor_value_input;

  factory CopyWith$Input$stations_now_playing_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_stream_cursor_value_input;

  TRes call({
    int? id,
    int? song_id,
    int? station_id,
    String? timestamp,
  });
}

class _CopyWithImpl$Input$stations_now_playing_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$stations_now_playing_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$stations_now_playing_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_stream_cursor_value_input _instance;

  final TRes Function(Input$stations_now_playing_stream_cursor_value_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_now_playing_stream_cursor_value_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as int?),
        if (song_id != _undefined) 'song_id': (song_id as int?),
        if (station_id != _undefined) 'station_id': (station_id as int?),
        if (timestamp != _undefined) 'timestamp': (timestamp as String?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$stations_now_playing_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    int? id,
    int? song_id,
    int? station_id,
    String? timestamp,
  }) =>
      _res;
}

class Input$stations_now_playing_sum_order_by {
  factory Input$stations_now_playing_sum_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_sum_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_sum_order_by._(this._$data);

  factory Input$stations_now_playing_sum_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_sum_order_by<
          Input$stations_now_playing_sum_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_sum_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_sum_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_sum_order_by(
    Input$stations_now_playing_sum_order_by instance,
    TRes Function(Input$stations_now_playing_sum_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_sum_order_by;

  factory CopyWith$Input$stations_now_playing_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_sum_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_sum_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_sum_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_sum_order_by _instance;

  final TRes Function(Input$stations_now_playing_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_sum_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_sum_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_now_playing_var_pop_order_by {
  factory Input$stations_now_playing_var_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_var_pop_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_var_pop_order_by._(this._$data);

  factory Input$stations_now_playing_var_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_var_pop_order_by<
          Input$stations_now_playing_var_pop_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_var_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_var_pop_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_var_pop_order_by(
    Input$stations_now_playing_var_pop_order_by instance,
    TRes Function(Input$stations_now_playing_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_var_pop_order_by;

  factory CopyWith$Input$stations_now_playing_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_var_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_var_pop_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_var_pop_order_by _instance;

  final TRes Function(Input$stations_now_playing_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_var_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_var_pop_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_now_playing_var_samp_order_by {
  factory Input$stations_now_playing_var_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_var_samp_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_var_samp_order_by._(this._$data);

  factory Input$stations_now_playing_var_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_var_samp_order_by<
          Input$stations_now_playing_var_samp_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_var_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_var_samp_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_var_samp_order_by(
    Input$stations_now_playing_var_samp_order_by instance,
    TRes Function(Input$stations_now_playing_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_var_samp_order_by;

  factory CopyWith$Input$stations_now_playing_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_var_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_var_samp_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_var_samp_order_by _instance;

  final TRes Function(Input$stations_now_playing_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_var_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_var_samp_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_now_playing_variance_order_by {
  factory Input$stations_now_playing_variance_order_by({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      Input$stations_now_playing_variance_order_by._({
        if (id != null) r'id': id,
        if (song_id != null) r'song_id': song_id,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_now_playing_variance_order_by._(this._$data);

  factory Input$stations_now_playing_variance_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('song_id')) {
      final l$song_id = data['song_id'];
      result$data['song_id'] = l$song_id == null
          ? null
          : fromJson$Enum$order_by((l$song_id as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_now_playing_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get song_id => (_$data['song_id'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('song_id')) {
      final l$song_id = song_id;
      result$data['song_id'] =
          l$song_id == null ? null : toJson$Enum$order_by(l$song_id);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_now_playing_variance_order_by<
          Input$stations_now_playing_variance_order_by>
      get copyWith => CopyWith$Input$stations_now_playing_variance_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_now_playing_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$song_id = song_id;
    final lOther$song_id = other.song_id;
    if (_$data.containsKey('song_id') != other._$data.containsKey('song_id')) {
      return false;
    }
    if (l$song_id != lOther$song_id) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$song_id = song_id;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('song_id') ? l$song_id : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_now_playing_variance_order_by<TRes> {
  factory CopyWith$Input$stations_now_playing_variance_order_by(
    Input$stations_now_playing_variance_order_by instance,
    TRes Function(Input$stations_now_playing_variance_order_by) then,
  ) = _CopyWithImpl$Input$stations_now_playing_variance_order_by;

  factory CopyWith$Input$stations_now_playing_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_now_playing_variance_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_now_playing_variance_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_variance_order_by<TRes> {
  _CopyWithImpl$Input$stations_now_playing_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_now_playing_variance_order_by _instance;

  final TRes Function(Input$stations_now_playing_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? song_id = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_now_playing_variance_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (song_id != _undefined) 'song_id': (song_id as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_now_playing_variance_order_by<TRes>
    implements CopyWith$Input$stations_now_playing_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_now_playing_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? song_id,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_order_by {
  factory Input$stations_order_by({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? feature_latest_post,
    Enum$order_by? hls_stream_url,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Input$stations_now_playing_order_by? now_playing,
    Input$stations_now_playing_aggregate_order_by?
        now_playing_history_aggregate,
    Enum$order_by? order,
    Input$posts_aggregate_order_by? posts_aggregate,
    Enum$order_by? proxy_stream_url,
    Input$reviews_aggregate_order_by? reviews_aggregate,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Input$station_to_station_group_aggregate_order_by?
        station_to_station_groups_aggregate,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? total_listeners,
    Enum$order_by? updated_at,
    Input$stations_uptime_order_by? uptime,
    Input$stations_uptime_aggregate_order_by? uptime_history_aggregate,
    Enum$order_by? website,
  }) =>
      Input$stations_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (description != null) r'description': description,
        if (description_action_title != null)
          r'description_action_title': description_action_title,
        if (description_link != null) r'description_link': description_link,
        if (email != null) r'email': email,
        if (facebook_page_id != null) r'facebook_page_id': facebook_page_id,
        if (feature_latest_post != null)
          r'feature_latest_post': feature_latest_post,
        if (hls_stream_url != null) r'hls_stream_url': hls_stream_url,
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (now_playing != null) r'now_playing': now_playing,
        if (now_playing_history_aggregate != null)
          r'now_playing_history_aggregate': now_playing_history_aggregate,
        if (order != null) r'order': order,
        if (posts_aggregate != null) r'posts_aggregate': posts_aggregate,
        if (proxy_stream_url != null) r'proxy_stream_url': proxy_stream_url,
        if (reviews_aggregate != null) r'reviews_aggregate': reviews_aggregate,
        if (rss_feed != null) r'rss_feed': rss_feed,
        if (slug != null) r'slug': slug,
        if (station_to_station_groups_aggregate != null)
          r'station_to_station_groups_aggregate':
              station_to_station_groups_aggregate,
        if (stream_url != null) r'stream_url': stream_url,
        if (thumbnail != null) r'thumbnail': thumbnail,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
        if (title != null) r'title': title,
        if (total_listeners != null) r'total_listeners': total_listeners,
        if (updated_at != null) r'updated_at': updated_at,
        if (uptime != null) r'uptime': uptime,
        if (uptime_history_aggregate != null)
          r'uptime_history_aggregate': uptime_history_aggregate,
        if (website != null) r'website': website,
      });

  Input$stations_order_by._(this._$data);

  factory Input$stations_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = l$description == null
          ? null
          : fromJson$Enum$order_by((l$description as String));
    }
    if (data.containsKey('description_action_title')) {
      final l$description_action_title = data['description_action_title'];
      result$data['description_action_title'] =
          l$description_action_title == null
              ? null
              : fromJson$Enum$order_by((l$description_action_title as String));
    }
    if (data.containsKey('description_link')) {
      final l$description_link = data['description_link'];
      result$data['description_link'] = l$description_link == null
          ? null
          : fromJson$Enum$order_by((l$description_link as String));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = data['facebook_page_id'];
      result$data['facebook_page_id'] = l$facebook_page_id == null
          ? null
          : fromJson$Enum$order_by((l$facebook_page_id as String));
    }
    if (data.containsKey('feature_latest_post')) {
      final l$feature_latest_post = data['feature_latest_post'];
      result$data['feature_latest_post'] = l$feature_latest_post == null
          ? null
          : fromJson$Enum$order_by((l$feature_latest_post as String));
    }
    if (data.containsKey('hls_stream_url')) {
      final l$hls_stream_url = data['hls_stream_url'];
      result$data['hls_stream_url'] = l$hls_stream_url == null
          ? null
          : fromJson$Enum$order_by((l$hls_stream_url as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('now_playing')) {
      final l$now_playing = data['now_playing'];
      result$data['now_playing'] = l$now_playing == null
          ? null
          : Input$stations_now_playing_order_by.fromJson(
              (l$now_playing as Map<String, dynamic>));
    }
    if (data.containsKey('now_playing_history_aggregate')) {
      final l$now_playing_history_aggregate =
          data['now_playing_history_aggregate'];
      result$data['now_playing_history_aggregate'] =
          l$now_playing_history_aggregate == null
              ? null
              : Input$stations_now_playing_aggregate_order_by.fromJson(
                  (l$now_playing_history_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    if (data.containsKey('posts_aggregate')) {
      final l$posts_aggregate = data['posts_aggregate'];
      result$data['posts_aggregate'] = l$posts_aggregate == null
          ? null
          : Input$posts_aggregate_order_by.fromJson(
              (l$posts_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('proxy_stream_url')) {
      final l$proxy_stream_url = data['proxy_stream_url'];
      result$data['proxy_stream_url'] = l$proxy_stream_url == null
          ? null
          : fromJson$Enum$order_by((l$proxy_stream_url as String));
    }
    if (data.containsKey('reviews_aggregate')) {
      final l$reviews_aggregate = data['reviews_aggregate'];
      result$data['reviews_aggregate'] = l$reviews_aggregate == null
          ? null
          : Input$reviews_aggregate_order_by.fromJson(
              (l$reviews_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('rss_feed')) {
      final l$rss_feed = data['rss_feed'];
      result$data['rss_feed'] = l$rss_feed == null
          ? null
          : fromJson$Enum$order_by((l$rss_feed as String));
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] =
          l$slug == null ? null : fromJson$Enum$order_by((l$slug as String));
    }
    if (data.containsKey('station_to_station_groups_aggregate')) {
      final l$station_to_station_groups_aggregate =
          data['station_to_station_groups_aggregate'];
      result$data['station_to_station_groups_aggregate'] =
          l$station_to_station_groups_aggregate == null
              ? null
              : Input$station_to_station_group_aggregate_order_by.fromJson(
                  (l$station_to_station_groups_aggregate
                      as Map<String, dynamic>));
    }
    if (data.containsKey('stream_url')) {
      final l$stream_url = data['stream_url'];
      result$data['stream_url'] = l$stream_url == null
          ? null
          : fromJson$Enum$order_by((l$stream_url as String));
    }
    if (data.containsKey('thumbnail')) {
      final l$thumbnail = data['thumbnail'];
      result$data['thumbnail'] = l$thumbnail == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail as String));
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : fromJson$Enum$order_by((l$thumbnail_url as String));
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] =
          l$title == null ? null : fromJson$Enum$order_by((l$title as String));
    }
    if (data.containsKey('total_listeners')) {
      final l$total_listeners = data['total_listeners'];
      result$data['total_listeners'] = l$total_listeners == null
          ? null
          : fromJson$Enum$order_by((l$total_listeners as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('uptime')) {
      final l$uptime = data['uptime'];
      result$data['uptime'] = l$uptime == null
          ? null
          : Input$stations_uptime_order_by.fromJson(
              (l$uptime as Map<String, dynamic>));
    }
    if (data.containsKey('uptime_history_aggregate')) {
      final l$uptime_history_aggregate = data['uptime_history_aggregate'];
      result$data['uptime_history_aggregate'] =
          l$uptime_history_aggregate == null
              ? null
              : Input$stations_uptime_aggregate_order_by.fromJson(
                  (l$uptime_history_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('website')) {
      final l$website = data['website'];
      result$data['website'] = l$website == null
          ? null
          : fromJson$Enum$order_by((l$website as String));
    }
    return Input$stations_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);

  Enum$order_by? get description => (_$data['description'] as Enum$order_by?);

  Enum$order_by? get description_action_title =>
      (_$data['description_action_title'] as Enum$order_by?);

  Enum$order_by? get description_link =>
      (_$data['description_link'] as Enum$order_by?);

  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);

  Enum$order_by? get facebook_page_id =>
      (_$data['facebook_page_id'] as Enum$order_by?);

  Enum$order_by? get feature_latest_post =>
      (_$data['feature_latest_post'] as Enum$order_by?);

  Enum$order_by? get hls_stream_url =>
      (_$data['hls_stream_url'] as Enum$order_by?);

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Input$stations_now_playing_order_by? get now_playing =>
      (_$data['now_playing'] as Input$stations_now_playing_order_by?);

  Input$stations_now_playing_aggregate_order_by?
      get now_playing_history_aggregate =>
          (_$data['now_playing_history_aggregate']
              as Input$stations_now_playing_aggregate_order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Input$posts_aggregate_order_by? get posts_aggregate =>
      (_$data['posts_aggregate'] as Input$posts_aggregate_order_by?);

  Enum$order_by? get proxy_stream_url =>
      (_$data['proxy_stream_url'] as Enum$order_by?);

  Input$reviews_aggregate_order_by? get reviews_aggregate =>
      (_$data['reviews_aggregate'] as Input$reviews_aggregate_order_by?);

  Enum$order_by? get rss_feed => (_$data['rss_feed'] as Enum$order_by?);

  Enum$order_by? get slug => (_$data['slug'] as Enum$order_by?);

  Input$station_to_station_group_aggregate_order_by?
      get station_to_station_groups_aggregate =>
          (_$data['station_to_station_groups_aggregate']
              as Input$station_to_station_group_aggregate_order_by?);

  Enum$order_by? get stream_url => (_$data['stream_url'] as Enum$order_by?);

  Enum$order_by? get thumbnail => (_$data['thumbnail'] as Enum$order_by?);

  Enum$order_by? get thumbnail_url =>
      (_$data['thumbnail_url'] as Enum$order_by?);

  Enum$order_by? get title => (_$data['title'] as Enum$order_by?);

  Enum$order_by? get total_listeners =>
      (_$data['total_listeners'] as Enum$order_by?);

  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);

  Input$stations_uptime_order_by? get uptime =>
      (_$data['uptime'] as Input$stations_uptime_order_by?);

  Input$stations_uptime_aggregate_order_by? get uptime_history_aggregate =>
      (_$data['uptime_history_aggregate']
          as Input$stations_uptime_aggregate_order_by?);

  Enum$order_by? get website => (_$data['website'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] =
          l$description == null ? null : toJson$Enum$order_by(l$description);
    }
    if (_$data.containsKey('description_action_title')) {
      final l$description_action_title = description_action_title;
      result$data['description_action_title'] =
          l$description_action_title == null
              ? null
              : toJson$Enum$order_by(l$description_action_title);
    }
    if (_$data.containsKey('description_link')) {
      final l$description_link = description_link;
      result$data['description_link'] = l$description_link == null
          ? null
          : toJson$Enum$order_by(l$description_link);
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = facebook_page_id;
      result$data['facebook_page_id'] = l$facebook_page_id == null
          ? null
          : toJson$Enum$order_by(l$facebook_page_id);
    }
    if (_$data.containsKey('feature_latest_post')) {
      final l$feature_latest_post = feature_latest_post;
      result$data['feature_latest_post'] = l$feature_latest_post == null
          ? null
          : toJson$Enum$order_by(l$feature_latest_post);
    }
    if (_$data.containsKey('hls_stream_url')) {
      final l$hls_stream_url = hls_stream_url;
      result$data['hls_stream_url'] = l$hls_stream_url == null
          ? null
          : toJson$Enum$order_by(l$hls_stream_url);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('now_playing')) {
      final l$now_playing = now_playing;
      result$data['now_playing'] = l$now_playing?.toJson();
    }
    if (_$data.containsKey('now_playing_history_aggregate')) {
      final l$now_playing_history_aggregate = now_playing_history_aggregate;
      result$data['now_playing_history_aggregate'] =
          l$now_playing_history_aggregate?.toJson();
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    if (_$data.containsKey('posts_aggregate')) {
      final l$posts_aggregate = posts_aggregate;
      result$data['posts_aggregate'] = l$posts_aggregate?.toJson();
    }
    if (_$data.containsKey('proxy_stream_url')) {
      final l$proxy_stream_url = proxy_stream_url;
      result$data['proxy_stream_url'] = l$proxy_stream_url == null
          ? null
          : toJson$Enum$order_by(l$proxy_stream_url);
    }
    if (_$data.containsKey('reviews_aggregate')) {
      final l$reviews_aggregate = reviews_aggregate;
      result$data['reviews_aggregate'] = l$reviews_aggregate?.toJson();
    }
    if (_$data.containsKey('rss_feed')) {
      final l$rss_feed = rss_feed;
      result$data['rss_feed'] =
          l$rss_feed == null ? null : toJson$Enum$order_by(l$rss_feed);
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] =
          l$slug == null ? null : toJson$Enum$order_by(l$slug);
    }
    if (_$data.containsKey('station_to_station_groups_aggregate')) {
      final l$station_to_station_groups_aggregate =
          station_to_station_groups_aggregate;
      result$data['station_to_station_groups_aggregate'] =
          l$station_to_station_groups_aggregate?.toJson();
    }
    if (_$data.containsKey('stream_url')) {
      final l$stream_url = stream_url;
      result$data['stream_url'] =
          l$stream_url == null ? null : toJson$Enum$order_by(l$stream_url);
    }
    if (_$data.containsKey('thumbnail')) {
      final l$thumbnail = thumbnail;
      result$data['thumbnail'] =
          l$thumbnail == null ? null : toJson$Enum$order_by(l$thumbnail);
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url == null
          ? null
          : toJson$Enum$order_by(l$thumbnail_url);
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] =
          l$title == null ? null : toJson$Enum$order_by(l$title);
    }
    if (_$data.containsKey('total_listeners')) {
      final l$total_listeners = total_listeners;
      result$data['total_listeners'] = l$total_listeners == null
          ? null
          : toJson$Enum$order_by(l$total_listeners);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('uptime')) {
      final l$uptime = uptime;
      result$data['uptime'] = l$uptime?.toJson();
    }
    if (_$data.containsKey('uptime_history_aggregate')) {
      final l$uptime_history_aggregate = uptime_history_aggregate;
      result$data['uptime_history_aggregate'] =
          l$uptime_history_aggregate?.toJson();
    }
    if (_$data.containsKey('website')) {
      final l$website = website;
      result$data['website'] =
          l$website == null ? null : toJson$Enum$order_by(l$website);
    }
    return result$data;
  }

  CopyWith$Input$stations_order_by<Input$stations_order_by> get copyWith =>
      CopyWith$Input$stations_order_by(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$description_action_title = description_action_title;
    final lOther$description_action_title = other.description_action_title;
    if (_$data.containsKey('description_action_title') !=
        other._$data.containsKey('description_action_title')) {
      return false;
    }
    if (l$description_action_title != lOther$description_action_title) {
      return false;
    }
    final l$description_link = description_link;
    final lOther$description_link = other.description_link;
    if (_$data.containsKey('description_link') !=
        other._$data.containsKey('description_link')) {
      return false;
    }
    if (l$description_link != lOther$description_link) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$facebook_page_id = facebook_page_id;
    final lOther$facebook_page_id = other.facebook_page_id;
    if (_$data.containsKey('facebook_page_id') !=
        other._$data.containsKey('facebook_page_id')) {
      return false;
    }
    if (l$facebook_page_id != lOther$facebook_page_id) {
      return false;
    }
    final l$feature_latest_post = feature_latest_post;
    final lOther$feature_latest_post = other.feature_latest_post;
    if (_$data.containsKey('feature_latest_post') !=
        other._$data.containsKey('feature_latest_post')) {
      return false;
    }
    if (l$feature_latest_post != lOther$feature_latest_post) {
      return false;
    }
    final l$hls_stream_url = hls_stream_url;
    final lOther$hls_stream_url = other.hls_stream_url;
    if (_$data.containsKey('hls_stream_url') !=
        other._$data.containsKey('hls_stream_url')) {
      return false;
    }
    if (l$hls_stream_url != lOther$hls_stream_url) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$now_playing = now_playing;
    final lOther$now_playing = other.now_playing;
    if (_$data.containsKey('now_playing') !=
        other._$data.containsKey('now_playing')) {
      return false;
    }
    if (l$now_playing != lOther$now_playing) {
      return false;
    }
    final l$now_playing_history_aggregate = now_playing_history_aggregate;
    final lOther$now_playing_history_aggregate =
        other.now_playing_history_aggregate;
    if (_$data.containsKey('now_playing_history_aggregate') !=
        other._$data.containsKey('now_playing_history_aggregate')) {
      return false;
    }
    if (l$now_playing_history_aggregate !=
        lOther$now_playing_history_aggregate) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$posts_aggregate = posts_aggregate;
    final lOther$posts_aggregate = other.posts_aggregate;
    if (_$data.containsKey('posts_aggregate') !=
        other._$data.containsKey('posts_aggregate')) {
      return false;
    }
    if (l$posts_aggregate != lOther$posts_aggregate) {
      return false;
    }
    final l$proxy_stream_url = proxy_stream_url;
    final lOther$proxy_stream_url = other.proxy_stream_url;
    if (_$data.containsKey('proxy_stream_url') !=
        other._$data.containsKey('proxy_stream_url')) {
      return false;
    }
    if (l$proxy_stream_url != lOther$proxy_stream_url) {
      return false;
    }
    final l$reviews_aggregate = reviews_aggregate;
    final lOther$reviews_aggregate = other.reviews_aggregate;
    if (_$data.containsKey('reviews_aggregate') !=
        other._$data.containsKey('reviews_aggregate')) {
      return false;
    }
    if (l$reviews_aggregate != lOther$reviews_aggregate) {
      return false;
    }
    final l$rss_feed = rss_feed;
    final lOther$rss_feed = other.rss_feed;
    if (_$data.containsKey('rss_feed') !=
        other._$data.containsKey('rss_feed')) {
      return false;
    }
    if (l$rss_feed != lOther$rss_feed) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    final l$station_to_station_groups_aggregate =
        station_to_station_groups_aggregate;
    final lOther$station_to_station_groups_aggregate =
        other.station_to_station_groups_aggregate;
    if (_$data.containsKey('station_to_station_groups_aggregate') !=
        other._$data.containsKey('station_to_station_groups_aggregate')) {
      return false;
    }
    if (l$station_to_station_groups_aggregate !=
        lOther$station_to_station_groups_aggregate) {
      return false;
    }
    final l$stream_url = stream_url;
    final lOther$stream_url = other.stream_url;
    if (_$data.containsKey('stream_url') !=
        other._$data.containsKey('stream_url')) {
      return false;
    }
    if (l$stream_url != lOther$stream_url) {
      return false;
    }
    final l$thumbnail = thumbnail;
    final lOther$thumbnail = other.thumbnail;
    if (_$data.containsKey('thumbnail') !=
        other._$data.containsKey('thumbnail')) {
      return false;
    }
    if (l$thumbnail != lOther$thumbnail) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$total_listeners = total_listeners;
    final lOther$total_listeners = other.total_listeners;
    if (_$data.containsKey('total_listeners') !=
        other._$data.containsKey('total_listeners')) {
      return false;
    }
    if (l$total_listeners != lOther$total_listeners) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$uptime = uptime;
    final lOther$uptime = other.uptime;
    if (_$data.containsKey('uptime') != other._$data.containsKey('uptime')) {
      return false;
    }
    if (l$uptime != lOther$uptime) {
      return false;
    }
    final l$uptime_history_aggregate = uptime_history_aggregate;
    final lOther$uptime_history_aggregate = other.uptime_history_aggregate;
    if (_$data.containsKey('uptime_history_aggregate') !=
        other._$data.containsKey('uptime_history_aggregate')) {
      return false;
    }
    if (l$uptime_history_aggregate != lOther$uptime_history_aggregate) {
      return false;
    }
    final l$website = website;
    final lOther$website = other.website;
    if (_$data.containsKey('website') != other._$data.containsKey('website')) {
      return false;
    }
    if (l$website != lOther$website) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$description = description;
    final l$description_action_title = description_action_title;
    final l$description_link = description_link;
    final l$email = email;
    final l$facebook_page_id = facebook_page_id;
    final l$feature_latest_post = feature_latest_post;
    final l$hls_stream_url = hls_stream_url;
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$now_playing = now_playing;
    final l$now_playing_history_aggregate = now_playing_history_aggregate;
    final l$order = order;
    final l$posts_aggregate = posts_aggregate;
    final l$proxy_stream_url = proxy_stream_url;
    final l$reviews_aggregate = reviews_aggregate;
    final l$rss_feed = rss_feed;
    final l$slug = slug;
    final l$station_to_station_groups_aggregate =
        station_to_station_groups_aggregate;
    final l$stream_url = stream_url;
    final l$thumbnail = thumbnail;
    final l$thumbnail_url = thumbnail_url;
    final l$title = title;
    final l$total_listeners = total_listeners;
    final l$updated_at = updated_at;
    final l$uptime = uptime;
    final l$uptime_history_aggregate = uptime_history_aggregate;
    final l$website = website;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('description_action_title')
          ? l$description_action_title
          : const {},
      _$data.containsKey('description_link') ? l$description_link : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('facebook_page_id') ? l$facebook_page_id : const {},
      _$data.containsKey('feature_latest_post')
          ? l$feature_latest_post
          : const {},
      _$data.containsKey('hls_stream_url') ? l$hls_stream_url : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('now_playing') ? l$now_playing : const {},
      _$data.containsKey('now_playing_history_aggregate')
          ? l$now_playing_history_aggregate
          : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('posts_aggregate') ? l$posts_aggregate : const {},
      _$data.containsKey('proxy_stream_url') ? l$proxy_stream_url : const {},
      _$data.containsKey('reviews_aggregate') ? l$reviews_aggregate : const {},
      _$data.containsKey('rss_feed') ? l$rss_feed : const {},
      _$data.containsKey('slug') ? l$slug : const {},
      _$data.containsKey('station_to_station_groups_aggregate')
          ? l$station_to_station_groups_aggregate
          : const {},
      _$data.containsKey('stream_url') ? l$stream_url : const {},
      _$data.containsKey('thumbnail') ? l$thumbnail : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('total_listeners') ? l$total_listeners : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('uptime') ? l$uptime : const {},
      _$data.containsKey('uptime_history_aggregate')
          ? l$uptime_history_aggregate
          : const {},
      _$data.containsKey('website') ? l$website : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_order_by<TRes> {
  factory CopyWith$Input$stations_order_by(
    Input$stations_order_by instance,
    TRes Function(Input$stations_order_by) then,
  ) = _CopyWithImpl$Input$stations_order_by;

  factory CopyWith$Input$stations_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? feature_latest_post,
    Enum$order_by? hls_stream_url,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Input$stations_now_playing_order_by? now_playing,
    Input$stations_now_playing_aggregate_order_by?
        now_playing_history_aggregate,
    Enum$order_by? order,
    Input$posts_aggregate_order_by? posts_aggregate,
    Enum$order_by? proxy_stream_url,
    Input$reviews_aggregate_order_by? reviews_aggregate,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Input$station_to_station_group_aggregate_order_by?
        station_to_station_groups_aggregate,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? total_listeners,
    Enum$order_by? updated_at,
    Input$stations_uptime_order_by? uptime,
    Input$stations_uptime_aggregate_order_by? uptime_history_aggregate,
    Enum$order_by? website,
  });
  CopyWith$Input$stations_now_playing_order_by<TRes> get now_playing;
  CopyWith$Input$stations_now_playing_aggregate_order_by<TRes>
      get now_playing_history_aggregate;
  CopyWith$Input$posts_aggregate_order_by<TRes> get posts_aggregate;
  CopyWith$Input$reviews_aggregate_order_by<TRes> get reviews_aggregate;
  CopyWith$Input$station_to_station_group_aggregate_order_by<TRes>
      get station_to_station_groups_aggregate;
  CopyWith$Input$stations_uptime_order_by<TRes> get uptime;
  CopyWith$Input$stations_uptime_aggregate_order_by<TRes>
      get uptime_history_aggregate;
}

class _CopyWithImpl$Input$stations_order_by<TRes>
    implements CopyWith$Input$stations_order_by<TRes> {
  _CopyWithImpl$Input$stations_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_order_by _instance;

  final TRes Function(Input$stations_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? description = _undefined,
    Object? description_action_title = _undefined,
    Object? description_link = _undefined,
    Object? email = _undefined,
    Object? facebook_page_id = _undefined,
    Object? feature_latest_post = _undefined,
    Object? hls_stream_url = _undefined,
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? now_playing = _undefined,
    Object? now_playing_history_aggregate = _undefined,
    Object? order = _undefined,
    Object? posts_aggregate = _undefined,
    Object? proxy_stream_url = _undefined,
    Object? reviews_aggregate = _undefined,
    Object? rss_feed = _undefined,
    Object? slug = _undefined,
    Object? station_to_station_groups_aggregate = _undefined,
    Object? stream_url = _undefined,
    Object? thumbnail = _undefined,
    Object? thumbnail_url = _undefined,
    Object? title = _undefined,
    Object? total_listeners = _undefined,
    Object? updated_at = _undefined,
    Object? uptime = _undefined,
    Object? uptime_history_aggregate = _undefined,
    Object? website = _undefined,
  }) =>
      _then(Input$stations_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (description != _undefined)
          'description': (description as Enum$order_by?),
        if (description_action_title != _undefined)
          'description_action_title':
              (description_action_title as Enum$order_by?),
        if (description_link != _undefined)
          'description_link': (description_link as Enum$order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (facebook_page_id != _undefined)
          'facebook_page_id': (facebook_page_id as Enum$order_by?),
        if (feature_latest_post != _undefined)
          'feature_latest_post': (feature_latest_post as Enum$order_by?),
        if (hls_stream_url != _undefined)
          'hls_stream_url': (hls_stream_url as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (now_playing != _undefined)
          'now_playing': (now_playing as Input$stations_now_playing_order_by?),
        if (now_playing_history_aggregate != _undefined)
          'now_playing_history_aggregate': (now_playing_history_aggregate
              as Input$stations_now_playing_aggregate_order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
        if (posts_aggregate != _undefined)
          'posts_aggregate':
              (posts_aggregate as Input$posts_aggregate_order_by?),
        if (proxy_stream_url != _undefined)
          'proxy_stream_url': (proxy_stream_url as Enum$order_by?),
        if (reviews_aggregate != _undefined)
          'reviews_aggregate':
              (reviews_aggregate as Input$reviews_aggregate_order_by?),
        if (rss_feed != _undefined) 'rss_feed': (rss_feed as Enum$order_by?),
        if (slug != _undefined) 'slug': (slug as Enum$order_by?),
        if (station_to_station_groups_aggregate != _undefined)
          'station_to_station_groups_aggregate':
              (station_to_station_groups_aggregate
                  as Input$station_to_station_group_aggregate_order_by?),
        if (stream_url != _undefined)
          'stream_url': (stream_url as Enum$order_by?),
        if (thumbnail != _undefined) 'thumbnail': (thumbnail as Enum$order_by?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as Enum$order_by?),
        if (title != _undefined) 'title': (title as Enum$order_by?),
        if (total_listeners != _undefined)
          'total_listeners': (total_listeners as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (uptime != _undefined)
          'uptime': (uptime as Input$stations_uptime_order_by?),
        if (uptime_history_aggregate != _undefined)
          'uptime_history_aggregate': (uptime_history_aggregate
              as Input$stations_uptime_aggregate_order_by?),
        if (website != _undefined) 'website': (website as Enum$order_by?),
      }));

  CopyWith$Input$stations_now_playing_order_by<TRes> get now_playing {
    final local$now_playing = _instance.now_playing;
    return local$now_playing == null
        ? CopyWith$Input$stations_now_playing_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_now_playing_order_by(
            local$now_playing, (e) => call(now_playing: e));
  }

  CopyWith$Input$stations_now_playing_aggregate_order_by<TRes>
      get now_playing_history_aggregate {
    final local$now_playing_history_aggregate =
        _instance.now_playing_history_aggregate;
    return local$now_playing_history_aggregate == null
        ? CopyWith$Input$stations_now_playing_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_now_playing_aggregate_order_by(
            local$now_playing_history_aggregate,
            (e) => call(now_playing_history_aggregate: e));
  }

  CopyWith$Input$posts_aggregate_order_by<TRes> get posts_aggregate {
    final local$posts_aggregate = _instance.posts_aggregate;
    return local$posts_aggregate == null
        ? CopyWith$Input$posts_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$posts_aggregate_order_by(
            local$posts_aggregate, (e) => call(posts_aggregate: e));
  }

  CopyWith$Input$reviews_aggregate_order_by<TRes> get reviews_aggregate {
    final local$reviews_aggregate = _instance.reviews_aggregate;
    return local$reviews_aggregate == null
        ? CopyWith$Input$reviews_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$reviews_aggregate_order_by(
            local$reviews_aggregate, (e) => call(reviews_aggregate: e));
  }

  CopyWith$Input$station_to_station_group_aggregate_order_by<TRes>
      get station_to_station_groups_aggregate {
    final local$station_to_station_groups_aggregate =
        _instance.station_to_station_groups_aggregate;
    return local$station_to_station_groups_aggregate == null
        ? CopyWith$Input$station_to_station_group_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$station_to_station_group_aggregate_order_by(
            local$station_to_station_groups_aggregate,
            (e) => call(station_to_station_groups_aggregate: e));
  }

  CopyWith$Input$stations_uptime_order_by<TRes> get uptime {
    final local$uptime = _instance.uptime;
    return local$uptime == null
        ? CopyWith$Input$stations_uptime_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_order_by(
            local$uptime, (e) => call(uptime: e));
  }

  CopyWith$Input$stations_uptime_aggregate_order_by<TRes>
      get uptime_history_aggregate {
    final local$uptime_history_aggregate = _instance.uptime_history_aggregate;
    return local$uptime_history_aggregate == null
        ? CopyWith$Input$stations_uptime_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_uptime_aggregate_order_by(
            local$uptime_history_aggregate,
            (e) => call(uptime_history_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$stations_order_by<TRes>
    implements CopyWith$Input$stations_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? description,
    Enum$order_by? description_action_title,
    Enum$order_by? description_link,
    Enum$order_by? email,
    Enum$order_by? facebook_page_id,
    Enum$order_by? feature_latest_post,
    Enum$order_by? hls_stream_url,
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Input$stations_now_playing_order_by? now_playing,
    Input$stations_now_playing_aggregate_order_by?
        now_playing_history_aggregate,
    Enum$order_by? order,
    Input$posts_aggregate_order_by? posts_aggregate,
    Enum$order_by? proxy_stream_url,
    Input$reviews_aggregate_order_by? reviews_aggregate,
    Enum$order_by? rss_feed,
    Enum$order_by? slug,
    Input$station_to_station_group_aggregate_order_by?
        station_to_station_groups_aggregate,
    Enum$order_by? stream_url,
    Enum$order_by? thumbnail,
    Enum$order_by? thumbnail_url,
    Enum$order_by? title,
    Enum$order_by? total_listeners,
    Enum$order_by? updated_at,
    Input$stations_uptime_order_by? uptime,
    Input$stations_uptime_aggregate_order_by? uptime_history_aggregate,
    Enum$order_by? website,
  }) =>
      _res;

  CopyWith$Input$stations_now_playing_order_by<TRes> get now_playing =>
      CopyWith$Input$stations_now_playing_order_by.stub(_res);

  CopyWith$Input$stations_now_playing_aggregate_order_by<TRes>
      get now_playing_history_aggregate =>
          CopyWith$Input$stations_now_playing_aggregate_order_by.stub(_res);

  CopyWith$Input$posts_aggregate_order_by<TRes> get posts_aggregate =>
      CopyWith$Input$posts_aggregate_order_by.stub(_res);

  CopyWith$Input$reviews_aggregate_order_by<TRes> get reviews_aggregate =>
      CopyWith$Input$reviews_aggregate_order_by.stub(_res);

  CopyWith$Input$station_to_station_group_aggregate_order_by<TRes>
      get station_to_station_groups_aggregate =>
          CopyWith$Input$station_to_station_group_aggregate_order_by.stub(_res);

  CopyWith$Input$stations_uptime_order_by<TRes> get uptime =>
      CopyWith$Input$stations_uptime_order_by.stub(_res);

  CopyWith$Input$stations_uptime_aggregate_order_by<TRes>
      get uptime_history_aggregate =>
          CopyWith$Input$stations_uptime_aggregate_order_by.stub(_res);
}

class Input$stations_stddev_order_by {
  factory Input$stations_stddev_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_stddev_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_stddev_order_by._(this._$data);

  factory Input$stations_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_stddev_order_by<Input$stations_stddev_order_by>
      get copyWith => CopyWith$Input$stations_stddev_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_stddev_order_by<TRes> {
  factory CopyWith$Input$stations_stddev_order_by(
    Input$stations_stddev_order_by instance,
    TRes Function(Input$stations_stddev_order_by) then,
  ) = _CopyWithImpl$Input$stations_stddev_order_by;

  factory CopyWith$Input$stations_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_stddev_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_stddev_order_by<TRes>
    implements CopyWith$Input$stations_stddev_order_by<TRes> {
  _CopyWithImpl$Input$stations_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_stddev_order_by _instance;

  final TRes Function(Input$stations_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_stddev_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_stddev_order_by<TRes>
    implements CopyWith$Input$stations_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$stations_stddev_pop_order_by {
  factory Input$stations_stddev_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_stddev_pop_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_stddev_pop_order_by._(this._$data);

  factory Input$stations_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_stddev_pop_order_by<
          Input$stations_stddev_pop_order_by>
      get copyWith => CopyWith$Input$stations_stddev_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$stations_stddev_pop_order_by(
    Input$stations_stddev_pop_order_by instance,
    TRes Function(Input$stations_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$stations_stddev_pop_order_by;

  factory CopyWith$Input$stations_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_stddev_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_stddev_pop_order_by<TRes>
    implements CopyWith$Input$stations_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$stations_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_stddev_pop_order_by _instance;

  final TRes Function(Input$stations_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_stddev_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_stddev_pop_order_by<TRes>
    implements CopyWith$Input$stations_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$stations_stddev_samp_order_by {
  factory Input$stations_stddev_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_stddev_samp_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_stddev_samp_order_by._(this._$data);

  factory Input$stations_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_stddev_samp_order_by<
          Input$stations_stddev_samp_order_by>
      get copyWith => CopyWith$Input$stations_stddev_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$stations_stddev_samp_order_by(
    Input$stations_stddev_samp_order_by instance,
    TRes Function(Input$stations_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$stations_stddev_samp_order_by;

  factory CopyWith$Input$stations_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_stddev_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_stddev_samp_order_by<TRes>
    implements CopyWith$Input$stations_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$stations_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_stddev_samp_order_by _instance;

  final TRes Function(Input$stations_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_stddev_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_stddev_samp_order_by<TRes>
    implements CopyWith$Input$stations_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$stations_stream_cursor_input {
  factory Input$stations_stream_cursor_input({
    required Input$stations_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$stations_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$stations_stream_cursor_input._(this._$data);

  factory Input$stations_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$stations_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$stations_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$stations_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$stations_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$stations_stream_cursor_input<
          Input$stations_stream_cursor_input>
      get copyWith => CopyWith$Input$stations_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_stream_cursor_input<TRes> {
  factory CopyWith$Input$stations_stream_cursor_input(
    Input$stations_stream_cursor_input instance,
    TRes Function(Input$stations_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$stations_stream_cursor_input;

  factory CopyWith$Input$stations_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_stream_cursor_input;

  TRes call({
    Input$stations_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$stations_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$stations_stream_cursor_input<TRes>
    implements CopyWith$Input$stations_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$stations_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$stations_stream_cursor_input _instance;

  final TRes Function(Input$stations_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$stations_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$stations_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$stations_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$stations_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$stations_stream_cursor_input<TRes>
    implements CopyWith$Input$stations_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$stations_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$stations_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$stations_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$stations_stream_cursor_value_input.stub(_res);
}

class Input$stations_stream_cursor_value_input {
  factory Input$stations_stream_cursor_value_input({
    String? created_at,
    String? description,
    String? description_action_title,
    String? description_link,
    String? email,
    String? facebook_page_id,
    bool? feature_latest_post,
    int? id,
    int? latest_station_now_playing_id,
    int? latest_station_uptime_id,
    int? order,
    String? rss_feed,
    String? slug,
    String? stream_url,
    String? thumbnail,
    String? thumbnail_url,
    String? title,
    String? updated_at,
    String? website,
  }) =>
      Input$stations_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (description != null) r'description': description,
        if (description_action_title != null)
          r'description_action_title': description_action_title,
        if (description_link != null) r'description_link': description_link,
        if (email != null) r'email': email,
        if (facebook_page_id != null) r'facebook_page_id': facebook_page_id,
        if (feature_latest_post != null)
          r'feature_latest_post': feature_latest_post,
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
        if (rss_feed != null) r'rss_feed': rss_feed,
        if (slug != null) r'slug': slug,
        if (stream_url != null) r'stream_url': stream_url,
        if (thumbnail != null) r'thumbnail': thumbnail,
        if (thumbnail_url != null) r'thumbnail_url': thumbnail_url,
        if (title != null) r'title': title,
        if (updated_at != null) r'updated_at': updated_at,
        if (website != null) r'website': website,
      });

  Input$stations_stream_cursor_value_input._(this._$data);

  factory Input$stations_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = (l$created_at as String?);
    }
    if (data.containsKey('description')) {
      final l$description = data['description'];
      result$data['description'] = (l$description as String?);
    }
    if (data.containsKey('description_action_title')) {
      final l$description_action_title = data['description_action_title'];
      result$data['description_action_title'] =
          (l$description_action_title as String?);
    }
    if (data.containsKey('description_link')) {
      final l$description_link = data['description_link'];
      result$data['description_link'] = (l$description_link as String?);
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = (l$email as String?);
    }
    if (data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = data['facebook_page_id'];
      result$data['facebook_page_id'] = (l$facebook_page_id as String?);
    }
    if (data.containsKey('feature_latest_post')) {
      final l$feature_latest_post = data['feature_latest_post'];
      result$data['feature_latest_post'] = (l$feature_latest_post as bool?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          (l$latest_station_now_playing_id as int?);
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          (l$latest_station_uptime_id as int?);
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] = (l$order as int?);
    }
    if (data.containsKey('rss_feed')) {
      final l$rss_feed = data['rss_feed'];
      result$data['rss_feed'] = (l$rss_feed as String?);
    }
    if (data.containsKey('slug')) {
      final l$slug = data['slug'];
      result$data['slug'] = (l$slug as String?);
    }
    if (data.containsKey('stream_url')) {
      final l$stream_url = data['stream_url'];
      result$data['stream_url'] = (l$stream_url as String?);
    }
    if (data.containsKey('thumbnail')) {
      final l$thumbnail = data['thumbnail'];
      result$data['thumbnail'] = (l$thumbnail as String?);
    }
    if (data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = data['thumbnail_url'];
      result$data['thumbnail_url'] = (l$thumbnail_url as String?);
    }
    if (data.containsKey('title')) {
      final l$title = data['title'];
      result$data['title'] = (l$title as String?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = (l$updated_at as String?);
    }
    if (data.containsKey('website')) {
      final l$website = data['website'];
      result$data['website'] = (l$website as String?);
    }
    return Input$stations_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get created_at => (_$data['created_at'] as String?);

  String? get description => (_$data['description'] as String?);

  String? get description_action_title =>
      (_$data['description_action_title'] as String?);

  String? get description_link => (_$data['description_link'] as String?);

  String? get email => (_$data['email'] as String?);

  String? get facebook_page_id => (_$data['facebook_page_id'] as String?);

  bool? get feature_latest_post => (_$data['feature_latest_post'] as bool?);

  int? get id => (_$data['id'] as int?);

  int? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as int?);

  int? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as int?);

  int? get order => (_$data['order'] as int?);

  String? get rss_feed => (_$data['rss_feed'] as String?);

  String? get slug => (_$data['slug'] as String?);

  String? get stream_url => (_$data['stream_url'] as String?);

  String? get thumbnail => (_$data['thumbnail'] as String?);

  String? get thumbnail_url => (_$data['thumbnail_url'] as String?);

  String? get title => (_$data['title'] as String?);

  String? get updated_at => (_$data['updated_at'] as String?);

  String? get website => (_$data['website'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at;
    }
    if (_$data.containsKey('description')) {
      final l$description = description;
      result$data['description'] = l$description;
    }
    if (_$data.containsKey('description_action_title')) {
      final l$description_action_title = description_action_title;
      result$data['description_action_title'] = l$description_action_title;
    }
    if (_$data.containsKey('description_link')) {
      final l$description_link = description_link;
      result$data['description_link'] = l$description_link;
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email;
    }
    if (_$data.containsKey('facebook_page_id')) {
      final l$facebook_page_id = facebook_page_id;
      result$data['facebook_page_id'] = l$facebook_page_id;
    }
    if (_$data.containsKey('feature_latest_post')) {
      final l$feature_latest_post = feature_latest_post;
      result$data['feature_latest_post'] = l$feature_latest_post;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id;
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] = l$latest_station_uptime_id;
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] = l$order;
    }
    if (_$data.containsKey('rss_feed')) {
      final l$rss_feed = rss_feed;
      result$data['rss_feed'] = l$rss_feed;
    }
    if (_$data.containsKey('slug')) {
      final l$slug = slug;
      result$data['slug'] = l$slug;
    }
    if (_$data.containsKey('stream_url')) {
      final l$stream_url = stream_url;
      result$data['stream_url'] = l$stream_url;
    }
    if (_$data.containsKey('thumbnail')) {
      final l$thumbnail = thumbnail;
      result$data['thumbnail'] = l$thumbnail;
    }
    if (_$data.containsKey('thumbnail_url')) {
      final l$thumbnail_url = thumbnail_url;
      result$data['thumbnail_url'] = l$thumbnail_url;
    }
    if (_$data.containsKey('title')) {
      final l$title = title;
      result$data['title'] = l$title;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at;
    }
    if (_$data.containsKey('website')) {
      final l$website = website;
      result$data['website'] = l$website;
    }
    return result$data;
  }

  CopyWith$Input$stations_stream_cursor_value_input<
          Input$stations_stream_cursor_value_input>
      get copyWith => CopyWith$Input$stations_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (_$data.containsKey('description') !=
        other._$data.containsKey('description')) {
      return false;
    }
    if (l$description != lOther$description) {
      return false;
    }
    final l$description_action_title = description_action_title;
    final lOther$description_action_title = other.description_action_title;
    if (_$data.containsKey('description_action_title') !=
        other._$data.containsKey('description_action_title')) {
      return false;
    }
    if (l$description_action_title != lOther$description_action_title) {
      return false;
    }
    final l$description_link = description_link;
    final lOther$description_link = other.description_link;
    if (_$data.containsKey('description_link') !=
        other._$data.containsKey('description_link')) {
      return false;
    }
    if (l$description_link != lOther$description_link) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$facebook_page_id = facebook_page_id;
    final lOther$facebook_page_id = other.facebook_page_id;
    if (_$data.containsKey('facebook_page_id') !=
        other._$data.containsKey('facebook_page_id')) {
      return false;
    }
    if (l$facebook_page_id != lOther$facebook_page_id) {
      return false;
    }
    final l$feature_latest_post = feature_latest_post;
    final lOther$feature_latest_post = other.feature_latest_post;
    if (_$data.containsKey('feature_latest_post') !=
        other._$data.containsKey('feature_latest_post')) {
      return false;
    }
    if (l$feature_latest_post != lOther$feature_latest_post) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    final l$rss_feed = rss_feed;
    final lOther$rss_feed = other.rss_feed;
    if (_$data.containsKey('rss_feed') !=
        other._$data.containsKey('rss_feed')) {
      return false;
    }
    if (l$rss_feed != lOther$rss_feed) {
      return false;
    }
    final l$slug = slug;
    final lOther$slug = other.slug;
    if (_$data.containsKey('slug') != other._$data.containsKey('slug')) {
      return false;
    }
    if (l$slug != lOther$slug) {
      return false;
    }
    final l$stream_url = stream_url;
    final lOther$stream_url = other.stream_url;
    if (_$data.containsKey('stream_url') !=
        other._$data.containsKey('stream_url')) {
      return false;
    }
    if (l$stream_url != lOther$stream_url) {
      return false;
    }
    final l$thumbnail = thumbnail;
    final lOther$thumbnail = other.thumbnail;
    if (_$data.containsKey('thumbnail') !=
        other._$data.containsKey('thumbnail')) {
      return false;
    }
    if (l$thumbnail != lOther$thumbnail) {
      return false;
    }
    final l$thumbnail_url = thumbnail_url;
    final lOther$thumbnail_url = other.thumbnail_url;
    if (_$data.containsKey('thumbnail_url') !=
        other._$data.containsKey('thumbnail_url')) {
      return false;
    }
    if (l$thumbnail_url != lOther$thumbnail_url) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (_$data.containsKey('title') != other._$data.containsKey('title')) {
      return false;
    }
    if (l$title != lOther$title) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$website = website;
    final lOther$website = other.website;
    if (_$data.containsKey('website') != other._$data.containsKey('website')) {
      return false;
    }
    if (l$website != lOther$website) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$description = description;
    final l$description_action_title = description_action_title;
    final l$description_link = description_link;
    final l$email = email;
    final l$facebook_page_id = facebook_page_id;
    final l$feature_latest_post = feature_latest_post;
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    final l$rss_feed = rss_feed;
    final l$slug = slug;
    final l$stream_url = stream_url;
    final l$thumbnail = thumbnail;
    final l$thumbnail_url = thumbnail_url;
    final l$title = title;
    final l$updated_at = updated_at;
    final l$website = website;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('description') ? l$description : const {},
      _$data.containsKey('description_action_title')
          ? l$description_action_title
          : const {},
      _$data.containsKey('description_link') ? l$description_link : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('facebook_page_id') ? l$facebook_page_id : const {},
      _$data.containsKey('feature_latest_post')
          ? l$feature_latest_post
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
      _$data.containsKey('rss_feed') ? l$rss_feed : const {},
      _$data.containsKey('slug') ? l$slug : const {},
      _$data.containsKey('stream_url') ? l$stream_url : const {},
      _$data.containsKey('thumbnail') ? l$thumbnail : const {},
      _$data.containsKey('thumbnail_url') ? l$thumbnail_url : const {},
      _$data.containsKey('title') ? l$title : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('website') ? l$website : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$stations_stream_cursor_value_input(
    Input$stations_stream_cursor_value_input instance,
    TRes Function(Input$stations_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$stations_stream_cursor_value_input;

  factory CopyWith$Input$stations_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_stream_cursor_value_input;

  TRes call({
    String? created_at,
    String? description,
    String? description_action_title,
    String? description_link,
    String? email,
    String? facebook_page_id,
    bool? feature_latest_post,
    int? id,
    int? latest_station_now_playing_id,
    int? latest_station_uptime_id,
    int? order,
    String? rss_feed,
    String? slug,
    String? stream_url,
    String? thumbnail,
    String? thumbnail_url,
    String? title,
    String? updated_at,
    String? website,
  });
}

class _CopyWithImpl$Input$stations_stream_cursor_value_input<TRes>
    implements CopyWith$Input$stations_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$stations_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$stations_stream_cursor_value_input _instance;

  final TRes Function(Input$stations_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? description = _undefined,
    Object? description_action_title = _undefined,
    Object? description_link = _undefined,
    Object? email = _undefined,
    Object? facebook_page_id = _undefined,
    Object? feature_latest_post = _undefined,
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
    Object? rss_feed = _undefined,
    Object? slug = _undefined,
    Object? stream_url = _undefined,
    Object? thumbnail = _undefined,
    Object? thumbnail_url = _undefined,
    Object? title = _undefined,
    Object? updated_at = _undefined,
    Object? website = _undefined,
  }) =>
      _then(Input$stations_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as String?),
        if (description != _undefined) 'description': (description as String?),
        if (description_action_title != _undefined)
          'description_action_title': (description_action_title as String?),
        if (description_link != _undefined)
          'description_link': (description_link as String?),
        if (email != _undefined) 'email': (email as String?),
        if (facebook_page_id != _undefined)
          'facebook_page_id': (facebook_page_id as String?),
        if (feature_latest_post != _undefined)
          'feature_latest_post': (feature_latest_post as bool?),
        if (id != _undefined) 'id': (id as int?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as int?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id': (latest_station_uptime_id as int?),
        if (order != _undefined) 'order': (order as int?),
        if (rss_feed != _undefined) 'rss_feed': (rss_feed as String?),
        if (slug != _undefined) 'slug': (slug as String?),
        if (stream_url != _undefined) 'stream_url': (stream_url as String?),
        if (thumbnail != _undefined) 'thumbnail': (thumbnail as String?),
        if (thumbnail_url != _undefined)
          'thumbnail_url': (thumbnail_url as String?),
        if (title != _undefined) 'title': (title as String?),
        if (updated_at != _undefined) 'updated_at': (updated_at as String?),
        if (website != _undefined) 'website': (website as String?),
      }));
}

class _CopyWithStubImpl$Input$stations_stream_cursor_value_input<TRes>
    implements CopyWith$Input$stations_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$stations_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? created_at,
    String? description,
    String? description_action_title,
    String? description_link,
    String? email,
    String? facebook_page_id,
    bool? feature_latest_post,
    int? id,
    int? latest_station_now_playing_id,
    int? latest_station_uptime_id,
    int? order,
    String? rss_feed,
    String? slug,
    String? stream_url,
    String? thumbnail,
    String? thumbnail_url,
    String? title,
    String? updated_at,
    String? website,
  }) =>
      _res;
}

class Input$stations_sum_order_by {
  factory Input$stations_sum_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_sum_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_sum_order_by._(this._$data);

  factory Input$stations_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_sum_order_by<Input$stations_sum_order_by>
      get copyWith => CopyWith$Input$stations_sum_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_sum_order_by<TRes> {
  factory CopyWith$Input$stations_sum_order_by(
    Input$stations_sum_order_by instance,
    TRes Function(Input$stations_sum_order_by) then,
  ) = _CopyWithImpl$Input$stations_sum_order_by;

  factory CopyWith$Input$stations_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_sum_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_sum_order_by<TRes>
    implements CopyWith$Input$stations_sum_order_by<TRes> {
  _CopyWithImpl$Input$stations_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_sum_order_by _instance;

  final TRes Function(Input$stations_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_sum_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_sum_order_by<TRes>
    implements CopyWith$Input$stations_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$stations_uptime_aggregate_order_by {
  factory Input$stations_uptime_aggregate_order_by({
    Input$stations_uptime_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_uptime_max_order_by? max,
    Input$stations_uptime_min_order_by? min,
    Input$stations_uptime_stddev_order_by? stddev,
    Input$stations_uptime_stddev_pop_order_by? stddev_pop,
    Input$stations_uptime_stddev_samp_order_by? stddev_samp,
    Input$stations_uptime_sum_order_by? sum,
    Input$stations_uptime_var_pop_order_by? var_pop,
    Input$stations_uptime_var_samp_order_by? var_samp,
    Input$stations_uptime_variance_order_by? variance,
  }) =>
      Input$stations_uptime_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$stations_uptime_aggregate_order_by._(this._$data);

  factory Input$stations_uptime_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$stations_uptime_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$stations_uptime_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$stations_uptime_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$stations_uptime_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$stations_uptime_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$stations_uptime_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$stations_uptime_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$stations_uptime_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$stations_uptime_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$stations_uptime_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$stations_uptime_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$stations_uptime_avg_order_by? get avg =>
      (_$data['avg'] as Input$stations_uptime_avg_order_by?);

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);

  Input$stations_uptime_max_order_by? get max =>
      (_$data['max'] as Input$stations_uptime_max_order_by?);

  Input$stations_uptime_min_order_by? get min =>
      (_$data['min'] as Input$stations_uptime_min_order_by?);

  Input$stations_uptime_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$stations_uptime_stddev_order_by?);

  Input$stations_uptime_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$stations_uptime_stddev_pop_order_by?);

  Input$stations_uptime_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$stations_uptime_stddev_samp_order_by?);

  Input$stations_uptime_sum_order_by? get sum =>
      (_$data['sum'] as Input$stations_uptime_sum_order_by?);

  Input$stations_uptime_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$stations_uptime_var_pop_order_by?);

  Input$stations_uptime_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$stations_uptime_var_samp_order_by?);

  Input$stations_uptime_variance_order_by? get variance =>
      (_$data['variance'] as Input$stations_uptime_variance_order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_aggregate_order_by<
          Input$stations_uptime_aggregate_order_by>
      get copyWith => CopyWith$Input$stations_uptime_aggregate_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_aggregate_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_aggregate_order_by(
    Input$stations_uptime_aggregate_order_by instance,
    TRes Function(Input$stations_uptime_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_aggregate_order_by;

  factory CopyWith$Input$stations_uptime_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_aggregate_order_by;

  TRes call({
    Input$stations_uptime_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_uptime_max_order_by? max,
    Input$stations_uptime_min_order_by? min,
    Input$stations_uptime_stddev_order_by? stddev,
    Input$stations_uptime_stddev_pop_order_by? stddev_pop,
    Input$stations_uptime_stddev_samp_order_by? stddev_samp,
    Input$stations_uptime_sum_order_by? sum,
    Input$stations_uptime_var_pop_order_by? var_pop,
    Input$stations_uptime_var_samp_order_by? var_samp,
    Input$stations_uptime_variance_order_by? variance,
  });
  CopyWith$Input$stations_uptime_avg_order_by<TRes> get avg;
  CopyWith$Input$stations_uptime_max_order_by<TRes> get max;
  CopyWith$Input$stations_uptime_min_order_by<TRes> get min;
  CopyWith$Input$stations_uptime_stddev_order_by<TRes> get stddev;
  CopyWith$Input$stations_uptime_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$stations_uptime_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$stations_uptime_sum_order_by<TRes> get sum;
  CopyWith$Input$stations_uptime_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$stations_uptime_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$stations_uptime_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$stations_uptime_aggregate_order_by<TRes>
    implements CopyWith$Input$stations_uptime_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_aggregate_order_by _instance;

  final TRes Function(Input$stations_uptime_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$stations_uptime_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined)
          'avg': (avg as Input$stations_uptime_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$stations_uptime_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$stations_uptime_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$stations_uptime_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop':
              (stddev_pop as Input$stations_uptime_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp':
              (stddev_samp as Input$stations_uptime_stddev_samp_order_by?),
        if (sum != _undefined)
          'sum': (sum as Input$stations_uptime_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$stations_uptime_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$stations_uptime_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$stations_uptime_variance_order_by?),
      }));

  CopyWith$Input$stations_uptime_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$stations_uptime_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_avg_order_by(
            local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$stations_uptime_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$stations_uptime_max_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$stations_uptime_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$stations_uptime_min_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_min_order_by(
            local$min, (e) => call(min: e));
  }

  CopyWith$Input$stations_uptime_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$stations_uptime_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$stations_uptime_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$stations_uptime_stddev_pop_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_uptime_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$stations_uptime_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$stations_uptime_stddev_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_uptime_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$stations_uptime_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$stations_uptime_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_sum_order_by(
            local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$stations_uptime_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$stations_uptime_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$stations_uptime_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$stations_uptime_var_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_uptime_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$stations_uptime_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$stations_uptime_variance_order_by.stub(
            _then(_instance))
        : CopyWith$Input$stations_uptime_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$stations_uptime_aggregate_order_by<TRes>
    implements CopyWith$Input$stations_uptime_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$stations_uptime_avg_order_by? avg,
    Enum$order_by? count,
    Input$stations_uptime_max_order_by? max,
    Input$stations_uptime_min_order_by? min,
    Input$stations_uptime_stddev_order_by? stddev,
    Input$stations_uptime_stddev_pop_order_by? stddev_pop,
    Input$stations_uptime_stddev_samp_order_by? stddev_samp,
    Input$stations_uptime_sum_order_by? sum,
    Input$stations_uptime_var_pop_order_by? var_pop,
    Input$stations_uptime_var_samp_order_by? var_samp,
    Input$stations_uptime_variance_order_by? variance,
  }) =>
      _res;

  CopyWith$Input$stations_uptime_avg_order_by<TRes> get avg =>
      CopyWith$Input$stations_uptime_avg_order_by.stub(_res);

  CopyWith$Input$stations_uptime_max_order_by<TRes> get max =>
      CopyWith$Input$stations_uptime_max_order_by.stub(_res);

  CopyWith$Input$stations_uptime_min_order_by<TRes> get min =>
      CopyWith$Input$stations_uptime_min_order_by.stub(_res);

  CopyWith$Input$stations_uptime_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$stations_uptime_stddev_order_by.stub(_res);

  CopyWith$Input$stations_uptime_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$stations_uptime_stddev_pop_order_by.stub(_res);

  CopyWith$Input$stations_uptime_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$stations_uptime_stddev_samp_order_by.stub(_res);

  CopyWith$Input$stations_uptime_sum_order_by<TRes> get sum =>
      CopyWith$Input$stations_uptime_sum_order_by.stub(_res);

  CopyWith$Input$stations_uptime_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$stations_uptime_var_pop_order_by.stub(_res);

  CopyWith$Input$stations_uptime_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$stations_uptime_var_samp_order_by.stub(_res);

  CopyWith$Input$stations_uptime_variance_order_by<TRes> get variance =>
      CopyWith$Input$stations_uptime_variance_order_by.stub(_res);
}

class Input$stations_uptime_avg_order_by {
  factory Input$stations_uptime_avg_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_avg_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_avg_order_by._(this._$data);

  factory Input$stations_uptime_avg_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_avg_order_by<
          Input$stations_uptime_avg_order_by>
      get copyWith => CopyWith$Input$stations_uptime_avg_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_avg_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_avg_order_by(
    Input$stations_uptime_avg_order_by instance,
    TRes Function(Input$stations_uptime_avg_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_avg_order_by;

  factory CopyWith$Input$stations_uptime_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_avg_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_avg_order_by<TRes>
    implements CopyWith$Input$stations_uptime_avg_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_avg_order_by _instance;

  final TRes Function(Input$stations_uptime_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_avg_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_avg_order_by<TRes>
    implements CopyWith$Input$stations_uptime_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_uptime_bool_exp {
  factory Input$stations_uptime_bool_exp({
    List<Input$stations_uptime_bool_exp>? $_and,
    Input$stations_uptime_bool_exp? $_not,
    List<Input$stations_uptime_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$Boolean_comparison_exp? is_up,
    Input$Int_comparison_exp? latency_ms,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$stations_bool_exp? stations,
    Input$timestamptz_comparison_exp? timestamp,
  }) =>
      Input$stations_uptime_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (id != null) r'id': id,
        if (is_up != null) r'is_up': is_up,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (stations != null) r'stations': stations,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_uptime_bool_exp._(this._$data);

  factory Input$stations_uptime_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$stations_uptime_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$stations_uptime_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$stations_uptime_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('is_up')) {
      final l$is_up = data['is_up'];
      result$data['is_up'] = l$is_up == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$is_up as Map<String, dynamic>));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$latency_ms as Map<String, dynamic>));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_bool_exp.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$station_id as Map<String, dynamic>));
    }
    if (data.containsKey('stations')) {
      final l$stations = data['stations'];
      result$data['stations'] = l$stations == null
          ? null
          : Input$stations_bool_exp.fromJson(
              (l$stations as Map<String, dynamic>));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$timestamp as Map<String, dynamic>));
    }
    return Input$stations_uptime_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$stations_uptime_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$stations_uptime_bool_exp>?);

  Input$stations_uptime_bool_exp? get $_not =>
      (_$data['_not'] as Input$stations_uptime_bool_exp?);

  List<Input$stations_uptime_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$stations_uptime_bool_exp>?);

  Input$Int_comparison_exp? get id =>
      (_$data['id'] as Input$Int_comparison_exp?);

  Input$Boolean_comparison_exp? get is_up =>
      (_$data['is_up'] as Input$Boolean_comparison_exp?);

  Input$Int_comparison_exp? get latency_ms =>
      (_$data['latency_ms'] as Input$Int_comparison_exp?);

  Input$stations_bool_exp? get station =>
      (_$data['station'] as Input$stations_bool_exp?);

  Input$Int_comparison_exp? get station_id =>
      (_$data['station_id'] as Input$Int_comparison_exp?);

  Input$stations_bool_exp? get stations =>
      (_$data['stations'] as Input$stations_bool_exp?);

  Input$timestamptz_comparison_exp? get timestamp =>
      (_$data['timestamp'] as Input$timestamptz_comparison_exp?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('is_up')) {
      final l$is_up = is_up;
      result$data['is_up'] = l$is_up?.toJson();
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] = l$latency_ms?.toJson();
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id?.toJson();
    }
    if (_$data.containsKey('stations')) {
      final l$stations = stations;
      result$data['stations'] = l$stations?.toJson();
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] = l$timestamp?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_bool_exp<Input$stations_uptime_bool_exp>
      get copyWith => CopyWith$Input$stations_uptime_bool_exp(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$is_up = is_up;
    final lOther$is_up = other.is_up;
    if (_$data.containsKey('is_up') != other._$data.containsKey('is_up')) {
      return false;
    }
    if (l$is_up != lOther$is_up) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$stations = stations;
    final lOther$stations = other.stations;
    if (_$data.containsKey('stations') !=
        other._$data.containsKey('stations')) {
      return false;
    }
    if (l$stations != lOther$stations) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$id = id;
    final l$is_up = is_up;
    final l$latency_ms = latency_ms;
    final l$station = station;
    final l$station_id = station_id;
    final l$stations = stations;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('is_up') ? l$is_up : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('stations') ? l$stations : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_bool_exp<TRes> {
  factory CopyWith$Input$stations_uptime_bool_exp(
    Input$stations_uptime_bool_exp instance,
    TRes Function(Input$stations_uptime_bool_exp) then,
  ) = _CopyWithImpl$Input$stations_uptime_bool_exp;

  factory CopyWith$Input$stations_uptime_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_bool_exp;

  TRes call({
    List<Input$stations_uptime_bool_exp>? $_and,
    Input$stations_uptime_bool_exp? $_not,
    List<Input$stations_uptime_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$Boolean_comparison_exp? is_up,
    Input$Int_comparison_exp? latency_ms,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$stations_bool_exp? stations,
    Input$timestamptz_comparison_exp? timestamp,
  });
  TRes $_and(
      Iterable<Input$stations_uptime_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$stations_uptime_bool_exp<
                      Input$stations_uptime_bool_exp>>?)
          _fn);
  CopyWith$Input$stations_uptime_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$stations_uptime_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$stations_uptime_bool_exp<
                      Input$stations_uptime_bool_exp>>?)
          _fn);
  CopyWith$Input$Int_comparison_exp<TRes> get id;
  CopyWith$Input$Boolean_comparison_exp<TRes> get is_up;
  CopyWith$Input$Int_comparison_exp<TRes> get latency_ms;
  CopyWith$Input$stations_bool_exp<TRes> get station;
  CopyWith$Input$Int_comparison_exp<TRes> get station_id;
  CopyWith$Input$stations_bool_exp<TRes> get stations;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get timestamp;
}

class _CopyWithImpl$Input$stations_uptime_bool_exp<TRes>
    implements CopyWith$Input$stations_uptime_bool_exp<TRes> {
  _CopyWithImpl$Input$stations_uptime_bool_exp(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_bool_exp _instance;

  final TRes Function(Input$stations_uptime_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? id = _undefined,
    Object? is_up = _undefined,
    Object? latency_ms = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? stations = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_uptime_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$stations_uptime_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$stations_uptime_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$stations_uptime_bool_exp>?),
        if (id != _undefined) 'id': (id as Input$Int_comparison_exp?),
        if (is_up != _undefined)
          'is_up': (is_up as Input$Boolean_comparison_exp?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Input$Int_comparison_exp?),
        if (station != _undefined)
          'station': (station as Input$stations_bool_exp?),
        if (station_id != _undefined)
          'station_id': (station_id as Input$Int_comparison_exp?),
        if (stations != _undefined)
          'stations': (stations as Input$stations_bool_exp?),
        if (timestamp != _undefined)
          'timestamp': (timestamp as Input$timestamptz_comparison_exp?),
      }));

  TRes $_and(
          Iterable<Input$stations_uptime_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$stations_uptime_bool_exp<
                          Input$stations_uptime_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$stations_uptime_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$stations_uptime_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$stations_uptime_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_uptime_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$stations_uptime_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$stations_uptime_bool_exp<
                          Input$stations_uptime_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$stations_uptime_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());

  CopyWith$Input$Int_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get is_up {
    final local$is_up = _instance.is_up;
    return local$is_up == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$is_up, (e) => call(is_up: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get latency_ms {
    final local$latency_ms = _instance.latency_ms;
    return local$latency_ms == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$latency_ms, (e) => call(latency_ms: e));
  }

  CopyWith$Input$stations_bool_exp<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(
            local$station, (e) => call(station: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get station_id {
    final local$station_id = _instance.station_id;
    return local$station_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$station_id, (e) => call(station_id: e));
  }

  CopyWith$Input$stations_bool_exp<TRes> get stations {
    final local$stations = _instance.stations;
    return local$stations == null
        ? CopyWith$Input$stations_bool_exp.stub(_then(_instance))
        : CopyWith$Input$stations_bool_exp(
            local$stations, (e) => call(stations: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get timestamp {
    final local$timestamp = _instance.timestamp;
    return local$timestamp == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$timestamp, (e) => call(timestamp: e));
  }
}

class _CopyWithStubImpl$Input$stations_uptime_bool_exp<TRes>
    implements CopyWith$Input$stations_uptime_bool_exp<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$stations_uptime_bool_exp>? $_and,
    Input$stations_uptime_bool_exp? $_not,
    List<Input$stations_uptime_bool_exp>? $_or,
    Input$Int_comparison_exp? id,
    Input$Boolean_comparison_exp? is_up,
    Input$Int_comparison_exp? latency_ms,
    Input$stations_bool_exp? station,
    Input$Int_comparison_exp? station_id,
    Input$stations_bool_exp? stations,
    Input$timestamptz_comparison_exp? timestamp,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$stations_uptime_bool_exp<TRes> get $_not =>
      CopyWith$Input$stations_uptime_bool_exp.stub(_res);

  $_or(_fn) => _res;

  CopyWith$Input$Int_comparison_exp<TRes> get id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$Boolean_comparison_exp<TRes> get is_up =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get latency_ms =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$stations_bool_exp<TRes> get station =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  CopyWith$Input$Int_comparison_exp<TRes> get station_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);

  CopyWith$Input$stations_bool_exp<TRes> get stations =>
      CopyWith$Input$stations_bool_exp.stub(_res);

  CopyWith$Input$timestamptz_comparison_exp<TRes> get timestamp =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$stations_uptime_max_order_by {
  factory Input$stations_uptime_max_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      Input$stations_uptime_max_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_uptime_max_order_by._(this._$data);

  factory Input$stations_uptime_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : fromJson$Enum$order_by((l$timestamp as String));
    }
    return Input$stations_uptime_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get timestamp => (_$data['timestamp'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] =
          l$timestamp == null ? null : toJson$Enum$order_by(l$timestamp);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_max_order_by<
          Input$stations_uptime_max_order_by>
      get copyWith => CopyWith$Input$stations_uptime_max_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_max_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_max_order_by(
    Input$stations_uptime_max_order_by instance,
    TRes Function(Input$stations_uptime_max_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_max_order_by;

  factory CopyWith$Input$stations_uptime_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_max_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  });
}

class _CopyWithImpl$Input$stations_uptime_max_order_by<TRes>
    implements CopyWith$Input$stations_uptime_max_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_max_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_max_order_by _instance;

  final TRes Function(Input$stations_uptime_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_uptime_max_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (timestamp != _undefined) 'timestamp': (timestamp as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_max_order_by<TRes>
    implements CopyWith$Input$stations_uptime_max_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      _res;
}

class Input$stations_uptime_min_order_by {
  factory Input$stations_uptime_min_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      Input$stations_uptime_min_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_uptime_min_order_by._(this._$data);

  factory Input$stations_uptime_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : fromJson$Enum$order_by((l$timestamp as String));
    }
    return Input$stations_uptime_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Enum$order_by? get timestamp => (_$data['timestamp'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] =
          l$timestamp == null ? null : toJson$Enum$order_by(l$timestamp);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_min_order_by<
          Input$stations_uptime_min_order_by>
      get copyWith => CopyWith$Input$stations_uptime_min_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_min_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_min_order_by(
    Input$stations_uptime_min_order_by instance,
    TRes Function(Input$stations_uptime_min_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_min_order_by;

  factory CopyWith$Input$stations_uptime_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_min_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  });
}

class _CopyWithImpl$Input$stations_uptime_min_order_by<TRes>
    implements CopyWith$Input$stations_uptime_min_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_min_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_min_order_by _instance;

  final TRes Function(Input$stations_uptime_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_uptime_min_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (timestamp != _undefined) 'timestamp': (timestamp as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_min_order_by<TRes>
    implements CopyWith$Input$stations_uptime_min_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
    Enum$order_by? timestamp,
  }) =>
      _res;
}

class Input$stations_uptime_order_by {
  factory Input$stations_uptime_order_by({
    Enum$order_by? id,
    Enum$order_by? is_up,
    Enum$order_by? latency_ms,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Input$stations_aggregate_order_by? stations_aggregate,
    Enum$order_by? timestamp,
  }) =>
      Input$stations_uptime_order_by._({
        if (id != null) r'id': id,
        if (is_up != null) r'is_up': is_up,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station != null) r'station': station,
        if (station_id != null) r'station_id': station_id,
        if (stations_aggregate != null)
          r'stations_aggregate': stations_aggregate,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_uptime_order_by._(this._$data);

  factory Input$stations_uptime_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('is_up')) {
      final l$is_up = data['is_up'];
      result$data['is_up'] =
          l$is_up == null ? null : fromJson$Enum$order_by((l$is_up as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station')) {
      final l$station = data['station'];
      result$data['station'] = l$station == null
          ? null
          : Input$stations_order_by.fromJson(
              (l$station as Map<String, dynamic>));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    if (data.containsKey('stations_aggregate')) {
      final l$stations_aggregate = data['stations_aggregate'];
      result$data['stations_aggregate'] = l$stations_aggregate == null
          ? null
          : Input$stations_aggregate_order_by.fromJson(
              (l$stations_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = l$timestamp == null
          ? null
          : fromJson$Enum$order_by((l$timestamp as String));
    }
    return Input$stations_uptime_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get is_up => (_$data['is_up'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Input$stations_order_by? get station =>
      (_$data['station'] as Input$stations_order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Input$stations_aggregate_order_by? get stations_aggregate =>
      (_$data['stations_aggregate'] as Input$stations_aggregate_order_by?);

  Enum$order_by? get timestamp => (_$data['timestamp'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('is_up')) {
      final l$is_up = is_up;
      result$data['is_up'] =
          l$is_up == null ? null : toJson$Enum$order_by(l$is_up);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station')) {
      final l$station = station;
      result$data['station'] = l$station?.toJson();
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    if (_$data.containsKey('stations_aggregate')) {
      final l$stations_aggregate = stations_aggregate;
      result$data['stations_aggregate'] = l$stations_aggregate?.toJson();
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] =
          l$timestamp == null ? null : toJson$Enum$order_by(l$timestamp);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_order_by<Input$stations_uptime_order_by>
      get copyWith => CopyWith$Input$stations_uptime_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$is_up = is_up;
    final lOther$is_up = other.is_up;
    if (_$data.containsKey('is_up') != other._$data.containsKey('is_up')) {
      return false;
    }
    if (l$is_up != lOther$is_up) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station = station;
    final lOther$station = other.station;
    if (_$data.containsKey('station') != other._$data.containsKey('station')) {
      return false;
    }
    if (l$station != lOther$station) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$stations_aggregate = stations_aggregate;
    final lOther$stations_aggregate = other.stations_aggregate;
    if (_$data.containsKey('stations_aggregate') !=
        other._$data.containsKey('stations_aggregate')) {
      return false;
    }
    if (l$stations_aggregate != lOther$stations_aggregate) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$is_up = is_up;
    final l$latency_ms = latency_ms;
    final l$station = station;
    final l$station_id = station_id;
    final l$stations_aggregate = stations_aggregate;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('is_up') ? l$is_up : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station') ? l$station : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('stations_aggregate')
          ? l$stations_aggregate
          : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_order_by(
    Input$stations_uptime_order_by instance,
    TRes Function(Input$stations_uptime_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_order_by;

  factory CopyWith$Input$stations_uptime_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? is_up,
    Enum$order_by? latency_ms,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Input$stations_aggregate_order_by? stations_aggregate,
    Enum$order_by? timestamp,
  });
  CopyWith$Input$stations_order_by<TRes> get station;
  CopyWith$Input$stations_aggregate_order_by<TRes> get stations_aggregate;
}

class _CopyWithImpl$Input$stations_uptime_order_by<TRes>
    implements CopyWith$Input$stations_uptime_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_order_by _instance;

  final TRes Function(Input$stations_uptime_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? is_up = _undefined,
    Object? latency_ms = _undefined,
    Object? station = _undefined,
    Object? station_id = _undefined,
    Object? stations_aggregate = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_uptime_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (is_up != _undefined) 'is_up': (is_up as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station != _undefined)
          'station': (station as Input$stations_order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
        if (stations_aggregate != _undefined)
          'stations_aggregate':
              (stations_aggregate as Input$stations_aggregate_order_by?),
        if (timestamp != _undefined) 'timestamp': (timestamp as Enum$order_by?),
      }));

  CopyWith$Input$stations_order_by<TRes> get station {
    final local$station = _instance.station;
    return local$station == null
        ? CopyWith$Input$stations_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_order_by(
            local$station, (e) => call(station: e));
  }

  CopyWith$Input$stations_aggregate_order_by<TRes> get stations_aggregate {
    final local$stations_aggregate = _instance.stations_aggregate;
    return local$stations_aggregate == null
        ? CopyWith$Input$stations_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$stations_aggregate_order_by(
            local$stations_aggregate, (e) => call(stations_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$stations_uptime_order_by<TRes>
    implements CopyWith$Input$stations_uptime_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? is_up,
    Enum$order_by? latency_ms,
    Input$stations_order_by? station,
    Enum$order_by? station_id,
    Input$stations_aggregate_order_by? stations_aggregate,
    Enum$order_by? timestamp,
  }) =>
      _res;

  CopyWith$Input$stations_order_by<TRes> get station =>
      CopyWith$Input$stations_order_by.stub(_res);

  CopyWith$Input$stations_aggregate_order_by<TRes> get stations_aggregate =>
      CopyWith$Input$stations_aggregate_order_by.stub(_res);
}

class Input$stations_uptime_stddev_order_by {
  factory Input$stations_uptime_stddev_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_stddev_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_stddev_order_by._(this._$data);

  factory Input$stations_uptime_stddev_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_stddev_order_by<
          Input$stations_uptime_stddev_order_by>
      get copyWith => CopyWith$Input$stations_uptime_stddev_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_stddev_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_stddev_order_by(
    Input$stations_uptime_stddev_order_by instance,
    TRes Function(Input$stations_uptime_stddev_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_stddev_order_by;

  factory CopyWith$Input$stations_uptime_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_stddev_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_stddev_order_by<TRes>
    implements CopyWith$Input$stations_uptime_stddev_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_stddev_order_by _instance;

  final TRes Function(Input$stations_uptime_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_stddev_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_stddev_order_by<TRes>
    implements CopyWith$Input$stations_uptime_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_uptime_stddev_pop_order_by {
  factory Input$stations_uptime_stddev_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_stddev_pop_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_stddev_pop_order_by._(this._$data);

  factory Input$stations_uptime_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_stddev_pop_order_by<
          Input$stations_uptime_stddev_pop_order_by>
      get copyWith => CopyWith$Input$stations_uptime_stddev_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_stddev_pop_order_by(
    Input$stations_uptime_stddev_pop_order_by instance,
    TRes Function(Input$stations_uptime_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_stddev_pop_order_by;

  factory CopyWith$Input$stations_uptime_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_stddev_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_stddev_pop_order_by<TRes>
    implements CopyWith$Input$stations_uptime_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_stddev_pop_order_by _instance;

  final TRes Function(Input$stations_uptime_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_stddev_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_stddev_pop_order_by<TRes>
    implements CopyWith$Input$stations_uptime_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_uptime_stddev_samp_order_by {
  factory Input$stations_uptime_stddev_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_stddev_samp_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_stddev_samp_order_by._(this._$data);

  factory Input$stations_uptime_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_stddev_samp_order_by<
          Input$stations_uptime_stddev_samp_order_by>
      get copyWith => CopyWith$Input$stations_uptime_stddev_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_stddev_samp_order_by(
    Input$stations_uptime_stddev_samp_order_by instance,
    TRes Function(Input$stations_uptime_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_stddev_samp_order_by;

  factory CopyWith$Input$stations_uptime_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_stddev_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_stddev_samp_order_by<TRes>
    implements CopyWith$Input$stations_uptime_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_stddev_samp_order_by _instance;

  final TRes Function(Input$stations_uptime_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_stddev_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_stddev_samp_order_by<TRes>
    implements CopyWith$Input$stations_uptime_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_uptime_stream_cursor_input {
  factory Input$stations_uptime_stream_cursor_input({
    required Input$stations_uptime_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$stations_uptime_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$stations_uptime_stream_cursor_input._(this._$data);

  factory Input$stations_uptime_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$stations_uptime_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$stations_uptime_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$stations_uptime_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$stations_uptime_stream_cursor_value_input);

  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_stream_cursor_input<
          Input$stations_uptime_stream_cursor_input>
      get copyWith => CopyWith$Input$stations_uptime_stream_cursor_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_stream_cursor_input<TRes> {
  factory CopyWith$Input$stations_uptime_stream_cursor_input(
    Input$stations_uptime_stream_cursor_input instance,
    TRes Function(Input$stations_uptime_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$stations_uptime_stream_cursor_input;

  factory CopyWith$Input$stations_uptime_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_stream_cursor_input;

  TRes call({
    Input$stations_uptime_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$stations_uptime_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$stations_uptime_stream_cursor_input<TRes>
    implements CopyWith$Input$stations_uptime_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$stations_uptime_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_stream_cursor_input _instance;

  final TRes Function(Input$stations_uptime_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$stations_uptime_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$stations_uptime_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));

  CopyWith$Input$stations_uptime_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$stations_uptime_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$stations_uptime_stream_cursor_input<TRes>
    implements CopyWith$Input$stations_uptime_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$stations_uptime_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;

  CopyWith$Input$stations_uptime_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$stations_uptime_stream_cursor_value_input.stub(_res);
}

class Input$stations_uptime_stream_cursor_value_input {
  factory Input$stations_uptime_stream_cursor_value_input({
    int? id,
    bool? is_up,
    int? latency_ms,
    int? station_id,
    String? timestamp,
  }) =>
      Input$stations_uptime_stream_cursor_value_input._({
        if (id != null) r'id': id,
        if (is_up != null) r'is_up': is_up,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
        if (timestamp != null) r'timestamp': timestamp,
      });

  Input$stations_uptime_stream_cursor_value_input._(this._$data);

  factory Input$stations_uptime_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as int?);
    }
    if (data.containsKey('is_up')) {
      final l$is_up = data['is_up'];
      result$data['is_up'] = (l$is_up as bool?);
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = (l$latency_ms as int?);
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = (l$station_id as int?);
    }
    if (data.containsKey('timestamp')) {
      final l$timestamp = data['timestamp'];
      result$data['timestamp'] = (l$timestamp as String?);
    }
    return Input$stations_uptime_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get id => (_$data['id'] as int?);

  bool? get is_up => (_$data['is_up'] as bool?);

  int? get latency_ms => (_$data['latency_ms'] as int?);

  int? get station_id => (_$data['station_id'] as int?);

  String? get timestamp => (_$data['timestamp'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('is_up')) {
      final l$is_up = is_up;
      result$data['is_up'] = l$is_up;
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] = l$latency_ms;
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] = l$station_id;
    }
    if (_$data.containsKey('timestamp')) {
      final l$timestamp = timestamp;
      result$data['timestamp'] = l$timestamp;
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_stream_cursor_value_input<
          Input$stations_uptime_stream_cursor_value_input>
      get copyWith => CopyWith$Input$stations_uptime_stream_cursor_value_input(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$is_up = is_up;
    final lOther$is_up = other.is_up;
    if (_$data.containsKey('is_up') != other._$data.containsKey('is_up')) {
      return false;
    }
    if (l$is_up != lOther$is_up) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (_$data.containsKey('timestamp') !=
        other._$data.containsKey('timestamp')) {
      return false;
    }
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$is_up = is_up;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    final l$timestamp = timestamp;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('is_up') ? l$is_up : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
      _$data.containsKey('timestamp') ? l$timestamp : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$stations_uptime_stream_cursor_value_input(
    Input$stations_uptime_stream_cursor_value_input instance,
    TRes Function(Input$stations_uptime_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$stations_uptime_stream_cursor_value_input;

  factory CopyWith$Input$stations_uptime_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_stream_cursor_value_input;

  TRes call({
    int? id,
    bool? is_up,
    int? latency_ms,
    int? station_id,
    String? timestamp,
  });
}

class _CopyWithImpl$Input$stations_uptime_stream_cursor_value_input<TRes>
    implements CopyWith$Input$stations_uptime_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$stations_uptime_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_stream_cursor_value_input _instance;

  final TRes Function(Input$stations_uptime_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? is_up = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
    Object? timestamp = _undefined,
  }) =>
      _then(Input$stations_uptime_stream_cursor_value_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as int?),
        if (is_up != _undefined) 'is_up': (is_up as bool?),
        if (latency_ms != _undefined) 'latency_ms': (latency_ms as int?),
        if (station_id != _undefined) 'station_id': (station_id as int?),
        if (timestamp != _undefined) 'timestamp': (timestamp as String?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_stream_cursor_value_input<TRes>
    implements CopyWith$Input$stations_uptime_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    int? id,
    bool? is_up,
    int? latency_ms,
    int? station_id,
    String? timestamp,
  }) =>
      _res;
}

class Input$stations_uptime_sum_order_by {
  factory Input$stations_uptime_sum_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_sum_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_sum_order_by._(this._$data);

  factory Input$stations_uptime_sum_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_sum_order_by<
          Input$stations_uptime_sum_order_by>
      get copyWith => CopyWith$Input$stations_uptime_sum_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_sum_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_sum_order_by(
    Input$stations_uptime_sum_order_by instance,
    TRes Function(Input$stations_uptime_sum_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_sum_order_by;

  factory CopyWith$Input$stations_uptime_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_sum_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_sum_order_by<TRes>
    implements CopyWith$Input$stations_uptime_sum_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_sum_order_by _instance;

  final TRes Function(Input$stations_uptime_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_sum_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_sum_order_by<TRes>
    implements CopyWith$Input$stations_uptime_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_uptime_var_pop_order_by {
  factory Input$stations_uptime_var_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_var_pop_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_var_pop_order_by._(this._$data);

  factory Input$stations_uptime_var_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_var_pop_order_by<
          Input$stations_uptime_var_pop_order_by>
      get copyWith => CopyWith$Input$stations_uptime_var_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_var_pop_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_var_pop_order_by(
    Input$stations_uptime_var_pop_order_by instance,
    TRes Function(Input$stations_uptime_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_var_pop_order_by;

  factory CopyWith$Input$stations_uptime_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_var_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_var_pop_order_by<TRes>
    implements CopyWith$Input$stations_uptime_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_var_pop_order_by _instance;

  final TRes Function(Input$stations_uptime_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_var_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_var_pop_order_by<TRes>
    implements CopyWith$Input$stations_uptime_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_uptime_var_samp_order_by {
  factory Input$stations_uptime_var_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_var_samp_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_var_samp_order_by._(this._$data);

  factory Input$stations_uptime_var_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_var_samp_order_by<
          Input$stations_uptime_var_samp_order_by>
      get copyWith => CopyWith$Input$stations_uptime_var_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_var_samp_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_var_samp_order_by(
    Input$stations_uptime_var_samp_order_by instance,
    TRes Function(Input$stations_uptime_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_var_samp_order_by;

  factory CopyWith$Input$stations_uptime_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_var_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_var_samp_order_by<TRes>
    implements CopyWith$Input$stations_uptime_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_var_samp_order_by _instance;

  final TRes Function(Input$stations_uptime_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_var_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_var_samp_order_by<TRes>
    implements CopyWith$Input$stations_uptime_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_uptime_variance_order_by {
  factory Input$stations_uptime_variance_order_by({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      Input$stations_uptime_variance_order_by._({
        if (id != null) r'id': id,
        if (latency_ms != null) r'latency_ms': latency_ms,
        if (station_id != null) r'station_id': station_id,
      });

  Input$stations_uptime_variance_order_by._(this._$data);

  factory Input$stations_uptime_variance_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latency_ms')) {
      final l$latency_ms = data['latency_ms'];
      result$data['latency_ms'] = l$latency_ms == null
          ? null
          : fromJson$Enum$order_by((l$latency_ms as String));
    }
    if (data.containsKey('station_id')) {
      final l$station_id = data['station_id'];
      result$data['station_id'] = l$station_id == null
          ? null
          : fromJson$Enum$order_by((l$station_id as String));
    }
    return Input$stations_uptime_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latency_ms => (_$data['latency_ms'] as Enum$order_by?);

  Enum$order_by? get station_id => (_$data['station_id'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latency_ms')) {
      final l$latency_ms = latency_ms;
      result$data['latency_ms'] =
          l$latency_ms == null ? null : toJson$Enum$order_by(l$latency_ms);
    }
    if (_$data.containsKey('station_id')) {
      final l$station_id = station_id;
      result$data['station_id'] =
          l$station_id == null ? null : toJson$Enum$order_by(l$station_id);
    }
    return result$data;
  }

  CopyWith$Input$stations_uptime_variance_order_by<
          Input$stations_uptime_variance_order_by>
      get copyWith => CopyWith$Input$stations_uptime_variance_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_uptime_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latency_ms = latency_ms;
    final lOther$latency_ms = other.latency_ms;
    if (_$data.containsKey('latency_ms') !=
        other._$data.containsKey('latency_ms')) {
      return false;
    }
    if (l$latency_ms != lOther$latency_ms) {
      return false;
    }
    final l$station_id = station_id;
    final lOther$station_id = other.station_id;
    if (_$data.containsKey('station_id') !=
        other._$data.containsKey('station_id')) {
      return false;
    }
    if (l$station_id != lOther$station_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latency_ms = latency_ms;
    final l$station_id = station_id;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latency_ms') ? l$latency_ms : const {},
      _$data.containsKey('station_id') ? l$station_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_uptime_variance_order_by<TRes> {
  factory CopyWith$Input$stations_uptime_variance_order_by(
    Input$stations_uptime_variance_order_by instance,
    TRes Function(Input$stations_uptime_variance_order_by) then,
  ) = _CopyWithImpl$Input$stations_uptime_variance_order_by;

  factory CopyWith$Input$stations_uptime_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_uptime_variance_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  });
}

class _CopyWithImpl$Input$stations_uptime_variance_order_by<TRes>
    implements CopyWith$Input$stations_uptime_variance_order_by<TRes> {
  _CopyWithImpl$Input$stations_uptime_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_uptime_variance_order_by _instance;

  final TRes Function(Input$stations_uptime_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latency_ms = _undefined,
    Object? station_id = _undefined,
  }) =>
      _then(Input$stations_uptime_variance_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latency_ms != _undefined)
          'latency_ms': (latency_ms as Enum$order_by?),
        if (station_id != _undefined)
          'station_id': (station_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_uptime_variance_order_by<TRes>
    implements CopyWith$Input$stations_uptime_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_uptime_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latency_ms,
    Enum$order_by? station_id,
  }) =>
      _res;
}

class Input$stations_var_pop_order_by {
  factory Input$stations_var_pop_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_var_pop_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_var_pop_order_by._(this._$data);

  factory Input$stations_var_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_var_pop_order_by<Input$stations_var_pop_order_by>
      get copyWith => CopyWith$Input$stations_var_pop_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_var_pop_order_by<TRes> {
  factory CopyWith$Input$stations_var_pop_order_by(
    Input$stations_var_pop_order_by instance,
    TRes Function(Input$stations_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$stations_var_pop_order_by;

  factory CopyWith$Input$stations_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_var_pop_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_var_pop_order_by<TRes>
    implements CopyWith$Input$stations_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$stations_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_var_pop_order_by _instance;

  final TRes Function(Input$stations_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_var_pop_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_var_pop_order_by<TRes>
    implements CopyWith$Input$stations_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$stations_var_samp_order_by {
  factory Input$stations_var_samp_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_var_samp_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_var_samp_order_by._(this._$data);

  factory Input$stations_var_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_var_samp_order_by<Input$stations_var_samp_order_by>
      get copyWith => CopyWith$Input$stations_var_samp_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_var_samp_order_by<TRes> {
  factory CopyWith$Input$stations_var_samp_order_by(
    Input$stations_var_samp_order_by instance,
    TRes Function(Input$stations_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$stations_var_samp_order_by;

  factory CopyWith$Input$stations_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_var_samp_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_var_samp_order_by<TRes>
    implements CopyWith$Input$stations_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$stations_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_var_samp_order_by _instance;

  final TRes Function(Input$stations_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_var_samp_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_var_samp_order_by<TRes>
    implements CopyWith$Input$stations_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$stations_variance_order_by {
  factory Input$stations_variance_order_by({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      Input$stations_variance_order_by._({
        if (id != null) r'id': id,
        if (latest_station_now_playing_id != null)
          r'latest_station_now_playing_id': latest_station_now_playing_id,
        if (latest_station_uptime_id != null)
          r'latest_station_uptime_id': latest_station_uptime_id,
        if (order != null) r'order': order,
      });

  Input$stations_variance_order_by._(this._$data);

  factory Input$stations_variance_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id =
          data['latest_station_now_playing_id'];
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : fromJson$Enum$order_by(
                  (l$latest_station_now_playing_id as String));
    }
    if (data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = data['latest_station_uptime_id'];
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : fromJson$Enum$order_by((l$latest_station_uptime_id as String));
    }
    if (data.containsKey('order')) {
      final l$order = data['order'];
      result$data['order'] =
          l$order == null ? null : fromJson$Enum$order_by((l$order as String));
    }
    return Input$stations_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);

  Enum$order_by? get latest_station_now_playing_id =>
      (_$data['latest_station_now_playing_id'] as Enum$order_by?);

  Enum$order_by? get latest_station_uptime_id =>
      (_$data['latest_station_uptime_id'] as Enum$order_by?);

  Enum$order_by? get order => (_$data['order'] as Enum$order_by?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('latest_station_now_playing_id')) {
      final l$latest_station_now_playing_id = latest_station_now_playing_id;
      result$data['latest_station_now_playing_id'] =
          l$latest_station_now_playing_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_now_playing_id);
    }
    if (_$data.containsKey('latest_station_uptime_id')) {
      final l$latest_station_uptime_id = latest_station_uptime_id;
      result$data['latest_station_uptime_id'] =
          l$latest_station_uptime_id == null
              ? null
              : toJson$Enum$order_by(l$latest_station_uptime_id);
    }
    if (_$data.containsKey('order')) {
      final l$order = order;
      result$data['order'] =
          l$order == null ? null : toJson$Enum$order_by(l$order);
    }
    return result$data;
  }

  CopyWith$Input$stations_variance_order_by<Input$stations_variance_order_by>
      get copyWith => CopyWith$Input$stations_variance_order_by(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$stations_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final lOther$latest_station_now_playing_id =
        other.latest_station_now_playing_id;
    if (_$data.containsKey('latest_station_now_playing_id') !=
        other._$data.containsKey('latest_station_now_playing_id')) {
      return false;
    }
    if (l$latest_station_now_playing_id !=
        lOther$latest_station_now_playing_id) {
      return false;
    }
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final lOther$latest_station_uptime_id = other.latest_station_uptime_id;
    if (_$data.containsKey('latest_station_uptime_id') !=
        other._$data.containsKey('latest_station_uptime_id')) {
      return false;
    }
    if (l$latest_station_uptime_id != lOther$latest_station_uptime_id) {
      return false;
    }
    final l$order = order;
    final lOther$order = other.order;
    if (_$data.containsKey('order') != other._$data.containsKey('order')) {
      return false;
    }
    if (l$order != lOther$order) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$latest_station_now_playing_id = latest_station_now_playing_id;
    final l$latest_station_uptime_id = latest_station_uptime_id;
    final l$order = order;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('latest_station_now_playing_id')
          ? l$latest_station_now_playing_id
          : const {},
      _$data.containsKey('latest_station_uptime_id')
          ? l$latest_station_uptime_id
          : const {},
      _$data.containsKey('order') ? l$order : const {},
    ]);
  }
}

abstract class CopyWith$Input$stations_variance_order_by<TRes> {
  factory CopyWith$Input$stations_variance_order_by(
    Input$stations_variance_order_by instance,
    TRes Function(Input$stations_variance_order_by) then,
  ) = _CopyWithImpl$Input$stations_variance_order_by;

  factory CopyWith$Input$stations_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$stations_variance_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  });
}

class _CopyWithImpl$Input$stations_variance_order_by<TRes>
    implements CopyWith$Input$stations_variance_order_by<TRes> {
  _CopyWithImpl$Input$stations_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$stations_variance_order_by _instance;

  final TRes Function(Input$stations_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? latest_station_now_playing_id = _undefined,
    Object? latest_station_uptime_id = _undefined,
    Object? order = _undefined,
  }) =>
      _then(Input$stations_variance_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (latest_station_now_playing_id != _undefined)
          'latest_station_now_playing_id':
              (latest_station_now_playing_id as Enum$order_by?),
        if (latest_station_uptime_id != _undefined)
          'latest_station_uptime_id':
              (latest_station_uptime_id as Enum$order_by?),
        if (order != _undefined) 'order': (order as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$stations_variance_order_by<TRes>
    implements CopyWith$Input$stations_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$stations_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? latest_station_now_playing_id,
    Enum$order_by? latest_station_uptime_id,
    Enum$order_by? order,
  }) =>
      _res;
}

class Input$String_comparison_exp {
  factory Input$String_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    String? $_ilike,
    List<String>? $_in,
    String? $_iregex,
    bool? $_is_null,
    String? $_like,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    String? $_nilike,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nlike,
    String? $_nregex,
    String? $_nsimilar,
    String? $_regex,
    String? $_similar,
  }) =>
      Input$String_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_ilike != null) r'_ilike': $_ilike,
        if ($_in != null) r'_in': $_in,
        if ($_iregex != null) r'_iregex': $_iregex,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_like != null) r'_like': $_like,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nilike != null) r'_nilike': $_nilike,
        if ($_nin != null) r'_nin': $_nin,
        if ($_niregex != null) r'_niregex': $_niregex,
        if ($_nlike != null) r'_nlike': $_nlike,
        if ($_nregex != null) r'_nregex': $_nregex,
        if ($_nsimilar != null) r'_nsimilar': $_nsimilar,
        if ($_regex != null) r'_regex': $_regex,
        if ($_similar != null) r'_similar': $_similar,
      });

  Input$String_comparison_exp._(this._$data);

  factory Input$String_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_ilike')) {
      final l$$_ilike = data['_ilike'];
      result$data['_ilike'] = (l$$_ilike as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_iregex')) {
      final l$$_iregex = data['_iregex'];
      result$data['_iregex'] = (l$$_iregex as String?);
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_like')) {
      final l$$_like = data['_like'];
      result$data['_like'] = (l$$_like as String?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nilike')) {
      final l$$_nilike = data['_nilike'];
      result$data['_nilike'] = (l$$_nilike as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_niregex')) {
      final l$$_niregex = data['_niregex'];
      result$data['_niregex'] = (l$$_niregex as String?);
    }
    if (data.containsKey('_nlike')) {
      final l$$_nlike = data['_nlike'];
      result$data['_nlike'] = (l$$_nlike as String?);
    }
    if (data.containsKey('_nregex')) {
      final l$$_nregex = data['_nregex'];
      result$data['_nregex'] = (l$$_nregex as String?);
    }
    if (data.containsKey('_nsimilar')) {
      final l$$_nsimilar = data['_nsimilar'];
      result$data['_nsimilar'] = (l$$_nsimilar as String?);
    }
    if (data.containsKey('_regex')) {
      final l$$_regex = data['_regex'];
      result$data['_regex'] = (l$$_regex as String?);
    }
    if (data.containsKey('_similar')) {
      final l$$_similar = data['_similar'];
      result$data['_similar'] = (l$$_similar as String?);
    }
    return Input$String_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);

  String? get $_gt => (_$data['_gt'] as String?);

  String? get $_gte => (_$data['_gte'] as String?);

  String? get $_ilike => (_$data['_ilike'] as String?);

  List<String>? get $_in => (_$data['_in'] as List<String>?);

  String? get $_iregex => (_$data['_iregex'] as String?);

  bool? get $_is_null => (_$data['_is_null'] as bool?);

  String? get $_like => (_$data['_like'] as String?);

  String? get $_lt => (_$data['_lt'] as String?);

  String? get $_lte => (_$data['_lte'] as String?);

  String? get $_neq => (_$data['_neq'] as String?);

  String? get $_nilike => (_$data['_nilike'] as String?);

  List<String>? get $_nin => (_$data['_nin'] as List<String>?);

  String? get $_niregex => (_$data['_niregex'] as String?);

  String? get $_nlike => (_$data['_nlike'] as String?);

  String? get $_nregex => (_$data['_nregex'] as String?);

  String? get $_nsimilar => (_$data['_nsimilar'] as String?);

  String? get $_regex => (_$data['_regex'] as String?);

  String? get $_similar => (_$data['_similar'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_ilike')) {
      final l$$_ilike = $_ilike;
      result$data['_ilike'] = l$$_ilike;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_iregex')) {
      final l$$_iregex = $_iregex;
      result$data['_iregex'] = l$$_iregex;
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_like')) {
      final l$$_like = $_like;
      result$data['_like'] = l$$_like;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nilike')) {
      final l$$_nilike = $_nilike;
      result$data['_nilike'] = l$$_nilike;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    if (_$data.containsKey('_niregex')) {
      final l$$_niregex = $_niregex;
      result$data['_niregex'] = l$$_niregex;
    }
    if (_$data.containsKey('_nlike')) {
      final l$$_nlike = $_nlike;
      result$data['_nlike'] = l$$_nlike;
    }
    if (_$data.containsKey('_nregex')) {
      final l$$_nregex = $_nregex;
      result$data['_nregex'] = l$$_nregex;
    }
    if (_$data.containsKey('_nsimilar')) {
      final l$$_nsimilar = $_nsimilar;
      result$data['_nsimilar'] = l$$_nsimilar;
    }
    if (_$data.containsKey('_regex')) {
      final l$$_regex = $_regex;
      result$data['_regex'] = l$$_regex;
    }
    if (_$data.containsKey('_similar')) {
      final l$$_similar = $_similar;
      result$data['_similar'] = l$$_similar;
    }
    return result$data;
  }

  CopyWith$Input$String_comparison_exp<Input$String_comparison_exp>
      get copyWith => CopyWith$Input$String_comparison_exp(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$String_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_ilike = $_ilike;
    final lOther$$_ilike = other.$_ilike;
    if (_$data.containsKey('_ilike') != other._$data.containsKey('_ilike')) {
      return false;
    }
    if (l$$_ilike != lOther$$_ilike) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_iregex = $_iregex;
    final lOther$$_iregex = other.$_iregex;
    if (_$data.containsKey('_iregex') != other._$data.containsKey('_iregex')) {
      return false;
    }
    if (l$$_iregex != lOther$$_iregex) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_like = $_like;
    final lOther$$_like = other.$_like;
    if (_$data.containsKey('_like') != other._$data.containsKey('_like')) {
      return false;
    }
    if (l$$_like != lOther$$_like) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nilike = $_nilike;
    final lOther$$_nilike = other.$_nilike;
    if (_$data.containsKey('_nilike') != other._$data.containsKey('_nilike')) {
      return false;
    }
    if (l$$_nilike != lOther$$_nilike) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    final l$$_niregex = $_niregex;
    final lOther$$_niregex = other.$_niregex;
    if (_$data.containsKey('_niregex') !=
        other._$data.containsKey('_niregex')) {
      return false;
    }
    if (l$$_niregex != lOther$$_niregex) {
      return false;
    }
    final l$$_nlike = $_nlike;
    final lOther$$_nlike = other.$_nlike;
    if (_$data.containsKey('_nlike') != other._$data.containsKey('_nlike')) {
      return false;
    }
    if (l$$_nlike != lOther$$_nlike) {
      return false;
    }
    final l$$_nregex = $_nregex;
    final lOther$$_nregex = other.$_nregex;
    if (_$data.containsKey('_nregex') != other._$data.containsKey('_nregex')) {
      return false;
    }
    if (l$$_nregex != lOther$$_nregex) {
      return false;
    }
    final l$$_nsimilar = $_nsimilar;
    final lOther$$_nsimilar = other.$_nsimilar;
    if (_$data.containsKey('_nsimilar') !=
        other._$data.containsKey('_nsimilar')) {
      return false;
    }
    if (l$$_nsimilar != lOther$$_nsimilar) {
      return false;
    }
    final l$$_regex = $_regex;
    final lOther$$_regex = other.$_regex;
    if (_$data.containsKey('_regex') != other._$data.containsKey('_regex')) {
      return false;
    }
    if (l$$_regex != lOther$$_regex) {
      return false;
    }
    final l$$_similar = $_similar;
    final lOther$$_similar = other.$_similar;
    if (_$data.containsKey('_similar') !=
        other._$data.containsKey('_similar')) {
      return false;
    }
    if (l$$_similar != lOther$$_similar) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_ilike = $_ilike;
    final l$$_in = $_in;
    final l$$_iregex = $_iregex;
    final l$$_is_null = $_is_null;
    final l$$_like = $_like;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nilike = $_nilike;
    final l$$_nin = $_nin;
    final l$$_niregex = $_niregex;
    final l$$_nlike = $_nlike;
    final l$$_nregex = $_nregex;
    final l$$_nsimilar = $_nsimilar;
    final l$$_regex = $_regex;
    final l$$_similar = $_similar;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_ilike') ? l$$_ilike : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_iregex') ? l$$_iregex : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_like') ? l$$_like : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nilike') ? l$$_nilike : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
      _$data.containsKey('_niregex') ? l$$_niregex : const {},
      _$data.containsKey('_nlike') ? l$$_nlike : const {},
      _$data.containsKey('_nregex') ? l$$_nregex : const {},
      _$data.containsKey('_nsimilar') ? l$$_nsimilar : const {},
      _$data.containsKey('_regex') ? l$$_regex : const {},
      _$data.containsKey('_similar') ? l$$_similar : const {},
    ]);
  }
}

abstract class CopyWith$Input$String_comparison_exp<TRes> {
  factory CopyWith$Input$String_comparison_exp(
    Input$String_comparison_exp instance,
    TRes Function(Input$String_comparison_exp) then,
  ) = _CopyWithImpl$Input$String_comparison_exp;

  factory CopyWith$Input$String_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$String_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    String? $_ilike,
    List<String>? $_in,
    String? $_iregex,
    bool? $_is_null,
    String? $_like,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    String? $_nilike,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nlike,
    String? $_nregex,
    String? $_nsimilar,
    String? $_regex,
    String? $_similar,
  });
}

class _CopyWithImpl$Input$String_comparison_exp<TRes>
    implements CopyWith$Input$String_comparison_exp<TRes> {
  _CopyWithImpl$Input$String_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$String_comparison_exp _instance;

  final TRes Function(Input$String_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_ilike = _undefined,
    Object? $_in = _undefined,
    Object? $_iregex = _undefined,
    Object? $_is_null = _undefined,
    Object? $_like = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nilike = _undefined,
    Object? $_nin = _undefined,
    Object? $_niregex = _undefined,
    Object? $_nlike = _undefined,
    Object? $_nregex = _undefined,
    Object? $_nsimilar = _undefined,
    Object? $_regex = _undefined,
    Object? $_similar = _undefined,
  }) =>
      _then(Input$String_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_ilike != _undefined) '_ilike': ($_ilike as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_iregex != _undefined) '_iregex': ($_iregex as String?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_like != _undefined) '_like': ($_like as String?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nilike != _undefined) '_nilike': ($_nilike as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
        if ($_niregex != _undefined) '_niregex': ($_niregex as String?),
        if ($_nlike != _undefined) '_nlike': ($_nlike as String?),
        if ($_nregex != _undefined) '_nregex': ($_nregex as String?),
        if ($_nsimilar != _undefined) '_nsimilar': ($_nsimilar as String?),
        if ($_regex != _undefined) '_regex': ($_regex as String?),
        if ($_similar != _undefined) '_similar': ($_similar as String?),
      }));
}

class _CopyWithStubImpl$Input$String_comparison_exp<TRes>
    implements CopyWith$Input$String_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$String_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    String? $_ilike,
    List<String>? $_in,
    String? $_iregex,
    bool? $_is_null,
    String? $_like,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    String? $_nilike,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nlike,
    String? $_nregex,
    String? $_nsimilar,
    String? $_regex,
    String? $_similar,
  }) =>
      _res;
}

class Input$timestamptz_comparison_exp {
  factory Input$timestamptz_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      Input$timestamptz_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$timestamptz_comparison_exp._(this._$data);

  factory Input$timestamptz_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$timestamptz_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);

  String? get $_gt => (_$data['_gt'] as String?);

  String? get $_gte => (_$data['_gte'] as String?);

  List<String>? get $_in => (_$data['_in'] as List<String>?);

  bool? get $_is_null => (_$data['_is_null'] as bool?);

  String? get $_lt => (_$data['_lt'] as String?);

  String? get $_lte => (_$data['_lte'] as String?);

  String? get $_neq => (_$data['_neq'] as String?);

  List<String>? get $_nin => (_$data['_nin'] as List<String>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$timestamptz_comparison_exp<Input$timestamptz_comparison_exp>
      get copyWith => CopyWith$Input$timestamptz_comparison_exp(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$timestamptz_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$timestamptz_comparison_exp<TRes> {
  factory CopyWith$Input$timestamptz_comparison_exp(
    Input$timestamptz_comparison_exp instance,
    TRes Function(Input$timestamptz_comparison_exp) then,
  ) = _CopyWithImpl$Input$timestamptz_comparison_exp;

  factory CopyWith$Input$timestamptz_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$timestamptz_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  });
}

class _CopyWithImpl$Input$timestamptz_comparison_exp<TRes>
    implements CopyWith$Input$timestamptz_comparison_exp<TRes> {
  _CopyWithImpl$Input$timestamptz_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$timestamptz_comparison_exp _instance;

  final TRes Function(Input$timestamptz_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$timestamptz_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$timestamptz_comparison_exp<TRes>
    implements CopyWith$Input$timestamptz_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$timestamptz_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      _res;
}

enum Enum$artists_select_column { id, name, thumbnail_url, $unknown }

String toJson$Enum$artists_select_column(Enum$artists_select_column e) {
  switch (e) {
    case Enum$artists_select_column.id:
      return r'id';
    case Enum$artists_select_column.name:
      return r'name';
    case Enum$artists_select_column.thumbnail_url:
      return r'thumbnail_url';
    case Enum$artists_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$artists_select_column fromJson$Enum$artists_select_column(String value) {
  switch (value) {
    case r'id':
      return Enum$artists_select_column.id;
    case r'name':
      return Enum$artists_select_column.name;
    case r'thumbnail_url':
      return Enum$artists_select_column.thumbnail_url;
    default:
      return Enum$artists_select_column.$unknown;
  }
}

enum Enum$cursor_ordering { ASC, DESC, $unknown }

String toJson$Enum$cursor_ordering(Enum$cursor_ordering e) {
  switch (e) {
    case Enum$cursor_ordering.ASC:
      return r'ASC';
    case Enum$cursor_ordering.DESC:
      return r'DESC';
    case Enum$cursor_ordering.$unknown:
      return r'$unknown';
  }
}

Enum$cursor_ordering fromJson$Enum$cursor_ordering(String value) {
  switch (value) {
    case r'ASC':
      return Enum$cursor_ordering.ASC;
    case r'DESC':
      return Enum$cursor_ordering.DESC;
    default:
      return Enum$cursor_ordering.$unknown;
  }
}

enum Enum$order_by {
  asc,
  asc_nulls_first,
  asc_nulls_last,
  desc,
  desc_nulls_first,
  desc_nulls_last,
  $unknown
}

String toJson$Enum$order_by(Enum$order_by e) {
  switch (e) {
    case Enum$order_by.asc:
      return r'asc';
    case Enum$order_by.asc_nulls_first:
      return r'asc_nulls_first';
    case Enum$order_by.asc_nulls_last:
      return r'asc_nulls_last';
    case Enum$order_by.desc:
      return r'desc';
    case Enum$order_by.desc_nulls_first:
      return r'desc_nulls_first';
    case Enum$order_by.desc_nulls_last:
      return r'desc_nulls_last';
    case Enum$order_by.$unknown:
      return r'$unknown';
  }
}

Enum$order_by fromJson$Enum$order_by(String value) {
  switch (value) {
    case r'asc':
      return Enum$order_by.asc;
    case r'asc_nulls_first':
      return Enum$order_by.asc_nulls_first;
    case r'asc_nulls_last':
      return Enum$order_by.asc_nulls_last;
    case r'desc':
      return Enum$order_by.desc;
    case r'desc_nulls_first':
      return Enum$order_by.desc_nulls_first;
    case r'desc_nulls_last':
      return Enum$order_by.desc_nulls_last;
    default:
      return Enum$order_by.$unknown;
  }
}

enum Enum$posts_select_column {
  description,
  id,
  link,
  published,
  station_id,
  title,
  $unknown
}

String toJson$Enum$posts_select_column(Enum$posts_select_column e) {
  switch (e) {
    case Enum$posts_select_column.description:
      return r'description';
    case Enum$posts_select_column.id:
      return r'id';
    case Enum$posts_select_column.link:
      return r'link';
    case Enum$posts_select_column.published:
      return r'published';
    case Enum$posts_select_column.station_id:
      return r'station_id';
    case Enum$posts_select_column.title:
      return r'title';
    case Enum$posts_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$posts_select_column fromJson$Enum$posts_select_column(String value) {
  switch (value) {
    case r'description':
      return Enum$posts_select_column.description;
    case r'id':
      return Enum$posts_select_column.id;
    case r'link':
      return Enum$posts_select_column.link;
    case r'published':
      return Enum$posts_select_column.published;
    case r'station_id':
      return Enum$posts_select_column.station_id;
    case r'title':
      return Enum$posts_select_column.title;
    default:
      return Enum$posts_select_column.$unknown;
  }
}

enum Enum$reviews_select_column {
  created_at,
  id,
  message,
  stars,
  station_id,
  updated_at,
  verified,
  $unknown
}

String toJson$Enum$reviews_select_column(Enum$reviews_select_column e) {
  switch (e) {
    case Enum$reviews_select_column.created_at:
      return r'created_at';
    case Enum$reviews_select_column.id:
      return r'id';
    case Enum$reviews_select_column.message:
      return r'message';
    case Enum$reviews_select_column.stars:
      return r'stars';
    case Enum$reviews_select_column.station_id:
      return r'station_id';
    case Enum$reviews_select_column.updated_at:
      return r'updated_at';
    case Enum$reviews_select_column.verified:
      return r'verified';
    case Enum$reviews_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$reviews_select_column fromJson$Enum$reviews_select_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$reviews_select_column.created_at;
    case r'id':
      return Enum$reviews_select_column.id;
    case r'message':
      return Enum$reviews_select_column.message;
    case r'stars':
      return Enum$reviews_select_column.stars;
    case r'station_id':
      return Enum$reviews_select_column.station_id;
    case r'updated_at':
      return Enum$reviews_select_column.updated_at;
    case r'verified':
      return Enum$reviews_select_column.verified;
    default:
      return Enum$reviews_select_column.$unknown;
  }
}

enum Enum$songs_select_column { artist_id, id, name, thumbnail_url, $unknown }

String toJson$Enum$songs_select_column(Enum$songs_select_column e) {
  switch (e) {
    case Enum$songs_select_column.artist_id:
      return r'artist_id';
    case Enum$songs_select_column.id:
      return r'id';
    case Enum$songs_select_column.name:
      return r'name';
    case Enum$songs_select_column.thumbnail_url:
      return r'thumbnail_url';
    case Enum$songs_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$songs_select_column fromJson$Enum$songs_select_column(String value) {
  switch (value) {
    case r'artist_id':
      return Enum$songs_select_column.artist_id;
    case r'id':
      return Enum$songs_select_column.id;
    case r'name':
      return Enum$songs_select_column.name;
    case r'thumbnail_url':
      return Enum$songs_select_column.thumbnail_url;
    default:
      return Enum$songs_select_column.$unknown;
  }
}

enum Enum$station_groups_select_column { id, name, order, slug, $unknown }

String toJson$Enum$station_groups_select_column(
    Enum$station_groups_select_column e) {
  switch (e) {
    case Enum$station_groups_select_column.id:
      return r'id';
    case Enum$station_groups_select_column.name:
      return r'name';
    case Enum$station_groups_select_column.order:
      return r'order';
    case Enum$station_groups_select_column.slug:
      return r'slug';
    case Enum$station_groups_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$station_groups_select_column fromJson$Enum$station_groups_select_column(
    String value) {
  switch (value) {
    case r'id':
      return Enum$station_groups_select_column.id;
    case r'name':
      return Enum$station_groups_select_column.name;
    case r'order':
      return Enum$station_groups_select_column.order;
    case r'slug':
      return Enum$station_groups_select_column.slug;
    default:
      return Enum$station_groups_select_column.$unknown;
  }
}

enum Enum$station_to_station_group_select_column {
  group_id,
  id,
  order,
  station_id,
  $unknown
}

String toJson$Enum$station_to_station_group_select_column(
    Enum$station_to_station_group_select_column e) {
  switch (e) {
    case Enum$station_to_station_group_select_column.group_id:
      return r'group_id';
    case Enum$station_to_station_group_select_column.id:
      return r'id';
    case Enum$station_to_station_group_select_column.order:
      return r'order';
    case Enum$station_to_station_group_select_column.station_id:
      return r'station_id';
    case Enum$station_to_station_group_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$station_to_station_group_select_column
    fromJson$Enum$station_to_station_group_select_column(String value) {
  switch (value) {
    case r'group_id':
      return Enum$station_to_station_group_select_column.group_id;
    case r'id':
      return Enum$station_to_station_group_select_column.id;
    case r'order':
      return Enum$station_to_station_group_select_column.order;
    case r'station_id':
      return Enum$station_to_station_group_select_column.station_id;
    default:
      return Enum$station_to_station_group_select_column.$unknown;
  }
}

enum Enum$stations_now_playing_select_column {
  id,
  song_id,
  station_id,
  timestamp,
  $unknown
}

String toJson$Enum$stations_now_playing_select_column(
    Enum$stations_now_playing_select_column e) {
  switch (e) {
    case Enum$stations_now_playing_select_column.id:
      return r'id';
    case Enum$stations_now_playing_select_column.song_id:
      return r'song_id';
    case Enum$stations_now_playing_select_column.station_id:
      return r'station_id';
    case Enum$stations_now_playing_select_column.timestamp:
      return r'timestamp';
    case Enum$stations_now_playing_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$stations_now_playing_select_column
    fromJson$Enum$stations_now_playing_select_column(String value) {
  switch (value) {
    case r'id':
      return Enum$stations_now_playing_select_column.id;
    case r'song_id':
      return Enum$stations_now_playing_select_column.song_id;
    case r'station_id':
      return Enum$stations_now_playing_select_column.station_id;
    case r'timestamp':
      return Enum$stations_now_playing_select_column.timestamp;
    default:
      return Enum$stations_now_playing_select_column.$unknown;
  }
}

enum Enum$stations_select_column {
  created_at,
  description,
  description_action_title,
  description_link,
  email,
  facebook_page_id,
  feature_latest_post,
  id,
  latest_station_now_playing_id,
  latest_station_uptime_id,
  order,
  rss_feed,
  slug,
  stream_url,
  thumbnail,
  thumbnail_url,
  title,
  updated_at,
  website,
  $unknown
}

String toJson$Enum$stations_select_column(Enum$stations_select_column e) {
  switch (e) {
    case Enum$stations_select_column.created_at:
      return r'created_at';
    case Enum$stations_select_column.description:
      return r'description';
    case Enum$stations_select_column.description_action_title:
      return r'description_action_title';
    case Enum$stations_select_column.description_link:
      return r'description_link';
    case Enum$stations_select_column.email:
      return r'email';
    case Enum$stations_select_column.facebook_page_id:
      return r'facebook_page_id';
    case Enum$stations_select_column.feature_latest_post:
      return r'feature_latest_post';
    case Enum$stations_select_column.id:
      return r'id';
    case Enum$stations_select_column.latest_station_now_playing_id:
      return r'latest_station_now_playing_id';
    case Enum$stations_select_column.latest_station_uptime_id:
      return r'latest_station_uptime_id';
    case Enum$stations_select_column.order:
      return r'order';
    case Enum$stations_select_column.rss_feed:
      return r'rss_feed';
    case Enum$stations_select_column.slug:
      return r'slug';
    case Enum$stations_select_column.stream_url:
      return r'stream_url';
    case Enum$stations_select_column.thumbnail:
      return r'thumbnail';
    case Enum$stations_select_column.thumbnail_url:
      return r'thumbnail_url';
    case Enum$stations_select_column.title:
      return r'title';
    case Enum$stations_select_column.updated_at:
      return r'updated_at';
    case Enum$stations_select_column.website:
      return r'website';
    case Enum$stations_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$stations_select_column fromJson$Enum$stations_select_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$stations_select_column.created_at;
    case r'description':
      return Enum$stations_select_column.description;
    case r'description_action_title':
      return Enum$stations_select_column.description_action_title;
    case r'description_link':
      return Enum$stations_select_column.description_link;
    case r'email':
      return Enum$stations_select_column.email;
    case r'facebook_page_id':
      return Enum$stations_select_column.facebook_page_id;
    case r'feature_latest_post':
      return Enum$stations_select_column.feature_latest_post;
    case r'id':
      return Enum$stations_select_column.id;
    case r'latest_station_now_playing_id':
      return Enum$stations_select_column.latest_station_now_playing_id;
    case r'latest_station_uptime_id':
      return Enum$stations_select_column.latest_station_uptime_id;
    case r'order':
      return Enum$stations_select_column.order;
    case r'rss_feed':
      return Enum$stations_select_column.rss_feed;
    case r'slug':
      return Enum$stations_select_column.slug;
    case r'stream_url':
      return Enum$stations_select_column.stream_url;
    case r'thumbnail':
      return Enum$stations_select_column.thumbnail;
    case r'thumbnail_url':
      return Enum$stations_select_column.thumbnail_url;
    case r'title':
      return Enum$stations_select_column.title;
    case r'updated_at':
      return Enum$stations_select_column.updated_at;
    case r'website':
      return Enum$stations_select_column.website;
    default:
      return Enum$stations_select_column.$unknown;
  }
}

enum Enum$stations_uptime_select_column {
  id,
  is_up,
  latency_ms,
  station_id,
  timestamp,
  $unknown
}

String toJson$Enum$stations_uptime_select_column(
    Enum$stations_uptime_select_column e) {
  switch (e) {
    case Enum$stations_uptime_select_column.id:
      return r'id';
    case Enum$stations_uptime_select_column.is_up:
      return r'is_up';
    case Enum$stations_uptime_select_column.latency_ms:
      return r'latency_ms';
    case Enum$stations_uptime_select_column.station_id:
      return r'station_id';
    case Enum$stations_uptime_select_column.timestamp:
      return r'timestamp';
    case Enum$stations_uptime_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$stations_uptime_select_column fromJson$Enum$stations_uptime_select_column(
    String value) {
  switch (value) {
    case r'id':
      return Enum$stations_uptime_select_column.id;
    case r'is_up':
      return Enum$stations_uptime_select_column.is_up;
    case r'latency_ms':
      return Enum$stations_uptime_select_column.latency_ms;
    case r'station_id':
      return Enum$stations_uptime_select_column.station_id;
    case r'timestamp':
      return Enum$stations_uptime_select_column.timestamp;
    default:
      return Enum$stations_uptime_select_column.$unknown;
  }
}

enum Enum$__TypeKind {
  SCALAR,
  OBJECT,
  INTERFACE,
  UNION,
  ENUM,
  INPUT_OBJECT,
  LIST,
  NON_NULL,
  $unknown
}

String toJson$Enum$__TypeKind(Enum$__TypeKind e) {
  switch (e) {
    case Enum$__TypeKind.SCALAR:
      return r'SCALAR';
    case Enum$__TypeKind.OBJECT:
      return r'OBJECT';
    case Enum$__TypeKind.INTERFACE:
      return r'INTERFACE';
    case Enum$__TypeKind.UNION:
      return r'UNION';
    case Enum$__TypeKind.ENUM:
      return r'ENUM';
    case Enum$__TypeKind.INPUT_OBJECT:
      return r'INPUT_OBJECT';
    case Enum$__TypeKind.LIST:
      return r'LIST';
    case Enum$__TypeKind.NON_NULL:
      return r'NON_NULL';
    case Enum$__TypeKind.$unknown:
      return r'$unknown';
  }
}

Enum$__TypeKind fromJson$Enum$__TypeKind(String value) {
  switch (value) {
    case r'SCALAR':
      return Enum$__TypeKind.SCALAR;
    case r'OBJECT':
      return Enum$__TypeKind.OBJECT;
    case r'INTERFACE':
      return Enum$__TypeKind.INTERFACE;
    case r'UNION':
      return Enum$__TypeKind.UNION;
    case r'ENUM':
      return Enum$__TypeKind.ENUM;
    case r'INPUT_OBJECT':
      return Enum$__TypeKind.INPUT_OBJECT;
    case r'LIST':
      return Enum$__TypeKind.LIST;
    case r'NON_NULL':
      return Enum$__TypeKind.NON_NULL;
    default:
      return Enum$__TypeKind.$unknown;
  }
}

enum Enum$__DirectiveLocation {
  QUERY,
  MUTATION,
  SUBSCRIPTION,
  FIELD,
  FRAGMENT_DEFINITION,
  FRAGMENT_SPREAD,
  INLINE_FRAGMENT,
  VARIABLE_DEFINITION,
  SCHEMA,
  SCALAR,
  OBJECT,
  FIELD_DEFINITION,
  ARGUMENT_DEFINITION,
  INTERFACE,
  UNION,
  ENUM,
  ENUM_VALUE,
  INPUT_OBJECT,
  INPUT_FIELD_DEFINITION,
  $unknown
}

String toJson$Enum$__DirectiveLocation(Enum$__DirectiveLocation e) {
  switch (e) {
    case Enum$__DirectiveLocation.QUERY:
      return r'QUERY';
    case Enum$__DirectiveLocation.MUTATION:
      return r'MUTATION';
    case Enum$__DirectiveLocation.SUBSCRIPTION:
      return r'SUBSCRIPTION';
    case Enum$__DirectiveLocation.FIELD:
      return r'FIELD';
    case Enum$__DirectiveLocation.FRAGMENT_DEFINITION:
      return r'FRAGMENT_DEFINITION';
    case Enum$__DirectiveLocation.FRAGMENT_SPREAD:
      return r'FRAGMENT_SPREAD';
    case Enum$__DirectiveLocation.INLINE_FRAGMENT:
      return r'INLINE_FRAGMENT';
    case Enum$__DirectiveLocation.VARIABLE_DEFINITION:
      return r'VARIABLE_DEFINITION';
    case Enum$__DirectiveLocation.SCHEMA:
      return r'SCHEMA';
    case Enum$__DirectiveLocation.SCALAR:
      return r'SCALAR';
    case Enum$__DirectiveLocation.OBJECT:
      return r'OBJECT';
    case Enum$__DirectiveLocation.FIELD_DEFINITION:
      return r'FIELD_DEFINITION';
    case Enum$__DirectiveLocation.ARGUMENT_DEFINITION:
      return r'ARGUMENT_DEFINITION';
    case Enum$__DirectiveLocation.INTERFACE:
      return r'INTERFACE';
    case Enum$__DirectiveLocation.UNION:
      return r'UNION';
    case Enum$__DirectiveLocation.ENUM:
      return r'ENUM';
    case Enum$__DirectiveLocation.ENUM_VALUE:
      return r'ENUM_VALUE';
    case Enum$__DirectiveLocation.INPUT_OBJECT:
      return r'INPUT_OBJECT';
    case Enum$__DirectiveLocation.INPUT_FIELD_DEFINITION:
      return r'INPUT_FIELD_DEFINITION';
    case Enum$__DirectiveLocation.$unknown:
      return r'$unknown';
  }
}

Enum$__DirectiveLocation fromJson$Enum$__DirectiveLocation(String value) {
  switch (value) {
    case r'QUERY':
      return Enum$__DirectiveLocation.QUERY;
    case r'MUTATION':
      return Enum$__DirectiveLocation.MUTATION;
    case r'SUBSCRIPTION':
      return Enum$__DirectiveLocation.SUBSCRIPTION;
    case r'FIELD':
      return Enum$__DirectiveLocation.FIELD;
    case r'FRAGMENT_DEFINITION':
      return Enum$__DirectiveLocation.FRAGMENT_DEFINITION;
    case r'FRAGMENT_SPREAD':
      return Enum$__DirectiveLocation.FRAGMENT_SPREAD;
    case r'INLINE_FRAGMENT':
      return Enum$__DirectiveLocation.INLINE_FRAGMENT;
    case r'VARIABLE_DEFINITION':
      return Enum$__DirectiveLocation.VARIABLE_DEFINITION;
    case r'SCHEMA':
      return Enum$__DirectiveLocation.SCHEMA;
    case r'SCALAR':
      return Enum$__DirectiveLocation.SCALAR;
    case r'OBJECT':
      return Enum$__DirectiveLocation.OBJECT;
    case r'FIELD_DEFINITION':
      return Enum$__DirectiveLocation.FIELD_DEFINITION;
    case r'ARGUMENT_DEFINITION':
      return Enum$__DirectiveLocation.ARGUMENT_DEFINITION;
    case r'INTERFACE':
      return Enum$__DirectiveLocation.INTERFACE;
    case r'UNION':
      return Enum$__DirectiveLocation.UNION;
    case r'ENUM':
      return Enum$__DirectiveLocation.ENUM;
    case r'ENUM_VALUE':
      return Enum$__DirectiveLocation.ENUM_VALUE;
    case r'INPUT_OBJECT':
      return Enum$__DirectiveLocation.INPUT_OBJECT;
    case r'INPUT_FIELD_DEFINITION':
      return Enum$__DirectiveLocation.INPUT_FIELD_DEFINITION;
    default:
      return Enum$__DirectiveLocation.$unknown;
  }
}

const possibleTypesMap = <String, Set<String>>{};
